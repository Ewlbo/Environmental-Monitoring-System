
ReadCapacitance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000006a4  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800114  00800114  0000074c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a24  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000435  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  00002489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  9e:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}

void setup(void)
{	
	// Capacitor pins
	DDRC |= A0;				// A0 as OUTPUT
  a6:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= A1;				// A1 as OUTPUT
  a8:	39 9a       	sbi	0x07, 1	; 7
	
	// 16-bit Timer1
	TCCR1A = (1 << WGM11);	//Set CTC Bit
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR1A = 156;
  b0:	2c e9       	ldi	r18, 0x9C	; 156
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << OCIE1A);
  bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = (1 << CS10) | (1 << CS12);	//No pre-scaler used
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// ADC
	ADMUX=(1<<REFS0);									// For Aref = AVcc;
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	// Pre-scaler div factor =128
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	// UART
	UBRR0H = (BRC >> 8);
  d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  BRC;
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
  dc:	88 e4       	ldi	r24, 0x48	; 72
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	sei();					// Enable interrupt
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <ReadADC>:


uint16_t ReadADC(uint8_t adcx)
{
	// Select ADC Channel
	ADMUX	&=	0xf0;
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
  f6:	90 81       	ld	r25, Z
  f8:	89 2b       	or	r24, r25
  fa:	80 83       	st	Z, r24

	// Start Single conversion
	ADCSRA|=(1<<ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24

	// Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 106:	80 81       	ld	r24, Z
 108:	84 ff       	sbrs	r24, 4
 10a:	fd cf       	rjmp	.-6      	; 0x106 <ReadADC+0x1a>

	//Clear ADIF by writing 1 to it
	ADCSRA|=(1<<ADIF);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 61       	ori	r24, 0x10	; 16
 114:	80 83       	st	Z, r24

	return(ADC);
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 11e:	08 95       	ret

00000120 <readCapacitance>:
	sei();					// Enable interrupt
	
}

float readCapacitance(void)
{
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	float capacitance;
	int adc_result;
	float IC = 24.48;			// Internal capacitance (error)
	
	DDRC &= ~(A0);				// A0 as INPUT
 12c:	38 98       	cbi	0x07, 0	; 7
	PORTC |= A1;				// A1 HIGH (charge)
 12e:	41 9a       	sbi	0x08, 1	; 8
	adc_result = ReadADC(0);	// Read ADC from A0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 76 00 	call	0xec	; 0xec <ReadADC>
 136:	ec 01       	movw	r28, r24
	PORTC &= ~(A1);				// A1 LOW (discharge)
 138:	41 98       	cbi	0x08, 1	; 8
	DDRC |= A0;					// A0 as OUTPUT (to make sure it discharges)
 13a:	38 9a       	sbi	0x07, 0	; 7
	
	capacitance = (adc_result*IC)/(1023-adc_result);
	
	return(capacitance);	
 13c:	bc 01       	movw	r22, r24
 13e:	99 0f       	add	r25, r25
 140:	88 0b       	sbc	r24, r24
 142:	99 0b       	sbc	r25, r25
 144:	0e 94 22 02 	call	0x444	; 0x444 <__floatsisf>
 148:	2a e0       	ldi	r18, 0x0A	; 10
 14a:	37 ed       	ldi	r19, 0xD7	; 215
 14c:	43 ec       	ldi	r20, 0xC3	; 195
 14e:	51 e4       	ldi	r21, 0x41	; 65
 150:	0e 94 ae 02 	call	0x55c	; 0x55c <__mulsf3>
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
 158:	6f ef       	ldi	r22, 0xFF	; 255
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	6c 1b       	sub	r22, r28
 15e:	7d 0b       	sbc	r23, r29
 160:	07 2e       	mov	r0, r23
 162:	00 0c       	add	r0, r0
 164:	88 0b       	sbc	r24, r24
 166:	99 0b       	sbc	r25, r25
 168:	0e 94 22 02 	call	0x444	; 0x444 <__floatsisf>
 16c:	9b 01       	movw	r18, r22
 16e:	ac 01       	movw	r20, r24
 170:	c7 01       	movw	r24, r14
 172:	b6 01       	movw	r22, r12
 174:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__divsf3>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	cf 90       	pop	r12
 184:	08 95       	ret

00000186 <appendSerial>:
	return(ADC);
}

void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
 186:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__data_end>
 18a:	e9 2f       	mov	r30, r25
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e6 5e       	subi	r30, 0xE6	; 230
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 83       	st	Z, r24
	serialWritePos++;
 194:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(serialWritePos >= TX_BUFFER_SIZE)
 196:	1a f0       	brmi	.+6      	; 0x19e <appendSerial+0x18>
}

void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
	serialWritePos++;
 198:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <__data_end>
 19c:	08 95       	ret
	
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
 19e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 1a2:	08 95       	ret

000001a4 <serialWrite>:
	}
}

void serialWrite(char c[])
{
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++)
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <serialWrite+0x1a>
	{
		appendSerial(c[i]);
 1b0:	fe 01       	movw	r30, r28
 1b2:	e8 0f       	add	r30, r24
 1b4:	f9 1f       	adc	r31, r25
 1b6:	80 81       	ld	r24, Z
 1b8:	0e 94 c3 00 	call	0x186	; 0x186 <appendSerial>
	}
}

void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
 1be:	81 2f       	mov	r24, r17
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fe 01       	movw	r30, r28
 1c4:	01 90       	ld	r0, Z+
 1c6:	00 20       	and	r0, r0
 1c8:	e9 f7       	brne	.-6      	; 0x1c4 <serialWrite+0x20>
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	ec 1b       	sub	r30, r28
 1ce:	fd 0b       	sbc	r31, r29
 1d0:	8e 17       	cp	r24, r30
 1d2:	9f 07       	cpc	r25, r31
 1d4:	68 f3       	brcs	.-38     	; 0x1b0 <serialWrite+0xc>
	{
		appendSerial(c[i]);
	}
	
	if(UCSR0A & (1 << UDRE0))
 1d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1da:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
 1dc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <main>:
#define A0 0x01				// PC0
#define A1 0x02				// PC1


int main(void)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	28 97       	sbiw	r28, 0x08	; 8
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	setup();
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
	char string[8];
	serialWrite("Read capacitance\n\r");
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <serialWrite>
	
	while(1)
	{
		float capacitance = readCapacitance();
 208:	0e 94 90 00 	call	0x120	; 0x120 <readCapacitance>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 20c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fixsfsi>
 210:	dc 01       	movw	r26, r24
 212:	cb 01       	movw	r24, r22
 214:	4a e0       	ldi	r20, 0x0A	; 10
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	0e 94 1b 03 	call	0x636	; 0x636 <__itoa_ncheck>
		itoa(capacitance, string, 10);		// Convert float to string
		serialWrite(string);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <serialWrite>
		serialWrite("\n\r");
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <serialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	83 ed       	ldi	r24, 0xD3	; 211
 234:	90 e3       	ldi	r25, 0x30	; 48
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x4e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x58>
 240:	00 00       	nop
 242:	e2 cf       	rjmp	.-60     	; 0x208 <main+0x20>

00000244 <__vector_20>:
		UDR0 = 0;
	}
}

ISR(USART_TX_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
 256:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <serialReadPos>
 25a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 25e:	e8 17       	cp	r30, r24
 260:	89 f0       	breq	.+34     	; 0x284 <__vector_20+0x40>
	{
		UDR0 = serialBuffer[serialReadPos];
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	e6 5e       	subi	r30, 0xE6	; 230
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	80 81       	ld	r24, Z
 26a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		serialReadPos++;
 26e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <serialReadPos>
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	98 0f       	add	r25, r24
		
		if(serialReadPos >= TX_BUFFER_SIZE)
 276:	1a f0       	brmi	.+6      	; 0x27e <__vector_20+0x3a>
ISR(USART_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serialBuffer[serialReadPos];
		serialReadPos++;
 278:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <serialReadPos>
 27c:	03 c0       	rjmp	.+6      	; 0x284 <__vector_20+0x40>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos++;
 27e:	8e 5f       	subi	r24, 0xFE	; 254
 280:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <serialReadPos>
		}
	}
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
	++timer;
 2a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer>
 2ac:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer+0x1>
 2b0:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timer+0x2>
 2b4:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timer+0x3>
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	a1 1d       	adc	r26, r1
 2bc:	b1 1d       	adc	r27, r1
 2be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer>
 2c2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timer+0x1>
 2c6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timer+0x2>
 2ca:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timer+0x3>
	
	if(timer > 50)		
 2ce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer>
 2d2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer+0x1>
 2d6:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timer+0x2>
 2da:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timer+0x3>
	{
		// check gas approx. every 1.5s
	}
}
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__divsf3>:
 2f0:	0e 94 8c 01 	call	0x318	; 0x318 <__divsf3x>
 2f4:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_round>
 2f8:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscB>
 2fc:	58 f0       	brcs	.+22     	; 0x314 <__divsf3+0x24>
 2fe:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscA>
 302:	40 f0       	brcs	.+16     	; 0x314 <__divsf3+0x24>
 304:	29 f4       	brne	.+10     	; 0x310 <__divsf3+0x20>
 306:	5f 3f       	cpi	r21, 0xFF	; 255
 308:	29 f0       	breq	.+10     	; 0x314 <__divsf3+0x24>
 30a:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 30e:	51 11       	cpse	r21, r1
 310:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 314:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_nan>

00000318 <__divsf3x>:
 318:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 31c:	68 f3       	brcs	.-38     	; 0x2f8 <__divsf3+0x8>

0000031e <__divsf3_pse>:
 31e:	99 23       	and	r25, r25
 320:	b1 f3       	breq	.-20     	; 0x30e <__divsf3+0x1e>
 322:	55 23       	and	r21, r21
 324:	91 f3       	breq	.-28     	; 0x30a <__divsf3+0x1a>
 326:	95 1b       	sub	r25, r21
 328:	55 0b       	sbc	r21, r21
 32a:	bb 27       	eor	r27, r27
 32c:	aa 27       	eor	r26, r26
 32e:	62 17       	cp	r22, r18
 330:	73 07       	cpc	r23, r19
 332:	84 07       	cpc	r24, r20
 334:	38 f0       	brcs	.+14     	; 0x344 <__divsf3_pse+0x26>
 336:	9f 5f       	subi	r25, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	44 1f       	adc	r20, r20
 340:	aa 1f       	adc	r26, r26
 342:	a9 f3       	breq	.-22     	; 0x32e <__divsf3_pse+0x10>
 344:	35 d0       	rcall	.+106    	; 0x3b0 <__divsf3_pse+0x92>
 346:	0e 2e       	mov	r0, r30
 348:	3a f0       	brmi	.+14     	; 0x358 <__divsf3_pse+0x3a>
 34a:	e0 e8       	ldi	r30, 0x80	; 128
 34c:	32 d0       	rcall	.+100    	; 0x3b2 <__divsf3_pse+0x94>
 34e:	91 50       	subi	r25, 0x01	; 1
 350:	50 40       	sbci	r21, 0x00	; 0
 352:	e6 95       	lsr	r30
 354:	00 1c       	adc	r0, r0
 356:	ca f7       	brpl	.-14     	; 0x34a <__divsf3_pse+0x2c>
 358:	2b d0       	rcall	.+86     	; 0x3b0 <__divsf3_pse+0x92>
 35a:	fe 2f       	mov	r31, r30
 35c:	29 d0       	rcall	.+82     	; 0x3b0 <__divsf3_pse+0x92>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	bb 1f       	adc	r27, r27
 366:	26 17       	cp	r18, r22
 368:	37 07       	cpc	r19, r23
 36a:	48 07       	cpc	r20, r24
 36c:	ab 07       	cpc	r26, r27
 36e:	b0 e8       	ldi	r27, 0x80	; 128
 370:	09 f0       	breq	.+2      	; 0x374 <__divsf3_pse+0x56>
 372:	bb 0b       	sbc	r27, r27
 374:	80 2d       	mov	r24, r0
 376:	bf 01       	movw	r22, r30
 378:	ff 27       	eor	r31, r31
 37a:	93 58       	subi	r25, 0x83	; 131
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	3a f0       	brmi	.+14     	; 0x38e <__divsf3_pse+0x70>
 380:	9e 3f       	cpi	r25, 0xFE	; 254
 382:	51 05       	cpc	r21, r1
 384:	78 f0       	brcs	.+30     	; 0x3a4 <__divsf3_pse+0x86>
 386:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 38a:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 38e:	5f 3f       	cpi	r21, 0xFF	; 255
 390:	e4 f3       	brlt	.-8      	; 0x38a <__divsf3_pse+0x6c>
 392:	98 3e       	cpi	r25, 0xE8	; 232
 394:	d4 f3       	brlt	.-12     	; 0x38a <__divsf3_pse+0x6c>
 396:	86 95       	lsr	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b7 95       	ror	r27
 39e:	f7 95       	ror	r31
 3a0:	9f 5f       	subi	r25, 0xFF	; 255
 3a2:	c9 f7       	brne	.-14     	; 0x396 <__divsf3_pse+0x78>
 3a4:	88 0f       	add	r24, r24
 3a6:	91 1d       	adc	r25, r1
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	97 f9       	bld	r25, 7
 3ae:	08 95       	ret
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	bb 1f       	adc	r27, r27
 3ba:	62 17       	cp	r22, r18
 3bc:	73 07       	cpc	r23, r19
 3be:	84 07       	cpc	r24, r20
 3c0:	ba 07       	cpc	r27, r26
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__divsf3_pse+0xae>
 3c4:	62 1b       	sub	r22, r18
 3c6:	73 0b       	sbc	r23, r19
 3c8:	84 0b       	sbc	r24, r20
 3ca:	ba 0b       	sbc	r27, r26
 3cc:	ee 1f       	adc	r30, r30
 3ce:	88 f7       	brcc	.-30     	; 0x3b2 <__divsf3_pse+0x94>
 3d0:	e0 95       	com	r30
 3d2:	08 95       	ret

000003d4 <__fixsfsi>:
 3d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fixunssfsi>
 3d8:	68 94       	set
 3da:	b1 11       	cpse	r27, r1
 3dc:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 3e0:	08 95       	ret

000003e2 <__fixunssfsi>:
 3e2:	0e 94 8d 02 	call	0x51a	; 0x51a <__fp_splitA>
 3e6:	88 f0       	brcs	.+34     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e8:	9f 57       	subi	r25, 0x7F	; 127
 3ea:	98 f0       	brcs	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ec:	b9 2f       	mov	r27, r25
 3ee:	99 27       	eor	r25, r25
 3f0:	b7 51       	subi	r27, 0x17	; 23
 3f2:	b0 f0       	brcs	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f4:	e1 f0       	breq	.+56     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	1a f0       	brmi	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	ba 95       	dec	r27
 402:	c9 f7       	brne	.-14     	; 0x3f6 <__fixunssfsi+0x14>
 404:	14 c0       	rjmp	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 406:	b1 30       	cpi	r27, 0x01	; 1
 408:	91 f0       	breq	.+36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40a:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_zero>
 40e:	b1 e0       	ldi	r27, 0x01	; 1
 410:	08 95       	ret
 412:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_zero>
 416:	67 2f       	mov	r22, r23
 418:	78 2f       	mov	r23, r24
 41a:	88 27       	eor	r24, r24
 41c:	b8 5f       	subi	r27, 0xF8	; 248
 41e:	39 f0       	breq	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	b9 3f       	cpi	r27, 0xF9	; 249
 422:	cc f3       	brlt	.-14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b3 95       	inc	r27
 42c:	d9 f7       	brne	.-10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42e:	3e f4       	brtc	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 430:	90 95       	com	r25
 432:	80 95       	com	r24
 434:	70 95       	com	r23
 436:	61 95       	neg	r22
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__floatunsisf>:
 440:	e8 94       	clt
 442:	09 c0       	rjmp	.+18     	; 0x456 <__floatsisf+0x12>

00000444 <__floatsisf>:
 444:	97 fb       	bst	r25, 7
 446:	3e f4       	brtc	.+14     	; 0x456 <__floatsisf+0x12>
 448:	90 95       	com	r25
 44a:	80 95       	com	r24
 44c:	70 95       	com	r23
 44e:	61 95       	neg	r22
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	99 23       	and	r25, r25
 458:	a9 f0       	breq	.+42     	; 0x484 <__floatsisf+0x40>
 45a:	f9 2f       	mov	r31, r25
 45c:	96 e9       	ldi	r25, 0x96	; 150
 45e:	bb 27       	eor	r27, r27
 460:	93 95       	inc	r25
 462:	f6 95       	lsr	r31
 464:	87 95       	ror	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f1 11       	cpse	r31, r1
 46e:	f8 cf       	rjmp	.-16     	; 0x460 <__floatsisf+0x1c>
 470:	fa f4       	brpl	.+62     	; 0x4b0 <__floatsisf+0x6c>
 472:	bb 0f       	add	r27, r27
 474:	11 f4       	brne	.+4      	; 0x47a <__floatsisf+0x36>
 476:	60 ff       	sbrs	r22, 0
 478:	1b c0       	rjmp	.+54     	; 0x4b0 <__floatsisf+0x6c>
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <__floatsisf+0x6c>
 484:	88 23       	and	r24, r24
 486:	11 f0       	breq	.+4      	; 0x48c <__floatsisf+0x48>
 488:	96 e9       	ldi	r25, 0x96	; 150
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <__floatsisf+0x6a>
 48c:	77 23       	and	r23, r23
 48e:	21 f0       	breq	.+8      	; 0x498 <__floatsisf+0x54>
 490:	9e e8       	ldi	r25, 0x8E	; 142
 492:	87 2f       	mov	r24, r23
 494:	76 2f       	mov	r23, r22
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__floatsisf+0x5e>
 498:	66 23       	and	r22, r22
 49a:	71 f0       	breq	.+28     	; 0x4b8 <__floatsisf+0x74>
 49c:	96 e8       	ldi	r25, 0x86	; 134
 49e:	86 2f       	mov	r24, r22
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	2a f0       	brmi	.+10     	; 0x4b0 <__floatsisf+0x6c>
 4a6:	9a 95       	dec	r25
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	da f7       	brpl	.-10     	; 0x4a6 <__floatsisf+0x62>
 4b0:	88 0f       	add	r24, r24
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret

000004ba <__fp_inf>:
 4ba:	97 f9       	bld	r25, 7
 4bc:	9f 67       	ori	r25, 0x7F	; 127
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <__fp_nan>:
 4c6:	9f ef       	ldi	r25, 0xFF	; 255
 4c8:	80 ec       	ldi	r24, 0xC0	; 192
 4ca:	08 95       	ret

000004cc <__fp_pscA>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	16 16       	cp	r1, r22
 4d2:	17 06       	cpc	r1, r23
 4d4:	18 06       	cpc	r1, r24
 4d6:	09 06       	cpc	r0, r25
 4d8:	08 95       	ret

000004da <__fp_pscB>:
 4da:	00 24       	eor	r0, r0
 4dc:	0a 94       	dec	r0
 4de:	12 16       	cp	r1, r18
 4e0:	13 06       	cpc	r1, r19
 4e2:	14 06       	cpc	r1, r20
 4e4:	05 06       	cpc	r0, r21
 4e6:	08 95       	ret

000004e8 <__fp_round>:
 4e8:	09 2e       	mov	r0, r25
 4ea:	03 94       	inc	r0
 4ec:	00 0c       	add	r0, r0
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__fp_round+0xc>
 4f0:	88 23       	and	r24, r24
 4f2:	52 f0       	brmi	.+20     	; 0x508 <__fp_round+0x20>
 4f4:	bb 0f       	add	r27, r27
 4f6:	40 f4       	brcc	.+16     	; 0x508 <__fp_round+0x20>
 4f8:	bf 2b       	or	r27, r31
 4fa:	11 f4       	brne	.+4      	; 0x500 <__fp_round+0x18>
 4fc:	60 ff       	sbrs	r22, 0
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <__fp_round+0x20>
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	08 95       	ret

0000050a <__fp_split3>:
 50a:	57 fd       	sbrc	r21, 7
 50c:	90 58       	subi	r25, 0x80	; 128
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	59 f0       	breq	.+22     	; 0x52a <__fp_splitA+0x10>
 514:	5f 3f       	cpi	r21, 0xFF	; 255
 516:	71 f0       	breq	.+28     	; 0x534 <__fp_splitA+0x1a>
 518:	47 95       	ror	r20

0000051a <__fp_splitA>:
 51a:	88 0f       	add	r24, r24
 51c:	97 fb       	bst	r25, 7
 51e:	99 1f       	adc	r25, r25
 520:	61 f0       	breq	.+24     	; 0x53a <__fp_splitA+0x20>
 522:	9f 3f       	cpi	r25, 0xFF	; 255
 524:	79 f0       	breq	.+30     	; 0x544 <__fp_splitA+0x2a>
 526:	87 95       	ror	r24
 528:	08 95       	ret
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	55 1f       	adc	r21, r21
 532:	f2 cf       	rjmp	.-28     	; 0x518 <__fp_split3+0xe>
 534:	46 95       	lsr	r20
 536:	f1 df       	rcall	.-30     	; 0x51a <__fp_splitA>
 538:	08 c0       	rjmp	.+16     	; 0x54a <__fp_splitA+0x30>
 53a:	16 16       	cp	r1, r22
 53c:	17 06       	cpc	r1, r23
 53e:	18 06       	cpc	r1, r24
 540:	99 1f       	adc	r25, r25
 542:	f1 cf       	rjmp	.-30     	; 0x526 <__fp_splitA+0xc>
 544:	86 95       	lsr	r24
 546:	71 05       	cpc	r23, r1
 548:	61 05       	cpc	r22, r1
 54a:	08 94       	sec
 54c:	08 95       	ret

0000054e <__fp_zero>:
 54e:	e8 94       	clt

00000550 <__fp_szero>:
 550:	bb 27       	eor	r27, r27
 552:	66 27       	eor	r22, r22
 554:	77 27       	eor	r23, r23
 556:	cb 01       	movw	r24, r22
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__mulsf3>:
 55c:	0e 94 c1 02 	call	0x582	; 0x582 <__mulsf3x>
 560:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_round>
 564:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscA>
 568:	38 f0       	brcs	.+14     	; 0x578 <__mulsf3+0x1c>
 56a:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscB>
 56e:	20 f0       	brcs	.+8      	; 0x578 <__mulsf3+0x1c>
 570:	95 23       	and	r25, r21
 572:	11 f0       	breq	.+4      	; 0x578 <__mulsf3+0x1c>
 574:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 578:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_nan>
 57c:	11 24       	eor	r1, r1
 57e:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>

00000582 <__mulsf3x>:
 582:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 586:	70 f3       	brcs	.-36     	; 0x564 <__mulsf3+0x8>

00000588 <__mulsf3_pse>:
 588:	95 9f       	mul	r25, r21
 58a:	c1 f3       	breq	.-16     	; 0x57c <__mulsf3+0x20>
 58c:	95 0f       	add	r25, r21
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	55 1f       	adc	r21, r21
 592:	62 9f       	mul	r22, r18
 594:	f0 01       	movw	r30, r0
 596:	72 9f       	mul	r23, r18
 598:	bb 27       	eor	r27, r27
 59a:	f0 0d       	add	r31, r0
 59c:	b1 1d       	adc	r27, r1
 59e:	63 9f       	mul	r22, r19
 5a0:	aa 27       	eor	r26, r26
 5a2:	f0 0d       	add	r31, r0
 5a4:	b1 1d       	adc	r27, r1
 5a6:	aa 1f       	adc	r26, r26
 5a8:	64 9f       	mul	r22, r20
 5aa:	66 27       	eor	r22, r22
 5ac:	b0 0d       	add	r27, r0
 5ae:	a1 1d       	adc	r26, r1
 5b0:	66 1f       	adc	r22, r22
 5b2:	82 9f       	mul	r24, r18
 5b4:	22 27       	eor	r18, r18
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	62 1f       	adc	r22, r18
 5bc:	73 9f       	mul	r23, r19
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	62 1f       	adc	r22, r18
 5c4:	83 9f       	mul	r24, r19
 5c6:	a0 0d       	add	r26, r0
 5c8:	61 1d       	adc	r22, r1
 5ca:	22 1f       	adc	r18, r18
 5cc:	74 9f       	mul	r23, r20
 5ce:	33 27       	eor	r19, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	23 1f       	adc	r18, r19
 5d6:	84 9f       	mul	r24, r20
 5d8:	60 0d       	add	r22, r0
 5da:	21 1d       	adc	r18, r1
 5dc:	82 2f       	mov	r24, r18
 5de:	76 2f       	mov	r23, r22
 5e0:	6a 2f       	mov	r22, r26
 5e2:	11 24       	eor	r1, r1
 5e4:	9f 57       	subi	r25, 0x7F	; 127
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	9a f0       	brmi	.+38     	; 0x610 <__mulsf3_pse+0x88>
 5ea:	f1 f0       	breq	.+60     	; 0x628 <__mulsf3_pse+0xa0>
 5ec:	88 23       	and	r24, r24
 5ee:	4a f0       	brmi	.+18     	; 0x602 <__mulsf3_pse+0x7a>
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	bb 1f       	adc	r27, r27
 5f6:	66 1f       	adc	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	91 50       	subi	r25, 0x01	; 1
 5fe:	50 40       	sbci	r21, 0x00	; 0
 600:	a9 f7       	brne	.-22     	; 0x5ec <__mulsf3_pse+0x64>
 602:	9e 3f       	cpi	r25, 0xFE	; 254
 604:	51 05       	cpc	r21, r1
 606:	80 f0       	brcs	.+32     	; 0x628 <__mulsf3_pse+0xa0>
 608:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 60c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 610:	5f 3f       	cpi	r21, 0xFF	; 255
 612:	e4 f3       	brlt	.-8      	; 0x60c <__mulsf3_pse+0x84>
 614:	98 3e       	cpi	r25, 0xE8	; 232
 616:	d4 f3       	brlt	.-12     	; 0x60c <__mulsf3_pse+0x84>
 618:	86 95       	lsr	r24
 61a:	77 95       	ror	r23
 61c:	67 95       	ror	r22
 61e:	b7 95       	ror	r27
 620:	f7 95       	ror	r31
 622:	e7 95       	ror	r30
 624:	9f 5f       	subi	r25, 0xFF	; 255
 626:	c1 f7       	brne	.-16     	; 0x618 <__mulsf3_pse+0x90>
 628:	fe 2b       	or	r31, r30
 62a:	88 0f       	add	r24, r24
 62c:	91 1d       	adc	r25, r1
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__itoa_ncheck>:
 636:	bb 27       	eor	r27, r27
 638:	4a 30       	cpi	r20, 0x0A	; 10
 63a:	31 f4       	brne	.+12     	; 0x648 <__itoa_ncheck+0x12>
 63c:	99 23       	and	r25, r25
 63e:	22 f4       	brpl	.+8      	; 0x648 <__itoa_ncheck+0x12>
 640:	bd e2       	ldi	r27, 0x2D	; 45
 642:	90 95       	com	r25
 644:	81 95       	neg	r24
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	0c 94 27 03 	jmp	0x64e	; 0x64e <__utoa_common>

0000064c <__utoa_ncheck>:
 64c:	bb 27       	eor	r27, r27

0000064e <__utoa_common>:
 64e:	fb 01       	movw	r30, r22
 650:	55 27       	eor	r21, r21
 652:	aa 27       	eor	r26, r26
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	aa 1f       	adc	r26, r26
 65a:	a4 17       	cp	r26, r20
 65c:	10 f0       	brcs	.+4      	; 0x662 <__utoa_common+0x14>
 65e:	a4 1b       	sub	r26, r20
 660:	83 95       	inc	r24
 662:	50 51       	subi	r21, 0x10	; 16
 664:	b9 f7       	brne	.-18     	; 0x654 <__utoa_common+0x6>
 666:	a0 5d       	subi	r26, 0xD0	; 208
 668:	aa 33       	cpi	r26, 0x3A	; 58
 66a:	08 f0       	brcs	.+2      	; 0x66e <__utoa_common+0x20>
 66c:	a9 5d       	subi	r26, 0xD9	; 217
 66e:	a1 93       	st	Z+, r26
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	79 f7       	brne	.-34     	; 0x652 <__utoa_common+0x4>
 674:	b1 11       	cpse	r27, r1
 676:	b1 93       	st	Z+, r27
 678:	11 92       	st	Z+, r1
 67a:	cb 01       	movw	r24, r22
 67c:	0c 94 40 03 	jmp	0x680	; 0x680 <strrev>

00000680 <strrev>:
 680:	dc 01       	movw	r26, r24
 682:	fc 01       	movw	r30, r24
 684:	67 2f       	mov	r22, r23
 686:	71 91       	ld	r23, Z+
 688:	77 23       	and	r23, r23
 68a:	e1 f7       	brne	.-8      	; 0x684 <strrev+0x4>
 68c:	32 97       	sbiw	r30, 0x02	; 2
 68e:	04 c0       	rjmp	.+8      	; 0x698 <strrev+0x18>
 690:	7c 91       	ld	r23, X
 692:	6d 93       	st	X+, r22
 694:	70 83       	st	Z, r23
 696:	62 91       	ld	r22, -Z
 698:	ae 17       	cp	r26, r30
 69a:	bf 07       	cpc	r27, r31
 69c:	c8 f3       	brcs	.-14     	; 0x690 <strrev+0x10>
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
