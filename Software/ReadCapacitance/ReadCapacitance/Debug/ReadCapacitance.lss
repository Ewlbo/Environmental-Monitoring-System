
ReadCapacitance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000925  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079b  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bc  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 38       	cpi	r26, 0x86	; 134
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  88:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
	
	if(UCSR0A & (1 << UDRE0))
	{
		UDR0 = 0;
	}
}
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
  94:	38 9a       	sbi	0x07, 0	; 7
  96:	39 98       	cbi	0x07, 1	; 7
  98:	40 9a       	sbi	0x08, 0	; 8
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  a0:	2c e9       	ldi	r18, 0x9C	; 156
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  bc:	87 e8       	ldi	r24, 0x87	; 135
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <main>:
  c6:	0e 94 48 00 	call	0x90	; 0x90 <setup>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x4>

000000cc <__vector_20>:

ISR(USART_TX_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
  de:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <serialReadPos>
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	e8 17       	cp	r30, r24
  e8:	89 f0       	breq	.+34     	; 0x10c <__vector_20+0x40>
	{
		UDR0 = serialBuffer[serialReadPos];
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ea 5f       	subi	r30, 0xFA	; 250
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 81       	ld	r24, Z
  f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		serialReadPos++;
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <serialReadPos>
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	98 0f       	add	r25, r24
		
		if(serialReadPos >= TX_BUFFER_SIZE)
  fe:	1a f0       	brmi	.+6      	; 0x106 <__vector_20+0x3a>
ISR(USART_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serialBuffer[serialReadPos];
		serialReadPos++;
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <serialReadPos>
 104:	03 c0       	rjmp	.+6      	; 0x10c <__vector_20+0x40>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos++;
 106:	8e 5f       	subi	r24, 0xFE	; 254
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <serialReadPos>
		}
	}
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
	++timer;
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer+0x1>
 138:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer+0x2>
 13c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer+0x3>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	a1 1d       	adc	r26, r1
 144:	b1 1d       	adc	r27, r1
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer>
 14a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer+0x1>
 14e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timer+0x2>
 152:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timer+0x3>
	
	if(timer > 50)		
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer+0x1>
 15e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer+0x2>
 162:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer+0x3>
	{
		// check gas approx. every 1.5s
	}
}
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
