
ReadCapacitance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800116  00800116  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000845  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  00001217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e1  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);

	return(ADC);
}
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 98       	cbi	0x07, 1	; 7
  aa:	30 9a       	sbi	0x06, 0	; 6
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	84 bd       	out	0x24, r24	; 36
  b0:	90 e1       	ldi	r25, 0x10	; 16
  b2:	97 bd       	out	0x27, r25	; 39
  b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  b8:	78 94       	sei
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 bd       	out	0x25, r24	; 37
  be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c8:	88 e4       	ldi	r24, 0x48	; 72
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e0:	08 95       	ret

000000e2 <appendSerial>:

void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
  e2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
  e6:	e9 2f       	mov	r30, r25
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e9 5e       	subi	r30, 0xE9	; 233
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	80 83       	st	Z, r24
	serialWritePos++;
  f0:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(serialWritePos >= TX_BUFFER_SIZE)
  f2:	1a f0       	brmi	.+6      	; 0xfa <appendSerial+0x18>
}

void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
	serialWritePos++;
  f4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
  f8:	08 95       	ret
	
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
  fa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
  fe:	08 95       	ret

00000100 <serialWrite>:
	}
}

void serialWrite(char c[])
{
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++)
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	07 c0       	rjmp	.+14     	; 0x11a <serialWrite+0x1a>
	{
		appendSerial(c[i]);
 10c:	fe 01       	movw	r30, r28
 10e:	e8 0f       	add	r30, r24
 110:	f9 1f       	adc	r31, r25
 112:	80 81       	ld	r24, Z
 114:	0e 94 71 00 	call	0xe2	; 0xe2 <appendSerial>
	}
}

void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 118:	1f 5f       	subi	r17, 0xFF	; 255
 11a:	81 2f       	mov	r24, r17
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fe 01       	movw	r30, r28
 120:	01 90       	ld	r0, Z+
 122:	00 20       	and	r0, r0
 124:	e9 f7       	brne	.-6      	; 0x120 <serialWrite+0x20>
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	ec 1b       	sub	r30, r28
 12a:	fd 0b       	sbc	r31, r29
 12c:	8e 17       	cp	r24, r30
 12e:	9f 07       	cpc	r25, r31
 130:	68 f3       	brcs	.-38     	; 0x10c <serialWrite+0xc>
	{
		appendSerial(c[i]);
	}
	
	if(UCSR0A & (1 << UDRE0))
 132:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 136:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
 138:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <main>:
#define A1 0x02				// PC1


int main(void)
{
	setup();
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	serialWrite("Reading capacitance\n\r");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 80 00 	call	0x100	; 0x100 <serialWrite>
	int capacitance = readCapacitance();	
}
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

00000156 <__vector_14>:
		UDR0 = 0;
	}
}

ISR(TIMER0_COMPA_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
	if (timer == 4200000000)		// Exactly 70 minutes
	{
		timer = 0;
	}
	milli();
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
