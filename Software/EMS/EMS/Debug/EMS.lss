
EMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00002562  000025f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800276  00800276  0000276c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00002808  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004224  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001907  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000214c  00000000  00000000  000086bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  0000a808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c59  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003122  00000000  00000000  0000bd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	b6 00       	.word	0x00b6	; ????
      6a:	ca 00       	.word	0x00ca	; ????
      6c:	f3 00       	.word	0x00f3	; ????
      6e:	1c 01       	movw	r2, r24
      70:	45 01       	movw	r8, r10
      72:	6e 01       	movw	r12, r28
      74:	97 01       	movw	r18, r14
      76:	b6 01       	movw	r22, r12
      78:	c9 01       	movw	r24, r18
      7a:	f2 01       	movw	r30, r4

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 e6       	ldi	r30, 0x62	; 98
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 37       	cpi	r26, 0x76	; 118
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a6 e7       	ldi	r26, 0x76	; 118
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 31       	cpi	r26, 0x1F	; 31
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
      b2:	0c 94 af 12 	jmp	0x255e	; 0x255e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <setup>:
		alert = false;
		break;
		case 1:
		alert = true;
		printf("Alert detected \r");
		break;
      ba:	2f ef       	ldi	r18, 0xFF	; 255
      bc:	84 e3       	ldi	r24, 0x34	; 52
      be:	9c e0       	ldi	r25, 0x0C	; 12
      c0:	21 50       	subi	r18, 0x01	; 1
      c2:	80 40       	sbci	r24, 0x00	; 0
      c4:	90 40       	sbci	r25, 0x00	; 0
      c6:	e1 f7       	brne	.-8      	; 0xc0 <setup+0x6>
      c8:	00 c0       	rjmp	.+0      	; 0xca <setup+0x10>
      ca:	00 00       	nop
      cc:	87 e2       	ldi	r24, 0x27	; 39
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
      d8:	88 e4       	ldi	r24, 0x48	; 72
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	0e 94 a5 0a 	call	0x154a	; 0x154a <transmit>
      e0:	8a b1       	in	r24, 0x0a	; 10
      e2:	8c 61       	ori	r24, 0x1C	; 28
      e4:	8a b9       	out	0x0a, r24	; 10
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 56 05 	call	0xaac	; 0xaac <enableChannel>
      ee:	39 9a       	sbi	0x07, 1	; 7
      f0:	3a 9a       	sbi	0x07, 2	; 7
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      f8:	2c e9       	ldi	r18, 0x9C	; 156
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     100:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     104:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     114:	87 e8       	ldi	r24, 0x87	; 135
     116:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     11a:	78 94       	sei
     11c:	8f e1       	ldi	r24, 0x1F	; 31
     11e:	9e e4       	ldi	r25, 0x4E	; 78
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <setup+0x66>
     124:	00 c0       	rjmp	.+0      	; 0x126 <setup+0x6c>
     126:	00 00       	nop
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     130:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <__data_end+0x1>
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	41 f4       	brne	.+16     	; 0x148 <setup+0x8e>
     138:	87 e6       	ldi	r24, 0x67	; 103
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	9f 93       	push	r25
     13e:	8f 93       	push	r24
     140:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0e 94 ef 08 	call	0x11de	; 0x11de <bmp085_init>
     14c:	08 95       	ret

0000014e <main>:
     14e:	0e 94 34 0c 	call	0x1868	; 0x1868 <ioinit>
     152:	0e 94 5d 00 	call	0xba	; 0xba <setup>
     156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x8>

00000158 <assignData>:
	}
}

void assignData(int dec, const char *hex, int place)
{
	switch(place)
     158:	fa 01       	movw	r30, r20
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	ea 30       	cpi	r30, 0x0A	; 10
     15e:	f1 05       	cpc	r31, r1
     160:	08 f0       	brcs	.+2      	; 0x164 <assignData+0xc>
     162:	52 c1       	rjmp	.+676    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     164:	ec 5c       	subi	r30, 0xCC	; 204
     166:	ff 4f       	sbci	r31, 0xFF	; 255
     168:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__tablejump2__>
	{
		case 1:		// ID
		if (dec<=15)
     16c:	40 97       	sbiw	r24, 0x10	; 16
     16e:	44 f4       	brge	.+16     	; 0x180 <assignData+0x28>
		{
			dataStream[0] = 48;			// 0
     170:	e6 ed       	ldi	r30, 0xD6	; 214
     172:	f2 e0       	ldi	r31, 0x02	; 2
     174:	80 e3       	ldi	r24, 0x30	; 48
     176:	80 83       	st	Z, r24
			dataStream[1] = hex [0];
     178:	db 01       	movw	r26, r22
     17a:	8c 91       	ld	r24, X
     17c:	81 83       	std	Z+1, r24	; 0x01
     17e:	08 95       	ret
		}
		else
		{
			dataStream[0] = hex [1];
     180:	e6 ed       	ldi	r30, 0xD6	; 214
     182:	f2 e0       	ldi	r31, 0x02	; 2
     184:	db 01       	movw	r26, r22
     186:	11 96       	adiw	r26, 0x01	; 1
     188:	8c 91       	ld	r24, X
     18a:	11 97       	sbiw	r26, 0x01	; 1
     18c:	80 83       	st	Z, r24
			dataStream[1] = hex [0];
     18e:	8c 91       	ld	r24, X
     190:	81 83       	std	Z+1, r24	; 0x01
     192:	08 95       	ret
		}
		break;
		case 2:		// GAS
		if (dec<=15)
     194:	80 31       	cpi	r24, 0x10	; 16
     196:	91 05       	cpc	r25, r1
     198:	4c f4       	brge	.+18     	; 0x1ac <assignData+0x54>
		{
			dataStream[2] = 48;
     19a:	e6 ed       	ldi	r30, 0xD6	; 214
     19c:	f2 e0       	ldi	r31, 0x02	; 2
     19e:	80 e3       	ldi	r24, 0x30	; 48
     1a0:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = 48;
     1a2:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1a4:	db 01       	movw	r26, r22
     1a6:	8c 91       	ld	r24, X
     1a8:	84 83       	std	Z+4, r24	; 0x04
     1aa:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     1ac:	40 97       	sbiw	r24, 0x10	; 16
     1ae:	80 3f       	cpi	r24, 0xF0	; 240
     1b0:	91 05       	cpc	r25, r1
     1b2:	60 f4       	brcc	.+24     	; 0x1cc <assignData+0x74>
		{
			dataStream[2] = 48;
     1b4:	e6 ed       	ldi	r30, 0xD6	; 214
     1b6:	f2 e0       	ldi	r31, 0x02	; 2
     1b8:	80 e3       	ldi	r24, 0x30	; 48
     1ba:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = hex [1];
     1bc:	db 01       	movw	r26, r22
     1be:	11 96       	adiw	r26, 0x01	; 1
     1c0:	8c 91       	ld	r24, X
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1c6:	8c 91       	ld	r24, X
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	08 95       	ret
		}
		else
		{
			dataStream[2] = hex [2];
     1cc:	fb 01       	movw	r30, r22
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	e6 ed       	ldi	r30, 0xD6	; 214
     1d2:	f2 e0       	ldi	r31, 0x02	; 2
     1d4:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = hex [1];
     1d6:	db 01       	movw	r26, r22
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	8c 91       	ld	r24, X
     1dc:	11 97       	sbiw	r26, 0x01	; 1
     1de:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1e0:	8c 91       	ld	r24, X
     1e2:	84 83       	std	Z+4, r24	; 0x04
     1e4:	08 95       	ret
		}
		break;
		case 3:		// CELL1
		if (dec<=15)
     1e6:	80 31       	cpi	r24, 0x10	; 16
     1e8:	91 05       	cpc	r25, r1
     1ea:	4c f4       	brge	.+18     	; 0x1fe <assignData+0xa6>
		{
			dataStream[5] = 48;
     1ec:	e6 ed       	ldi	r30, 0xD6	; 214
     1ee:	f2 e0       	ldi	r31, 0x02	; 2
     1f0:	80 e3       	ldi	r24, 0x30	; 48
     1f2:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = 48;
     1f4:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     1f6:	db 01       	movw	r26, r22
     1f8:	8c 91       	ld	r24, X
     1fa:	87 83       	std	Z+7, r24	; 0x07
     1fc:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     1fe:	40 97       	sbiw	r24, 0x10	; 16
     200:	80 3f       	cpi	r24, 0xF0	; 240
     202:	91 05       	cpc	r25, r1
     204:	60 f4       	brcc	.+24     	; 0x21e <assignData+0xc6>
		{
			dataStream[5] = 48;
     206:	e6 ed       	ldi	r30, 0xD6	; 214
     208:	f2 e0       	ldi	r31, 0x02	; 2
     20a:	80 e3       	ldi	r24, 0x30	; 48
     20c:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = hex [1];
     20e:	db 01       	movw	r26, r22
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	8c 91       	ld	r24, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     218:	8c 91       	ld	r24, X
     21a:	87 83       	std	Z+7, r24	; 0x07
     21c:	08 95       	ret
		}
		else
		{
			dataStream[5] = hex [2];
     21e:	fb 01       	movw	r30, r22
     220:	82 81       	ldd	r24, Z+2	; 0x02
     222:	e6 ed       	ldi	r30, 0xD6	; 214
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = hex [1];
     228:	db 01       	movw	r26, r22
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	11 97       	sbiw	r26, 0x01	; 1
     230:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     232:	8c 91       	ld	r24, X
     234:	87 83       	std	Z+7, r24	; 0x07
     236:	08 95       	ret
		}
		break;
		case 4:		// CELL2
		if (dec<=15)
     238:	80 31       	cpi	r24, 0x10	; 16
     23a:	91 05       	cpc	r25, r1
     23c:	4c f4       	brge	.+18     	; 0x250 <assignData+0xf8>
		{
			dataStream[8] = 48;
     23e:	e6 ed       	ldi	r30, 0xD6	; 214
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	80 e3       	ldi	r24, 0x30	; 48
     244:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = 48;
     246:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     248:	db 01       	movw	r26, r22
     24a:	8c 91       	ld	r24, X
     24c:	82 87       	std	Z+10, r24	; 0x0a
     24e:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     250:	40 97       	sbiw	r24, 0x10	; 16
     252:	80 3f       	cpi	r24, 0xF0	; 240
     254:	91 05       	cpc	r25, r1
     256:	60 f4       	brcc	.+24     	; 0x270 <assignData+0x118>
		{
			dataStream[8] = 48;
     258:	e6 ed       	ldi	r30, 0xD6	; 214
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	80 e3       	ldi	r24, 0x30	; 48
     25e:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = hex [1];
     260:	db 01       	movw	r26, r22
     262:	11 96       	adiw	r26, 0x01	; 1
     264:	8c 91       	ld	r24, X
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     26a:	8c 91       	ld	r24, X
     26c:	82 87       	std	Z+10, r24	; 0x0a
     26e:	08 95       	ret
		}
		else
		{
			dataStream[8] = hex [2];
     270:	fb 01       	movw	r30, r22
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	e6 ed       	ldi	r30, 0xD6	; 214
     276:	f2 e0       	ldi	r31, 0x02	; 2
     278:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = hex [1];
     27a:	db 01       	movw	r26, r22
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	8c 91       	ld	r24, X
     280:	11 97       	sbiw	r26, 0x01	; 1
     282:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     284:	8c 91       	ld	r24, X
     286:	82 87       	std	Z+10, r24	; 0x0a
     288:	08 95       	ret
		}
		break;
		case 5:		// RAIN
		if (dec<=15)
     28a:	80 31       	cpi	r24, 0x10	; 16
     28c:	91 05       	cpc	r25, r1
     28e:	4c f4       	brge	.+18     	; 0x2a2 <assignData+0x14a>
		{
			dataStream[11] = 48;
     290:	e6 ed       	ldi	r30, 0xD6	; 214
     292:	f2 e0       	ldi	r31, 0x02	; 2
     294:	80 e3       	ldi	r24, 0x30	; 48
     296:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = 48;
     298:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     29a:	db 01       	movw	r26, r22
     29c:	8c 91       	ld	r24, X
     29e:	85 87       	std	Z+13, r24	; 0x0d
     2a0:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     2a2:	40 97       	sbiw	r24, 0x10	; 16
     2a4:	80 3f       	cpi	r24, 0xF0	; 240
     2a6:	91 05       	cpc	r25, r1
     2a8:	60 f4       	brcc	.+24     	; 0x2c2 <assignData+0x16a>
		{
			dataStream[11] = 48;
     2aa:	e6 ed       	ldi	r30, 0xD6	; 214
     2ac:	f2 e0       	ldi	r31, 0x02	; 2
     2ae:	80 e3       	ldi	r24, 0x30	; 48
     2b0:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = hex [1];
     2b2:	db 01       	movw	r26, r22
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	8c 91       	ld	r24, X
     2b8:	11 97       	sbiw	r26, 0x01	; 1
     2ba:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     2bc:	8c 91       	ld	r24, X
     2be:	85 87       	std	Z+13, r24	; 0x0d
     2c0:	08 95       	ret
		}
		else
		{
			dataStream[11] = hex [2];
     2c2:	fb 01       	movw	r30, r22
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	e6 ed       	ldi	r30, 0xD6	; 214
     2c8:	f2 e0       	ldi	r31, 0x02	; 2
     2ca:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = hex [1];
     2cc:	db 01       	movw	r26, r22
     2ce:	11 96       	adiw	r26, 0x01	; 1
     2d0:	8c 91       	ld	r24, X
     2d2:	11 97       	sbiw	r26, 0x01	; 1
     2d4:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     2d6:	8c 91       	ld	r24, X
     2d8:	85 87       	std	Z+13, r24	; 0x0d
     2da:	08 95       	ret
		}
		break;
		case 6:		// LIGHT
		if (dec<=15)
     2dc:	80 31       	cpi	r24, 0x10	; 16
     2de:	91 05       	cpc	r25, r1
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <assignData+0x19c>
		{
			dataStream[14] = 48;
     2e2:	e6 ed       	ldi	r30, 0xD6	; 214
     2e4:	f2 e0       	ldi	r31, 0x02	; 2
     2e6:	80 e3       	ldi	r24, 0x30	; 48
     2e8:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = 48;
     2ea:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     2ec:	db 01       	movw	r26, r22
     2ee:	8c 91       	ld	r24, X
     2f0:	80 8b       	std	Z+16, r24	; 0x10
     2f2:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     2f4:	40 97       	sbiw	r24, 0x10	; 16
     2f6:	80 3f       	cpi	r24, 0xF0	; 240
     2f8:	91 05       	cpc	r25, r1
     2fa:	60 f4       	brcc	.+24     	; 0x314 <assignData+0x1bc>
		{
			dataStream[14] = 48;
     2fc:	e6 ed       	ldi	r30, 0xD6	; 214
     2fe:	f2 e0       	ldi	r31, 0x02	; 2
     300:	80 e3       	ldi	r24, 0x30	; 48
     302:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = hex [1];
     304:	db 01       	movw	r26, r22
     306:	11 96       	adiw	r26, 0x01	; 1
     308:	8c 91       	ld	r24, X
     30a:	11 97       	sbiw	r26, 0x01	; 1
     30c:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     30e:	8c 91       	ld	r24, X
     310:	80 8b       	std	Z+16, r24	; 0x10
     312:	08 95       	ret
		}
		else
		{
			dataStream[14] = hex [2];
     314:	fb 01       	movw	r30, r22
     316:	82 81       	ldd	r24, Z+2	; 0x02
     318:	e6 ed       	ldi	r30, 0xD6	; 214
     31a:	f2 e0       	ldi	r31, 0x02	; 2
     31c:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = hex [1];
     31e:	db 01       	movw	r26, r22
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	8c 91       	ld	r24, X
     324:	11 97       	sbiw	r26, 0x01	; 1
     326:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     328:	8c 91       	ld	r24, X
     32a:	80 8b       	std	Z+16, r24	; 0x10
     32c:	08 95       	ret
		}
		break;
		case 7:		// TEMP
		if (dec<0)
     32e:	99 23       	and	r25, r25
     330:	3c f4       	brge	.+14     	; 0x340 <assignData+0x1e8>
		{
			dataStream[17] = 45;		// -
     332:	2d e2       	ldi	r18, 0x2D	; 45
     334:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <dataStream+0x11>
			dec = dec * (-1);
     338:	91 95       	neg	r25
     33a:	81 95       	neg	r24
     33c:	91 09       	sbc	r25, r1
     33e:	03 c0       	rjmp	.+6      	; 0x346 <assignData+0x1ee>
		}
		else
		{
			dataStream[17] = 43;		// +
     340:	2b e2       	ldi	r18, 0x2B	; 43
     342:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <dataStream+0x11>
		}
		if (dec<=15)
     346:	40 97       	sbiw	r24, 0x10	; 16
     348:	44 f4       	brge	.+16     	; 0x35a <assignData+0x202>
		{
			dataStream[18] = 48;
     34a:	e6 ed       	ldi	r30, 0xD6	; 214
     34c:	f2 e0       	ldi	r31, 0x02	; 2
     34e:	80 e3       	ldi	r24, 0x30	; 48
     350:	82 8b       	std	Z+18, r24	; 0x12
			dataStream[19] = hex [0];
     352:	db 01       	movw	r26, r22
     354:	8c 91       	ld	r24, X
     356:	83 8b       	std	Z+19, r24	; 0x13
     358:	08 95       	ret
		}
		else
		{
			dataStream[18] = hex [1];
     35a:	fb 01       	movw	r30, r22
     35c:	81 81       	ldd	r24, Z+1	; 0x01
     35e:	e6 ed       	ldi	r30, 0xD6	; 214
     360:	f2 e0       	ldi	r31, 0x02	; 2
     362:	82 8b       	std	Z+18, r24	; 0x12
			dataStream[19] = hex [0];
     364:	db 01       	movw	r26, r22
     366:	8c 91       	ld	r24, X
     368:	83 8b       	std	Z+19, r24	; 0x13
     36a:	08 95       	ret
		}
		break;
		case 8:		// HUM
		if (dec<=15)
     36c:	40 97       	sbiw	r24, 0x10	; 16
     36e:	44 f4       	brge	.+16     	; 0x380 <assignData+0x228>
		{
			dataStream[20] = 48;
     370:	e6 ed       	ldi	r30, 0xD6	; 214
     372:	f2 e0       	ldi	r31, 0x02	; 2
     374:	80 e3       	ldi	r24, 0x30	; 48
     376:	84 8b       	std	Z+20, r24	; 0x14
			dataStream[21] = hex [0];
     378:	db 01       	movw	r26, r22
     37a:	8c 91       	ld	r24, X
     37c:	85 8b       	std	Z+21, r24	; 0x15
     37e:	08 95       	ret
		}
		else
		{
			dataStream[20] = hex [1];
     380:	fb 01       	movw	r30, r22
     382:	81 81       	ldd	r24, Z+1	; 0x01
     384:	e6 ed       	ldi	r30, 0xD6	; 214
     386:	f2 e0       	ldi	r31, 0x02	; 2
     388:	84 8b       	std	Z+20, r24	; 0x14
			dataStream[21] = hex [0];
     38a:	db 01       	movw	r26, r22
     38c:	8c 91       	ld	r24, X
     38e:	85 8b       	std	Z+21, r24	; 0x15
     390:	08 95       	ret
		}
		break;
		case 9:		// PRESS
		if (dec<=15)
     392:	80 31       	cpi	r24, 0x10	; 16
     394:	91 05       	cpc	r25, r1
     396:	4c f4       	brge	.+18     	; 0x3aa <assignData+0x252>
		{
			dataStream[22] = 48;
     398:	e6 ed       	ldi	r30, 0xD6	; 214
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	80 e3       	ldi	r24, 0x30	; 48
     39e:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = 48;
     3a0:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3a2:	db 01       	movw	r26, r22
     3a4:	8c 91       	ld	r24, X
     3a6:	80 8f       	std	Z+24, r24	; 0x18
     3a8:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     3aa:	40 97       	sbiw	r24, 0x10	; 16
     3ac:	80 3f       	cpi	r24, 0xF0	; 240
     3ae:	91 05       	cpc	r25, r1
     3b0:	60 f4       	brcc	.+24     	; 0x3ca <assignData+0x272>
		{
			dataStream[22] = 48;
     3b2:	e6 ed       	ldi	r30, 0xD6	; 214
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	80 e3       	ldi	r24, 0x30	; 48
     3b8:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = hex [1];
     3ba:	db 01       	movw	r26, r22
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	8c 91       	ld	r24, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3c4:	8c 91       	ld	r24, X
     3c6:	80 8f       	std	Z+24, r24	; 0x18
     3c8:	08 95       	ret
		}
		else
		{
			dataStream[22] = hex [2];
     3ca:	fb 01       	movw	r30, r22
     3cc:	82 81       	ldd	r24, Z+2	; 0x02
     3ce:	e6 ed       	ldi	r30, 0xD6	; 214
     3d0:	f2 e0       	ldi	r31, 0x02	; 2
     3d2:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = hex [1];
     3d4:	db 01       	movw	r26, r22
     3d6:	11 96       	adiw	r26, 0x01	; 1
     3d8:	8c 91       	ld	r24, X
     3da:	11 97       	sbiw	r26, 0x01	; 1
     3dc:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3de:	8c 91       	ld	r24, X
     3e0:	80 8f       	std	Z+24, r24	; 0x18
     3e2:	08 95       	ret
		}
		break;
		case 10:	// SPD
		if (dec<=15)
     3e4:	40 97       	sbiw	r24, 0x10	; 16
     3e6:	44 f4       	brge	.+16     	; 0x3f8 <assignData+0x2a0>
		{
			dataStream[25] = 48;
     3e8:	e6 ed       	ldi	r30, 0xD6	; 214
     3ea:	f2 e0       	ldi	r31, 0x02	; 2
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	81 8f       	std	Z+25, r24	; 0x19
			dataStream[26] = hex [0];
     3f0:	db 01       	movw	r26, r22
     3f2:	8c 91       	ld	r24, X
     3f4:	82 8f       	std	Z+26, r24	; 0x1a
     3f6:	08 95       	ret
		}
		else
		{
			dataStream[25] = hex [1];
     3f8:	fb 01       	movw	r30, r22
     3fa:	81 81       	ldd	r24, Z+1	; 0x01
     3fc:	e6 ed       	ldi	r30, 0xD6	; 214
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	81 8f       	std	Z+25, r24	; 0x19
			dataStream[26] = hex [0];
     402:	db 01       	movw	r26, r22
     404:	8c 91       	ld	r24, X
     406:	82 8f       	std	Z+26, r24	; 0x1a
     408:	08 95       	ret

0000040a <gatherData>:
	}
	bmp085_init();
}

void gatherData(void)
{
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	00 d0       	rcall	.+0      	; 0x41c <gatherData+0x12>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	printf("Function gatherData(); called\r");
     420:	88 e7       	ldi	r24, 0x78	; 120
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	9f 93       	push	r25
     426:	8f 93       	push	r24
     428:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
	//int getLight = 150;
	//int temp = 24;
	//int hum = 55;
	//int press = 1005;
	//int getWindSpeed = 14;
	int8_t temperature = 0;
     42c:	19 82       	std	Y+1, r1	; 0x01
	int8_t hum = 0;
     42e:	1a 82       	std	Y+2, r1	; 0x02
	
	// ID
	uint8_t getID = eeprom_read_byte((uint8_t*)location);	// Get ID from EEPROM
     430:	8a e2       	ldi	r24, 0x2A	; 42
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 70 12 	call	0x24e0	; 0x24e0 <eeprom_read_byte>
	intToHex(getID);										// Transform it to HEX
     438:	08 2f       	mov	r16, r24
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	c8 01       	movw	r24, r16
     43e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getID,hex,1);								// Assign to dataStream
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	6e e0       	ldi	r22, 0x0E	; 14
     448:	73 e0       	ldi	r23, 0x03	; 3
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// GAS SENSOR
	int getGas = readGas();
     450:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <readGas>
     454:	8c 01       	movw	r16, r24
	intToHex(getGas);
     456:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getGas,hex,2);
     45a:	42 e0       	ldi	r20, 0x02	; 2
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	6e e0       	ldi	r22, 0x0E	; 14
     460:	73 e0       	ldi	r23, 0x03	; 3
     462:	c8 01       	movw	r24, r16
     464:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// CELL1
	//int getCell1 = readCell1();
	intToHex(getCell1);
     468:	87 e3       	ldi	r24, 0x37	; 55
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getCell1,hex,3);
     470:	43 e0       	ldi	r20, 0x03	; 3
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	6e e0       	ldi	r22, 0x0E	; 14
     476:	73 e0       	ldi	r23, 0x03	; 3
     478:	87 e3       	ldi	r24, 0x37	; 55
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// CELL2
	//int getCell2 = readCell1();
	intToHex(getCell2);
     480:	80 e2       	ldi	r24, 0x20	; 32
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getCell2,hex,4);
     488:	44 e0       	ldi	r20, 0x04	; 4
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	6e e0       	ldi	r22, 0x0E	; 14
     48e:	73 e0       	ldi	r23, 0x03	; 3
     490:	80 e2       	ldi	r24, 0x20	; 32
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// RAIN SENSOR
	int getRain = readCapacitance();
     498:	0e 94 4c 0a 	call	0x1498	; 0x1498 <readCapacitance>
     49c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__fixsfsi>
     4a0:	6b 01       	movw	r12, r22
     4a2:	7c 01       	movw	r14, r24
	intToHex(getRain);
     4a4:	cb 01       	movw	r24, r22
     4a6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getRain,hex,5);
     4aa:	45 e0       	ldi	r20, 0x05	; 5
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	6e e0       	ldi	r22, 0x0E	; 14
     4b0:	73 e0       	ldi	r23, 0x03	; 3
     4b2:	c6 01       	movw	r24, r12
     4b4:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// LIGHT SENSOR
	int getLight = readLight();
     4b8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <readLight>
     4bc:	8c 01       	movw	r16, r24
	intToHex(getLight);
     4be:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getLight,hex,6);
     4c2:	46 e0       	ldi	r20, 0x06	; 6
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	6e e0       	ldi	r22, 0x0E	; 14
     4c8:	73 e0       	ldi	r23, 0x03	; 3
     4ca:	c8 01       	movw	r24, r16
     4cc:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	//uint32_t press;
	//uint32_t hum;
	//BME280_readout(&temp, &press, &hum);
	
	// TEMPERATURE
	int temp = bmp085_gettemperature();
     4d0:	0e 94 c4 08 	call	0x1188	; 0x1188 <bmp085_gettemperature>
     4d4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__fixsfsi>
     4d8:	6b 01       	movw	r12, r22
     4da:	7c 01       	movw	r14, r24
	intToHex(temp);
     4dc:	cb 01       	movw	r24, r22
     4de:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(temp,hex,7);
     4e2:	47 e0       	ldi	r20, 0x07	; 7
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	6e e0       	ldi	r22, 0x0E	; 14
     4e8:	73 e0       	ldi	r23, 0x03	; 3
     4ea:	c6 01       	movw	r24, r12
     4ec:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// HUMIDITY
	dht_gettemperaturehumidity(&temperature, &hum);
     4f0:	be 01       	movw	r22, r28
     4f2:	6e 5f       	subi	r22, 0xFE	; 254
     4f4:	7f 4f       	sbci	r23, 0xFF	; 255
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	0e 94 a0 09 	call	0x1340	; 0x1340 <dht_gettemperaturehumidity>
	intToHex(hum);
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	08 2e       	mov	r0, r24
     502:	00 0c       	add	r0, r0
     504:	99 0b       	sbc	r25, r25
     506:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(hum,hex,8);
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	48 e0       	ldi	r20, 0x08	; 8
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	6e e0       	ldi	r22, 0x0E	; 14
     512:	73 e0       	ldi	r23, 0x03	; 3
     514:	08 2e       	mov	r0, r24
     516:	00 0c       	add	r0, r0
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// PRESSURE
	long press = bmp085_getpressure();
     51e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <bmp085_getpressure>
	int pressf = press/100;
     522:	24 e6       	ldi	r18, 0x64	; 100
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__divmodsi4>
     52e:	69 01       	movw	r12, r18
     530:	7a 01       	movw	r14, r20
	intToHex(pressf);
     532:	c9 01       	movw	r24, r18
     534:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(pressf,hex,9);
     538:	49 e0       	ldi	r20, 0x09	; 9
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	6e e0       	ldi	r22, 0x0E	; 14
     53e:	73 e0       	ldi	r23, 0x03	; 3
     540:	c6 01       	movw	r24, r12
     542:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// WIND SPEED
	int getWindSpeed = readWindSpeed();
     546:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <readWindSpeed>
     54a:	8c 01       	movw	r16, r24
	intToHex(getWindSpeed);
     54c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <intToHex>
	assignData(getWindSpeed,hex,10);
     550:	4a e0       	ldi	r20, 0x0A	; 10
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	6e e0       	ldi	r22, 0x0E	; 14
     556:	73 e0       	ldi	r23, 0x03	; 3
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 ac 00 	call	0x158	; 0x158 <assignData>
	
	// WIND DIRECTION
	windDirection();
     55e:	0e 94 df 0b 	call	0x17be	; 0x17be <windDirection>

	printf("Datastream: %s\r",dataStream);
     562:	86 ed       	ldi	r24, 0xD6	; 214
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	87 e9       	ldi	r24, 0x97	; 151
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
}
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	08 95       	ret

00000598 <realTime>:

void realTime(void)
{
	alert = true;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__data_end+0x1>
     5a0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
	printf("Realtime data enabled\r");
     5a4:	87 ea       	ldi	r24, 0xA7	; 167
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
	gatherData();
     5b0:	0e 94 05 02 	call	0x40a	; 0x40a <gatherData>
	transmit(dataStream);
     5b4:	86 ed       	ldi	r24, 0xD6	; 214
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 a5 0a 	call	0x154a	; 0x154a <transmit>
}
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	08 95       	ret

000005c2 <__vector_11>:
	}
}

// Interrupt Service Routine (approx. every second)
ISR(TIMER1_COMPA_vect)
{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	4f 93       	push	r20
     5d2:	5f 93       	push	r21
     5d4:	6f 93       	push	r22
     5d6:	7f 93       	push	r23
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
     5dc:	af 93       	push	r26
     5de:	bf 93       	push	r27
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
	++timer;
     5e4:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <timer>
     5e8:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <timer+0x1>
     5ec:	a0 91 d2 02 	lds	r26, 0x02D2	; 0x8002d2 <timer+0x2>
     5f0:	b0 91 d3 02 	lds	r27, 0x02D3	; 0x8002d3 <timer+0x3>
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	a1 1d       	adc	r26, r1
     5f8:	b1 1d       	adc	r27, r1
     5fa:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <timer>
     5fe:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <timer+0x1>
     602:	a0 93 d2 02 	sts	0x02D2, r26	; 0x8002d2 <timer+0x2>
     606:	b0 93 d3 02 	sts	0x02D3, r27	; 0x8002d3 <timer+0x3>
	
	if(timer > 15600)	
     60a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <timer>
     60e:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <timer+0x1>
     612:	a0 91 d2 02 	lds	r26, 0x02D2	; 0x8002d2 <timer+0x2>
     616:	b0 91 d3 02 	lds	r27, 0x02D3	; 0x8002d3 <timer+0x3>
     61a:	81 3f       	cpi	r24, 0xF1	; 241
     61c:	9c 43       	sbci	r25, 0x3C	; 60
     61e:	a1 05       	cpc	r26, r1
     620:	b1 05       	cpc	r27, r1
     622:	98 f1       	brcs	.+102    	; 0x68a <__vector_11+0xc8>
	{
		// For testing/presentation purposes enable realtime
		//realTime();
		
		timer = 0;
     624:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <timer>
     628:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <timer+0x1>
     62c:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <timer+0x2>
     630:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <timer+0x3>
		int gas = readGas();
     634:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <readGas>
		int limit = 400;
		if (gas>limit)
     638:	81 39       	cpi	r24, 0x91	; 145
     63a:	91 40       	sbci	r25, 0x01	; 1
     63c:	cc f0       	brlt	.+50     	; 0x670 <__vector_11+0xae>
	{
		case 0:
		alert = false;
		break;
		case 1:
		alert = true;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__data_end+0x1>
     646:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
		printf("Alert detected \r");
     64a:	87 e6       	ldi	r24, 0x67	; 103
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
		int limit = 400;
		if (gas>limit)
		{
			// Enable realtime datastream if set gas level exceeds limit
			getAlert(true);
			printf("Gas exceeds limit. Enabling realtime data.\r");		
     656:	8e eb       	ldi	r24, 0xBE	; 190
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
			realTime();
     662:	0e 94 cc 02 	call	0x598	; 0x598 <realTime>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_11+0xb6>
void getAlert(int state)
{
	switch(state)
	{
		case 0:
		alert = false;
     670:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
     674:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
		}
		else
		{
			getAlert(false);
		}
		sec++;
     678:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <sec>
     67c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <sec+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <sec+0x1>
     686:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <sec>
	}
	if (sec>=3)
     68a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <sec>
     68e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <sec+0x1>
     692:	03 97       	sbiw	r24, 0x03	; 3
     694:	54 f0       	brlt	.+20     	; 0x6aa <__vector_11+0xe8>
	{
		sec = 0;
     696:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <sec+0x1>
     69a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <sec>
		gatherData();
     69e:	0e 94 05 02 	call	0x40a	; 0x40a <gatherData>
		transmit(dataStream);
     6a2:	86 ed       	ldi	r24, 0xD6	; 214
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 a5 0a 	call	0x154a	; 0x154a <transmit>
	}
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	7f 91       	pop	r23
     6b8:	6f 91       	pop	r22
     6ba:	5f 91       	pop	r21
     6bc:	4f 91       	pop	r20
     6be:	3f 91       	pop	r19
     6c0:	2f 91       	pop	r18
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     6cc:	fc 01       	movw	r30, r24
     6ce:	a6 2f       	mov	r26, r22
     6d0:	b7 2f       	mov	r27, r23
     6d2:	9c 01       	movw	r18, r24
     6d4:	2b 5f       	subi	r18, 0xFB	; 251
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	91 91       	ld	r25, Z+
     6da:	9d 93       	st	X+, r25
     6dc:	e2 17       	cp	r30, r18
     6de:	f3 07       	cpc	r31, r19
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <copy_address+0xc>
     6e2:	08 95       	ret

000006e4 <nRF24L01_init>:
     6e4:	80 e1       	ldi	r24, 0x10	; 16
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <malloc>
     6ec:	20 e1       	ldi	r18, 0x10	; 16
     6ee:	fc 01       	movw	r30, r24
     6f0:	11 92       	st	Z+, r1
     6f2:	2a 95       	dec	r18
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <nRF24L01_init+0xc>
     6f6:	08 95       	ret

000006f8 <nRF24L01_send_command>:
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	da 01       	movw	r26, r20
     700:	e8 81       	ld	r30, Y
     702:	f9 81       	ldd	r31, Y+1	; 0x01
     704:	50 81       	ld	r21, Z
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0a 80       	ldd	r0, Y+2	; 0x02
     70c:	02 c0       	rjmp	.+4      	; 0x712 <nRF24L01_send_command+0x1a>
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <nRF24L01_send_command+0x16>
     716:	80 95       	com	r24
     718:	85 23       	and	r24, r21
     71a:	80 83       	st	Z, r24
     71c:	6e bd       	out	0x2e, r22	; 46
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <nRF24L01_send_command+0x26>
     724:	8e b5       	in	r24, 0x2e	; 46
     726:	8f 87       	std	Y+15, r24	; 0x0f
     728:	21 15       	cp	r18, r1
     72a:	31 05       	cpc	r19, r1
     72c:	79 f0       	breq	.+30     	; 0x74c <nRF24L01_send_command+0x54>
     72e:	fd 01       	movw	r30, r26
     730:	2a 0f       	add	r18, r26
     732:	3b 1f       	adc	r19, r27
     734:	df 01       	movw	r26, r30
     736:	90 81       	ld	r25, Z
     738:	9e bd       	out	0x2e, r25	; 46
     73a:	0d b4       	in	r0, 0x2d	; 45
     73c:	07 fe       	sbrs	r0, 7
     73e:	fd cf       	rjmp	.-6      	; 0x73a <nRF24L01_send_command+0x42>
     740:	9e b5       	in	r25, 0x2e	; 46
     742:	9c 93       	st	X, r25
     744:	31 96       	adiw	r30, 0x01	; 1
     746:	e2 17       	cp	r30, r18
     748:	f3 07       	cpc	r31, r19
     74a:	a1 f7       	brne	.-24     	; 0x734 <nRF24L01_send_command+0x3c>
     74c:	e8 81       	ld	r30, Y
     74e:	f9 81       	ldd	r31, Y+1	; 0x01
     750:	20 81       	ld	r18, Z
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0a 80       	ldd	r0, Y+2	; 0x02
     758:	02 c0       	rjmp	.+4      	; 0x75e <nRF24L01_send_command+0x66>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a <nRF24L01_send_command+0x62>
     762:	82 2b       	or	r24, r18
     764:	80 83       	st	Z, r24
     766:	8f 85       	ldd	r24, Y+15	; 0x0f
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <nRF24L01_write_register>:
     76e:	60 62       	ori	r22, 0x20	; 32
     770:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
     774:	08 95       	ret

00000776 <nRF24L01_read_register>:
     776:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
     77a:	08 95       	ret

0000077c <nRF24L01_flush_transmit_message>:
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	61 ee       	ldi	r22, 0xE1	; 225
     786:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
     78a:	08 95       	ret

0000078c <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     796:	20 e7       	ldi	r18, 0x70	; 112
     798:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	ae 01       	movw	r20, r28
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	67 e0       	ldi	r22, 0x07	; 7
     7a6:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
}
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     7c4:	dc 01       	movw	r26, r24
     7c6:	ed 91       	ld	r30, X+
     7c8:	fc 91       	ld	r31, X
     7ca:	11 97       	sbiw	r26, 0x01	; 1
     7cc:	42 91       	ld	r20, -Z
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	12 96       	adiw	r26, 0x02	; 2
     7d6:	0c 90       	ld	r0, X
     7d8:	12 97       	sbiw	r26, 0x02	; 2
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <nRF24L01_begin+0x2e>
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
     7e0:	0a 94       	dec	r0
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <nRF24L01_begin+0x2a>
     7e4:	24 2b       	or	r18, r20
     7e6:	20 83       	st	Z, r18
     7e8:	13 96       	adiw	r26, 0x03	; 3
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	14 97       	sbiw	r26, 0x04	; 4
     7f0:	42 91       	ld	r20, -Z
     7f2:	9c 01       	movw	r18, r24
     7f4:	15 96       	adiw	r26, 0x05	; 5
     7f6:	0c 90       	ld	r0, X
     7f8:	15 97       	sbiw	r26, 0x05	; 5
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <nRF24L01_begin+0x4e>
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	0a 94       	dec	r0
     802:	e2 f7       	brpl	.-8      	; 0x7fc <nRF24L01_begin+0x4a>
     804:	24 2b       	or	r18, r20
     806:	20 83       	st	Z, r18
     808:	ed 91       	ld	r30, X+
     80a:	fc 91       	ld	r31, X
     80c:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     80e:	40 81       	ld	r20, Z
     810:	9c 01       	movw	r18, r24
     812:	12 96       	adiw	r26, 0x02	; 2
     814:	0c 90       	ld	r0, X
     816:	12 97       	sbiw	r26, 0x02	; 2
     818:	02 c0       	rjmp	.+4      	; 0x81e <nRF24L01_begin+0x6c>
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	0a 94       	dec	r0
     820:	e2 f7       	brpl	.-8      	; 0x81a <nRF24L01_begin+0x68>
     822:	24 2b       	or	r18, r20
     824:	20 83       	st	Z, r18
     826:	13 96       	adiw	r26, 0x03	; 3
     828:	ed 91       	ld	r30, X+
     82a:	fc 91       	ld	r31, X
     82c:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
     82e:	30 81       	ld	r19, Z
     830:	ac 01       	movw	r20, r24
     832:	15 96       	adiw	r26, 0x05	; 5
     834:	0c 90       	ld	r0, X
     836:	15 97       	sbiw	r26, 0x05	; 5
     838:	02 c0       	rjmp	.+4      	; 0x83e <nRF24L01_begin+0x8c>
     83a:	44 0f       	add	r20, r20
     83c:	55 1f       	adc	r21, r21
     83e:	0a 94       	dec	r0
     840:	e2 f7       	brpl	.-8      	; 0x83a <nRF24L01_begin+0x88>
     842:	24 2f       	mov	r18, r20
     844:	20 95       	com	r18
     846:	23 23       	and	r18, r19
     848:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
     84a:	2c b5       	in	r18, 0x2c	; 44
     84c:	20 61       	ori	r18, 0x10	; 16
     84e:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
     850:	2c b5       	in	r18, 0x2c	; 44
     852:	20 64       	ori	r18, 0x40	; 64
     854:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     856:	16 96       	adiw	r26, 0x06	; 6
     858:	ed 91       	ld	r30, X+
     85a:	fc 91       	ld	r31, X
     85c:	17 97       	sbiw	r26, 0x07	; 7
     85e:	42 91       	ld	r20, -Z
     860:	9c 01       	movw	r18, r24
     862:	18 96       	adiw	r26, 0x08	; 8
     864:	0c 90       	ld	r0, X
     866:	18 97       	sbiw	r26, 0x08	; 8
     868:	02 c0       	rjmp	.+4      	; 0x86e <nRF24L01_begin+0xbc>
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	0a 94       	dec	r0
     870:	e2 f7       	brpl	.-8      	; 0x86a <nRF24L01_begin+0xb8>
     872:	24 2b       	or	r18, r20
     874:	20 83       	st	Z, r18
     876:	19 96       	adiw	r26, 0x09	; 9
     878:	ed 91       	ld	r30, X+
     87a:	fc 91       	ld	r31, X
     87c:	1a 97       	sbiw	r26, 0x0a	; 10
     87e:	42 91       	ld	r20, -Z
     880:	9c 01       	movw	r18, r24
     882:	1b 96       	adiw	r26, 0x0b	; 11
     884:	0c 90       	ld	r0, X
     886:	1b 97       	sbiw	r26, 0x0b	; 11
     888:	02 c0       	rjmp	.+4      	; 0x88e <nRF24L01_begin+0xdc>
     88a:	22 0f       	add	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	0a 94       	dec	r0
     890:	e2 f7       	brpl	.-8      	; 0x88a <nRF24L01_begin+0xd8>
     892:	24 2b       	or	r18, r20
     894:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
     896:	1c 96       	adiw	r26, 0x0c	; 12
     898:	ed 91       	ld	r30, X+
     89a:	fc 91       	ld	r31, X
     89c:	1d 97       	sbiw	r26, 0x0d	; 13
     89e:	22 91       	ld	r18, -Z
     8a0:	1e 96       	adiw	r26, 0x0e	; 14
     8a2:	0c 90       	ld	r0, X
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <nRF24L01_begin+0xf8>
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	0a 94       	dec	r0
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <nRF24L01_begin+0xf4>
     8ae:	80 95       	com	r24
     8b0:	82 23       	and	r24, r18
     8b2:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
     8b4:	8c b5       	in	r24, 0x2c	; 44
     8b6:	87 7f       	andi	r24, 0xF7	; 247
     8b8:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
     8ba:	8c b5       	in	r24, 0x2c	; 44
     8bc:	8b 7f       	andi	r24, 0xFB	; 251
     8be:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
     8c0:	8c b5       	in	r24, 0x2c	; 44
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
     8c4:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
     8c6:	8c b5       	in	r24, 0x2c	; 44
     8c8:	8d 7f       	andi	r24, 0xFD	; 253
     8ca:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
     8cc:	8d b5       	in	r24, 0x2d	; 45
     8ce:	81 60       	ori	r24, 0x01	; 1
     8d0:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
     8d2:	8c b5       	in	r24, 0x2c	; 44
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	62 ee       	ldi	r22, 0xE2	; 226
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	61 ee       	ldi	r22, 0xE1	; 225
     8f2:	c8 01       	movw	r24, r16
     8f4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 c6 03 	call	0x78c	; 0x78c <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     8fe:	8f e0       	ldi	r24, 0x0F	; 15
     900:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	ae 01       	movw	r20, r28
     908:	4f 5f       	subi	r20, 0xFF	; 255
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
     914:	0f 2e       	mov	r0, r31
     916:	ff e3       	ldi	r31, 0x3F	; 63
     918:	ff 2e       	mov	r15, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	ae 01       	movw	r20, r28
     924:	4f 5f       	subi	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	c8 01       	movw	r24, r16
     92c:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
     930:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	ae 01       	movw	r20, r28
     938:	4f 5f       	subi	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	6c e1       	ldi	r22, 0x1C	; 28
     93e:	c8 01       	movw	r24, r16
     940:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	ae 01       	movw	r20, r28
     94e:	4f 5f       	subi	r20, 0xFF	; 255
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	6d e1       	ldi	r22, 0x1D	; 29
     954:	c8 01       	movw	r24, r16
     956:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
     95a:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	ae 01       	movw	r20, r28
     962:	4f 5f       	subi	r20, 0xFF	; 255
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>

	    // disable all rx addresses
    data = 0;
     96e:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	ae 01       	movw	r20, r28
     976:	4f 5f       	subi	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
    
	// Set RF channel
    data = 0x40;
     982:	80 e4       	ldi	r24, 0x40	; 64
     984:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, RF_CH, &data, 1);	
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	ae 01       	movw	r20, r28
     98c:	4f 5f       	subi	r20, 0xFF	; 255
     98e:	5f 4f       	sbci	r21, 0xFF	; 255
     990:	65 e0       	ldi	r22, 0x05	; 5
     992:	c8 01       	movw	r24, r16
     994:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
	/*
	uncomment Set to 1MBPS
	data = 0;
	nRF24L01_write_register(rf, RF_DR_HIGH, &data, 1)
	*/
}
     998:	0f 90       	pop	r0
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	08 95       	ret

000009a6 <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
     9b0:	20 e3       	ldi	r18, 0x30	; 48
     9b2:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	ae 01       	movw	r20, r28
     9ba:	4f 5f       	subi	r20, 0xFF	; 255
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	67 e0       	ldi	r22, 0x07	; 7
     9c0:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
}
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	00 d0       	rcall	.+0      	; 0x9de <nRF24L01_transmit+0x12>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <nRF24L01_transmit+0x14>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <nRF24L01_transmit+0x16>
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	8c 01       	movw	r16, r24
     9e8:	6b 01       	movw	r12, r22
     9ea:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
     9ec:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	c6 01       	movw	r24, r12
     9f8:	0e 94 66 03 	call	0x6cc	; 0x6cc <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
     9fc:	25 e0       	ldi	r18, 0x05	; 5
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	ae 01       	movw	r20, r28
     a02:	4f 5f       	subi	r20, 0xFF	; 255
     a04:	5f 4f       	sbci	r21, 0xFF	; 255
     a06:	60 e1       	ldi	r22, 0x10	; 16
     a08:	c8 01       	movw	r24, r16
     a0a:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
     a0e:	be 01       	movw	r22, r28
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	c6 01       	movw	r24, r12
     a16:	0e 94 66 03 	call	0x6cc	; 0x6cc <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
     a1a:	25 e0       	ldi	r18, 0x05	; 5
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	ae 01       	movw	r20, r28
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	6a e0       	ldi	r22, 0x0A	; 10
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
     a2c:	d7 01       	movw	r26, r14
     a2e:	92 96       	adiw	r26, 0x22	; 34
     a30:	2c 91       	ld	r18, X
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	a7 01       	movw	r20, r14
     a36:	4e 5f       	subi	r20, 0xFE	; 254
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	60 ea       	ldi	r22, 0xA0	; 160
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	ae 01       	movw	r20, r28
     a48:	4a 5f       	subi	r20, 0xFA	; 250
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 94 bb 03 	call	0x776	; 0x776 <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
     a54:	8e 81       	ldd	r24, Y+6	; 0x06
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	ae 01       	movw	r20, r28
     a60:	4a 5f       	subi	r20, 0xFA	; 250
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 b7 03 	call	0x76e	; 0x76e <nRF24L01_write_register>
     a6c:	d8 01       	movw	r26, r16
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     a76:	20 81       	ld	r18, Z
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	15 96       	adiw	r26, 0x05	; 5
     a7e:	0c 90       	ld	r0, X
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <nRF24L01_transmit+0xba>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <nRF24L01_transmit+0xb6>
     a8a:	82 2b       	or	r24, r18
     a8c:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     a8e:	26 96       	adiw	r28, 0x06	; 6
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <enableChannel>:
#include "../header.h"


void enableChannel(int ch)
{
	switch(ch)
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	91 05       	cpc	r25, r1
     ab0:	a9 f0       	breq	.+42     	; 0xadc <enableChannel+0x30>
     ab2:	2c f4       	brge	.+10     	; 0xabe <enableChannel+0x12>
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	49 f0       	breq	.+18     	; 0xaca <enableChannel+0x1e>
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	59 f0       	breq	.+22     	; 0xad2 <enableChannel+0x26>
     abc:	08 95       	ret
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	91 05       	cpc	r25, r1
     ac2:	89 f0       	breq	.+34     	; 0xae6 <enableChannel+0x3a>
     ac4:	04 97       	sbiw	r24, 0x04	; 4
     ac6:	a1 f0       	breq	.+40     	; 0xaf0 <enableChannel+0x44>
     ac8:	08 95       	ret
	{
		case 0:
		PORTD &= ~(S0 | S1 | S2);	// All LOW (check flowchart and/or datasheet for select pin states)
     aca:	8b b1       	in	r24, 0x0b	; 11
     acc:	83 7e       	andi	r24, 0xE3	; 227
     ace:	8b b9       	out	0x0b, r24	; 11
		break;
     ad0:	08 95       	ret
		case 1:
		PORTD |= S0;
     ad2:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(S1 | S2);
     ad4:	8b b1       	in	r24, 0x0b	; 11
     ad6:	87 7e       	andi	r24, 0xE7	; 231
     ad8:	8b b9       	out	0x0b, r24	; 11
		break;
     ada:	08 95       	ret
		case 2:
		PORTD |= S1;
     adc:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(S0 | S2);
     ade:	8b b1       	in	r24, 0x0b	; 11
     ae0:	8b 7e       	andi	r24, 0xEB	; 235
     ae2:	8b b9       	out	0x0b, r24	; 11
		break;
     ae4:	08 95       	ret
		case 3:
		PORTD |= (S0 | S1);
     ae6:	8b b1       	in	r24, 0x0b	; 11
     ae8:	8c 60       	ori	r24, 0x0C	; 12
     aea:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(S2);
     aec:	5c 98       	cbi	0x0b, 4	; 11
		break;
     aee:	08 95       	ret
		case 4:
		PORTD |= S2;
     af0:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= ~(S0 | S1);
     af2:	8b b1       	in	r24, 0x0b	; 11
     af4:	83 7f       	andi	r24, 0xF3	; 243
     af6:	8b b9       	out	0x0b, r24	; 11
     af8:	08 95       	ret

00000afa <bmp085_writemem>:
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
}
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	d8 2f       	mov	r29, r24
     b00:	c6 2f       	mov	r28, r22
     b02:	8e ee       	ldi	r24, 0xEE	; 238
     b04:	0e 94 ce 09 	call	0x139c	; 0x139c <i2c_start_wait>
     b08:	8d 2f       	mov	r24, r29
     b0a:	0e 94 02 0a 	call	0x1404	; 0x1404 <i2c_write>
     b0e:	8c 2f       	mov	r24, r28
     b10:	0e 94 02 0a 	call	0x1404	; 0x1404 <i2c_write>
     b14:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <i2c_stop>
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <bmp085_readmem>:
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	c8 2f       	mov	r28, r24
     b30:	f6 2e       	mov	r15, r22
     b32:	d7 2f       	mov	r29, r23
     b34:	e4 2e       	mov	r14, r20
     b36:	8e ee       	ldi	r24, 0xEE	; 238
     b38:	0e 94 ce 09 	call	0x139c	; 0x139c <i2c_start_wait>
     b3c:	8c 2f       	mov	r24, r28
     b3e:	0e 94 02 0a 	call	0x1404	; 0x1404 <i2c_write>
     b42:	8f ee       	ldi	r24, 0xEF	; 239
     b44:	0e 94 f6 09 	call	0x13ec	; 0x13ec <i2c_rep_start>
     b48:	ee 20       	and	r14, r14
     b4a:	09 f1       	breq	.+66     	; 0xb8e <bmp085_readmem+0x70>
     b4c:	0f 2d       	mov	r16, r15
     b4e:	1d 2f       	mov	r17, r29
     b50:	cc 24       	eor	r12, r12
     b52:	ca 94       	dec	r12
     b54:	ce 0c       	add	r12, r14
     b56:	d1 2c       	mov	r13, r1
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	c8 1a       	sub	r12, r24
     b5c:	d8 0a       	sbc	r13, r24
     b5e:	c0 e0       	ldi	r28, 0x00	; 0
     b60:	d0 e0       	ldi	r29, 0x00	; 0
     b62:	f1 2c       	mov	r15, r1
     b64:	e1 e0       	ldi	r30, 0x01	; 1
     b66:	ee 1a       	sub	r14, r30
     b68:	f1 08       	sbc	r15, r1
     b6a:	ec 16       	cp	r14, r28
     b6c:	fd 06       	cpc	r15, r29
     b6e:	29 f4       	brne	.+10     	; 0xb7a <bmp085_readmem+0x5c>
     b70:	0e 94 1f 0a 	call	0x143e	; 0x143e <i2c_readNak>
     b74:	f8 01       	movw	r30, r16
     b76:	80 83       	st	Z, r24
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <bmp085_readmem+0x64>
     b7a:	0e 94 14 0a 	call	0x1428	; 0x1428 <i2c_readAck>
     b7e:	f8 01       	movw	r30, r16
     b80:	80 83       	st	Z, r24
     b82:	21 96       	adiw	r28, 0x01	; 1
     b84:	0f 5f       	subi	r16, 0xFF	; 255
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	cc 15       	cp	r28, r12
     b8a:	dd 05       	cpc	r29, r13
     b8c:	71 f7       	brne	.-36     	; 0xb6a <bmp085_readmem+0x4c>
     b8e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <i2c_stop>
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	08 95       	ret

00000ba4 <bmp085_avaragefilter>:
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
     bb0:	aa e7       	ldi	r26, 0x7A	; 122
     bb2:	b2 e0       	ldi	r27, 0x02	; 2
     bb4:	2e ec       	ldi	r18, 0xCE	; 206
     bb6:	32 e0       	ldi	r19, 0x02	; 2
     bb8:	fd 01       	movw	r30, r26
     bba:	44 81       	ldd	r20, Z+4	; 0x04
     bbc:	55 81       	ldd	r21, Z+5	; 0x05
     bbe:	66 81       	ldd	r22, Z+6	; 0x06
     bc0:	77 81       	ldd	r23, Z+7	; 0x07
     bc2:	41 93       	st	Z+, r20
     bc4:	51 93       	st	Z+, r21
     bc6:	61 93       	st	Z+, r22
     bc8:	71 93       	st	Z+, r23
     bca:	e2 17       	cp	r30, r18
     bcc:	f3 07       	cpc	r31, r19
     bce:	a9 f7       	brne	.-22     	; 0xbba <bmp085_avaragefilter+0x16>
     bd0:	c0 92 ca 02 	sts	0x02CA, r12	; 0x8002ca <k+0x50>
     bd4:	d0 92 cb 02 	sts	0x02CB, r13	; 0x8002cb <k+0x51>
     bd8:	e0 92 cc 02 	sts	0x02CC, r14	; 0x8002cc <k+0x52>
     bdc:	f0 92 cd 02 	sts	0x02CD, r15	; 0x8002cd <k+0x53>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	cb 01       	movw	r24, r22
     be6:	cd 90       	ld	r12, X+
     be8:	dd 90       	ld	r13, X+
     bea:	ed 90       	ld	r14, X+
     bec:	fd 90       	ld	r15, X+
     bee:	6c 0d       	add	r22, r12
     bf0:	7d 1d       	adc	r23, r13
     bf2:	8e 1d       	adc	r24, r14
     bf4:	9f 1d       	adc	r25, r15
     bf6:	a2 17       	cp	r26, r18
     bf8:	b3 07       	cpc	r27, r19
     bfa:	a9 f7       	brne	.-22     	; 0xbe6 <bmp085_avaragefilter+0x42>
     bfc:	25 e1       	ldi	r18, 0x15	; 21
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__divmodsi4>
     c08:	ca 01       	movw	r24, r20
     c0a:	b9 01       	movw	r22, r18
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	08 95       	ret

00000c16 <bmp085_getcalibration>:
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <bmp085_getcalibration+0x6>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	1a 82       	std	Y+2, r1	; 0x02
     c22:	19 82       	std	Y+1, r1	; 0x01
     c24:	42 e0       	ldi	r20, 0x02	; 2
     c26:	be 01       	movw	r22, r28
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	8a ea       	ldi	r24, 0xAA	; 170
     c2e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	98 2f       	mov	r25, r24
     c38:	88 27       	eor	r24, r24
     c3a:	2a 81       	ldd	r18, Y+2	; 0x02
     c3c:	82 2b       	or	r24, r18
     c3e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <bmp085_regac1+0x1>
     c42:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <bmp085_regac1>
     c46:	42 e0       	ldi	r20, 0x02	; 2
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	8c ea       	ldi	r24, 0xAC	; 172
     c50:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	98 2f       	mov	r25, r24
     c5a:	88 27       	eor	r24, r24
     c5c:	2a 81       	ldd	r18, Y+2	; 0x02
     c5e:	82 2b       	or	r24, r18
     c60:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <bmp085_regac2+0x1>
     c64:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <bmp085_regac2>
     c68:	42 e0       	ldi	r20, 0x02	; 2
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	8e ea       	ldi	r24, 0xAE	; 174
     c72:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	98 2f       	mov	r25, r24
     c7c:	88 27       	eor	r24, r24
     c7e:	2a 81       	ldd	r18, Y+2	; 0x02
     c80:	82 2b       	or	r24, r18
     c82:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <bmp085_regac3+0x1>
     c86:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <bmp085_regac3>
     c8a:	42 e0       	ldi	r20, 0x02	; 2
     c8c:	be 01       	movw	r22, r28
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	80 eb       	ldi	r24, 0xB0	; 176
     c94:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	98 2f       	mov	r25, r24
     c9e:	88 27       	eor	r24, r24
     ca0:	2a 81       	ldd	r18, Y+2	; 0x02
     ca2:	82 2b       	or	r24, r18
     ca4:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <bmp085_regac4+0x1>
     ca8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <bmp085_regac4>
     cac:	42 e0       	ldi	r20, 0x02	; 2
     cae:	be 01       	movw	r22, r28
     cb0:	6f 5f       	subi	r22, 0xFF	; 255
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	82 eb       	ldi	r24, 0xB2	; 178
     cb6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	98 2f       	mov	r25, r24
     cc0:	88 27       	eor	r24, r24
     cc2:	2a 81       	ldd	r18, Y+2	; 0x02
     cc4:	82 2b       	or	r24, r18
     cc6:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <bmp085_regac5+0x1>
     cca:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <bmp085_regac5>
     cce:	42 e0       	ldi	r20, 0x02	; 2
     cd0:	be 01       	movw	r22, r28
     cd2:	6f 5f       	subi	r22, 0xFF	; 255
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	84 eb       	ldi	r24, 0xB4	; 180
     cd8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	98 2f       	mov	r25, r24
     ce2:	88 27       	eor	r24, r24
     ce4:	2a 81       	ldd	r18, Y+2	; 0x02
     ce6:	82 2b       	or	r24, r18
     ce8:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <bmp085_regac6+0x1>
     cec:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <bmp085_regac6>
     cf0:	42 e0       	ldi	r20, 0x02	; 2
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5f       	subi	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	86 eb       	ldi	r24, 0xB6	; 182
     cfa:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	98 2f       	mov	r25, r24
     d04:	88 27       	eor	r24, r24
     d06:	2a 81       	ldd	r18, Y+2	; 0x02
     d08:	82 2b       	or	r24, r18
     d0a:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <bmp085_regb1+0x1>
     d0e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <bmp085_regb1>
     d12:	42 e0       	ldi	r20, 0x02	; 2
     d14:	be 01       	movw	r22, r28
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	88 eb       	ldi	r24, 0xB8	; 184
     d1c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
     d28:	2a 81       	ldd	r18, Y+2	; 0x02
     d2a:	82 2b       	or	r24, r18
     d2c:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <bmp085_regb2+0x1>
     d30:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <bmp085_regb2>
     d34:	42 e0       	ldi	r20, 0x02	; 2
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	8a eb       	ldi	r24, 0xBA	; 186
     d3e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	98 2f       	mov	r25, r24
     d48:	88 27       	eor	r24, r24
     d4a:	2a 81       	ldd	r18, Y+2	; 0x02
     d4c:	82 2b       	or	r24, r18
     d4e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <bmp085_regmb+0x1>
     d52:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <bmp085_regmb>
     d56:	42 e0       	ldi	r20, 0x02	; 2
     d58:	be 01       	movw	r22, r28
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8c eb       	ldi	r24, 0xBC	; 188
     d60:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	98 2f       	mov	r25, r24
     d6a:	88 27       	eor	r24, r24
     d6c:	2a 81       	ldd	r18, Y+2	; 0x02
     d6e:	82 2b       	or	r24, r18
     d70:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <bmp085_regmc+0x1>
     d74:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <bmp085_regmc>
     d78:	42 e0       	ldi	r20, 0x02	; 2
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	8e eb       	ldi	r24, 0xBE	; 190
     d82:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	98 2f       	mov	r25, r24
     d8c:	88 27       	eor	r24, r24
     d8e:	2a 81       	ldd	r18, Y+2	; 0x02
     d90:	82 2b       	or	r24, r18
     d92:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <bmp085_regmd+0x1>
     d96:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <bmp085_regmd>
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <bmp085_getrawtemperature>:
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <bmp085_getrawtemperature+0x12>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	1a 82       	std	Y+2, r1	; 0x02
     dbc:	19 82       	std	Y+1, r1	; 0x01
     dbe:	6e e2       	ldi	r22, 0x2E	; 46
     dc0:	84 ef       	ldi	r24, 0xF4	; 244
     dc2:	0e 94 7d 05 	call	0xafa	; 0xafa <bmp085_writemem>
     dc6:	8f e0       	ldi	r24, 0x0F	; 15
     dc8:	97 e2       	ldi	r25, 0x27	; 39
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <bmp085_getrawtemperature+0x26>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <bmp085_getrawtemperature+0x2c>
     dd0:	00 00       	nop
     dd2:	42 e0       	ldi	r20, 0x02	; 2
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	86 ef       	ldi	r24, 0xF6	; 246
     ddc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	82 2f       	mov	r24, r18
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	44 27       	eor	r20, r20
     dec:	58 2f       	mov	r21, r24
     dee:	69 2f       	mov	r22, r25
     df0:	7a 2f       	mov	r23, r26
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	48 2b       	or	r20, r24
     df6:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bmp085_regac6>
     dfa:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <bmp085_regac6+0x1>
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	28 1b       	sub	r18, r24
     e04:	39 0b       	sbc	r19, r25
     e06:	41 09       	sbc	r20, r1
     e08:	51 09       	sbc	r21, r1
     e0a:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <bmp085_regac5>
     e0e:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <bmp085_regac5+0x1>
     e12:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
     e16:	6b 01       	movw	r12, r22
     e18:	7c 01       	movw	r14, r24
     e1a:	0b 2e       	mov	r0, r27
     e1c:	bf e0       	ldi	r27, 0x0F	; 15
     e1e:	f5 94       	asr	r15
     e20:	e7 94       	ror	r14
     e22:	d7 94       	ror	r13
     e24:	c7 94       	ror	r12
     e26:	ba 95       	dec	r27
     e28:	d1 f7       	brne	.-12     	; 0xe1e <bmp085_getrawtemperature+0x7a>
     e2a:	b0 2d       	mov	r27, r0
     e2c:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <bmp085_regmc>
     e30:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <bmp085_regmc+0x1>
     e34:	cb 01       	movw	r24, r22
     e36:	77 0f       	add	r23, r23
     e38:	aa 0b       	sbc	r26, r26
     e3a:	bb 0b       	sbc	r27, r27
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	05 2e       	mov	r0, r21
     e42:	5b e0       	ldi	r21, 0x0B	; 11
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	5a 95       	dec	r21
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <bmp085_getrawtemperature+0xa0>
     e50:	50 2d       	mov	r21, r0
     e52:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <bmp085_regmd>
     e56:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <bmp085_regmd+0x1>
     e5a:	89 01       	movw	r16, r18
     e5c:	33 0f       	add	r19, r19
     e5e:	22 0b       	sbc	r18, r18
     e60:	33 0b       	sbc	r19, r19
     e62:	a9 01       	movw	r20, r18
     e64:	98 01       	movw	r18, r16
     e66:	2c 0d       	add	r18, r12
     e68:	3d 1d       	adc	r19, r13
     e6a:	4e 1d       	adc	r20, r14
     e6c:	5f 1d       	adc	r21, r15
     e6e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__divmodsi4>
     e72:	c2 0e       	add	r12, r18
     e74:	d3 1e       	adc	r13, r19
     e76:	e4 1e       	adc	r14, r20
     e78:	f5 1e       	adc	r15, r21
     e7a:	c0 92 fc 02 	sts	0x02FC, r12	; 0x8002fc <bmp085_rawtemperature>
     e7e:	d0 92 fd 02 	sts	0x02FD, r13	; 0x8002fd <bmp085_rawtemperature+0x1>
     e82:	e0 92 fe 02 	sts	0x02FE, r14	; 0x8002fe <bmp085_rawtemperature+0x2>
     e86:	f0 92 ff 02 	sts	0x02FF, r15	; 0x8002ff <bmp085_rawtemperature+0x3>
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <bmp085_getrawpressure>:
     ea0:	4f 92       	push	r4
     ea2:	5f 92       	push	r5
     ea4:	6f 92       	push	r6
     ea6:	7f 92       	push	r7
     ea8:	8f 92       	push	r8
     eaa:	9f 92       	push	r9
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	27 97       	sbiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	8e 01       	movw	r16, r28
     ed2:	0f 5f       	subi	r16, 0xFF	; 255
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	f8 01       	movw	r30, r16
     eda:	11 92       	st	Z+, r1
     edc:	8a 95       	dec	r24
     ede:	e9 f7       	brne	.-6      	; 0xeda <bmp085_getrawpressure+0x3a>
     ee0:	0e 94 d2 06 	call	0xda4	; 0xda4 <bmp085_getrawtemperature>
     ee4:	64 ef       	ldi	r22, 0xF4	; 244
     ee6:	84 ef       	ldi	r24, 0xF4	; 244
     ee8:	0e 94 7d 05 	call	0xafa	; 0xafa <bmp085_writemem>
     eec:	8f e1       	ldi	r24, 0x1F	; 31
     eee:	9b ec       	ldi	r25, 0xCB	; 203
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <bmp085_getrawpressure+0x50>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <bmp085_getrawpressure+0x56>
     ef6:	00 00       	nop
     ef8:	43 e0       	ldi	r20, 0x03	; 3
     efa:	b8 01       	movw	r22, r16
     efc:	86 ef       	ldi	r24, 0xF6	; 246
     efe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <bmp085_readmem>
     f02:	80 90 fc 02 	lds	r8, 0x02FC	; 0x8002fc <bmp085_rawtemperature>
     f06:	90 90 fd 02 	lds	r9, 0x02FD	; 0x8002fd <bmp085_rawtemperature+0x1>
     f0a:	a0 90 fe 02 	lds	r10, 0x02FE	; 0x8002fe <bmp085_rawtemperature+0x2>
     f0e:	b0 90 ff 02 	lds	r11, 0x02FF	; 0x8002ff <bmp085_rawtemperature+0x3>
     f12:	90 ea       	ldi	r25, 0xA0	; 160
     f14:	89 1a       	sub	r8, r25
     f16:	9f e0       	ldi	r25, 0x0F	; 15
     f18:	99 0a       	sbc	r9, r25
     f1a:	a1 08       	sbc	r10, r1
     f1c:	b1 08       	sbc	r11, r1
     f1e:	a5 01       	movw	r20, r10
     f20:	94 01       	movw	r18, r8
     f22:	c5 01       	movw	r24, r10
     f24:	b4 01       	movw	r22, r8
     f26:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulsi3>
     f2a:	2b 01       	movw	r4, r22
     f2c:	3c 01       	movw	r6, r24
     f2e:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <bmp085_regb1>
     f32:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <bmp085_regb1+0x1>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	01 2e       	mov	r0, r17
     f3c:	1c e0       	ldi	r17, 0x0C	; 12
     f3e:	55 95       	asr	r21
     f40:	47 95       	ror	r20
     f42:	37 95       	ror	r19
     f44:	27 95       	ror	r18
     f46:	1a 95       	dec	r17
     f48:	d1 f7       	brne	.-12     	; 0xf3e <bmp085_getrawpressure+0x9e>
     f4a:	10 2d       	mov	r17, r0
     f4c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__mulshisi3>
     f50:	6c 01       	movw	r12, r24
     f52:	ff 24       	eor	r15, r15
     f54:	d7 fc       	sbrc	r13, 7
     f56:	f0 94       	com	r15
     f58:	ef 2c       	mov	r14, r15
     f5a:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <bmp085_regac3>
     f5e:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <bmp085_regac3+0x1>
     f62:	a5 01       	movw	r20, r10
     f64:	94 01       	movw	r18, r8
     f66:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__mulshisi3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	07 2e       	mov	r0, r23
     f70:	7d e0       	ldi	r23, 0x0D	; 13
     f72:	b5 95       	asr	r27
     f74:	a7 95       	ror	r26
     f76:	97 95       	ror	r25
     f78:	87 95       	ror	r24
     f7a:	7a 95       	dec	r23
     f7c:	d1 f7       	brne	.-12     	; 0xf72 <bmp085_getrawpressure+0xd2>
     f7e:	70 2d       	mov	r23, r0
     f80:	8c 0d       	add	r24, r12
     f82:	9d 1d       	adc	r25, r13
     f84:	ae 1d       	adc	r26, r14
     f86:	bf 1d       	adc	r27, r15
     f88:	02 96       	adiw	r24, 0x02	; 2
     f8a:	a1 1d       	adc	r26, r1
     f8c:	b1 1d       	adc	r27, r1
     f8e:	b5 95       	asr	r27
     f90:	a7 95       	ror	r26
     f92:	97 95       	ror	r25
     f94:	87 95       	ror	r24
     f96:	b5 95       	asr	r27
     f98:	a7 95       	ror	r26
     f9a:	97 95       	ror	r25
     f9c:	87 95       	ror	r24
     f9e:	9c 01       	movw	r18, r24
     fa0:	ad 01       	movw	r20, r26
     fa2:	30 58       	subi	r19, 0x80	; 128
     fa4:	4f 4f       	sbci	r20, 0xFF	; 255
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <bmp085_regac4>
     fac:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <bmp085_regac4+0x1>
     fb0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
     fb4:	9b 01       	movw	r18, r22
     fb6:	ac 01       	movw	r20, r24
     fb8:	01 2e       	mov	r0, r17
     fba:	1f e0       	ldi	r17, 0x0F	; 15
     fbc:	56 95       	lsr	r21
     fbe:	47 95       	ror	r20
     fc0:	37 95       	ror	r19
     fc2:	27 95       	ror	r18
     fc4:	1a 95       	dec	r17
     fc6:	d1 f7       	brne	.-12     	; 0xfbc <bmp085_getrawpressure+0x11c>
     fc8:	10 2d       	mov	r17, r0
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	3d 83       	std	Y+5, r19	; 0x05
     fce:	4e 83       	std	Y+6, r20	; 0x06
     fd0:	5f 83       	std	Y+7, r21	; 0x07
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	ca 80       	ldd	r12, Y+2	; 0x02
     fd6:	d1 2c       	mov	r13, r1
     fd8:	e1 2c       	mov	r14, r1
     fda:	f1 2c       	mov	r15, r1
     fdc:	fe 2c       	mov	r15, r14
     fde:	ed 2c       	mov	r14, r13
     fe0:	dc 2c       	mov	r13, r12
     fe2:	cc 24       	eor	r12, r12
     fe4:	e8 2a       	or	r14, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	c8 2a       	or	r12, r24
     fea:	68 94       	set
     fec:	14 f8       	bld	r1, 4
     fee:	f5 94       	asr	r15
     ff0:	e7 94       	ror	r14
     ff2:	d7 94       	ror	r13
     ff4:	c7 94       	ror	r12
     ff6:	16 94       	lsr	r1
     ff8:	d1 f7       	brne	.-12     	; 0xfee <bmp085_getrawpressure+0x14e>
     ffa:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <bmp085_regb2>
     ffe:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <bmp085_regb2+0x1>
    1002:	a3 01       	movw	r20, r6
    1004:	92 01       	movw	r18, r4
    1006:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__mulshisi3>
    100a:	2b 01       	movw	r4, r22
    100c:	3c 01       	movw	r6, r24
    100e:	03 2e       	mov	r0, r19
    1010:	37 e1       	ldi	r19, 0x17	; 23
    1012:	75 94       	asr	r7
    1014:	67 94       	ror	r6
    1016:	57 94       	ror	r5
    1018:	47 94       	ror	r4
    101a:	3a 95       	dec	r19
    101c:	d1 f7       	brne	.-12     	; 0x1012 <bmp085_getrawpressure+0x172>
    101e:	30 2d       	mov	r19, r0
    1020:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <bmp085_regac2>
    1024:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <bmp085_regac2+0x1>
    1028:	a5 01       	movw	r20, r10
    102a:	94 01       	movw	r18, r8
    102c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__mulshisi3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	07 2e       	mov	r0, r23
    1036:	7b e0       	ldi	r23, 0x0B	; 11
    1038:	b5 95       	asr	r27
    103a:	a7 95       	ror	r26
    103c:	97 95       	ror	r25
    103e:	87 95       	ror	r24
    1040:	7a 95       	dec	r23
    1042:	d1 f7       	brne	.-12     	; 0x1038 <bmp085_getrawpressure+0x198>
    1044:	70 2d       	mov	r23, r0
    1046:	84 0d       	add	r24, r4
    1048:	95 1d       	adc	r25, r5
    104a:	a6 1d       	adc	r26, r6
    104c:	b7 1d       	adc	r27, r7
    104e:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <bmp085_regac1>
    1052:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <bmp085_regac1+0x1>
    1056:	05 2e       	mov	r0, r21
    1058:	00 0c       	add	r0, r0
    105a:	66 0b       	sbc	r22, r22
    105c:	77 0b       	sbc	r23, r23
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	66 1f       	adc	r22, r22
    106c:	77 1f       	adc	r23, r23
    106e:	84 0f       	add	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	a6 1f       	adc	r26, r22
    1074:	b7 1f       	adc	r27, r23
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	a7 01       	movw	r20, r14
    1080:	96 01       	movw	r18, r12
    1082:	28 1b       	sub	r18, r24
    1084:	39 0b       	sbc	r19, r25
    1086:	4a 0b       	sbc	r20, r26
    1088:	5b 0b       	sbc	r21, r27
    108a:	aa e6       	ldi	r26, 0x6A	; 106
    108c:	b8 e1       	ldi	r27, 0x18	; 24
    108e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
    1092:	99 23       	and	r25, r25
    1094:	6c f0       	brlt	.+26     	; 0x10b0 <bmp085_getrawpressure+0x210>
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	2c 81       	ldd	r18, Y+4	; 0x04
    10a0:	3d 81       	ldd	r19, Y+5	; 0x05
    10a2:	4e 81       	ldd	r20, Y+6	; 0x06
    10a4:	5f 81       	ldd	r21, Y+7	; 0x07
    10a6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__udivmodsi4>
    10aa:	49 01       	movw	r8, r18
    10ac:	5a 01       	movw	r10, r20
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <bmp085_getrawpressure+0x228>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	4e 81       	ldd	r20, Y+6	; 0x06
    10b6:	5f 81       	ldd	r21, Y+7	; 0x07
    10b8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__udivmodsi4>
    10bc:	49 01       	movw	r8, r18
    10be:	5a 01       	movw	r10, r20
    10c0:	88 0c       	add	r8, r8
    10c2:	99 1c       	adc	r9, r9
    10c4:	aa 1c       	adc	r10, r10
    10c6:	bb 1c       	adc	r11, r11
    10c8:	99 27       	eor	r25, r25
    10ca:	b7 fc       	sbrc	r11, 7
    10cc:	9a 95       	dec	r25
    10ce:	8b 2d       	mov	r24, r11
    10d0:	7a 2d       	mov	r23, r10
    10d2:	69 2d       	mov	r22, r9
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulsi3>
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	ae ed       	ldi	r26, 0xDE	; 222
    10e2:	bb e0       	ldi	r27, 0x0B	; 11
    10e4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
    10e8:	6b 01       	movw	r12, r22
    10ea:	7c 01       	movw	r14, r24
    10ec:	a3 e4       	ldi	r26, 0x43	; 67
    10ee:	b3 ee       	ldi	r27, 0xE3	; 227
    10f0:	a5 01       	movw	r20, r10
    10f2:	94 01       	movw	r18, r8
    10f4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__mulohisi3>
    10f8:	bb 27       	eor	r27, r27
    10fa:	97 fd       	sbrc	r25, 7
    10fc:	b0 95       	com	r27
    10fe:	ab 2f       	mov	r26, r27
    1100:	67 01       	movw	r12, r14
    1102:	ff 24       	eor	r15, r15
    1104:	d7 fc       	sbrc	r13, 7
    1106:	f0 94       	com	r15
    1108:	ef 2c       	mov	r14, r15
    110a:	8c 0d       	add	r24, r12
    110c:	9d 1d       	adc	r25, r13
    110e:	ae 1d       	adc	r26, r14
    1110:	bf 1d       	adc	r27, r15
    1112:	81 53       	subi	r24, 0x31	; 49
    1114:	91 4f       	sbci	r25, 0xF1	; 241
    1116:	af 4f       	sbci	r26, 0xFF	; 255
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	68 94       	set
    111c:	13 f8       	bld	r1, 3
    111e:	b5 95       	asr	r27
    1120:	a7 95       	ror	r26
    1122:	97 95       	ror	r25
    1124:	87 95       	ror	r24
    1126:	16 94       	lsr	r1
    1128:	d1 f7       	brne	.-12     	; 0x111e <bmp085_getrawpressure+0x27e>
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	68 0d       	add	r22, r8
    1130:	79 1d       	adc	r23, r9
    1132:	8a 1d       	adc	r24, r10
    1134:	9b 1d       	adc	r25, r11
    1136:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <bmp085_rawpressure>
    113a:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <bmp085_rawpressure+0x1>
    113e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <bmp085_rawpressure+0x2>
    1142:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <bmp085_rawpressure+0x3>
    1146:	0e 94 d2 05 	call	0xba4	; 0xba4 <bmp085_avaragefilter>
    114a:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <bmp085_rawpressure>
    114e:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <bmp085_rawpressure+0x1>
    1152:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <bmp085_rawpressure+0x2>
    1156:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <bmp085_rawpressure+0x3>
    115a:	27 96       	adiw	r28, 0x07	; 7
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	9f 90       	pop	r9
    117c:	8f 90       	pop	r8
    117e:	7f 90       	pop	r7
    1180:	6f 90       	pop	r6
    1182:	5f 90       	pop	r5
    1184:	4f 90       	pop	r4
    1186:	08 95       	ret

00001188 <bmp085_gettemperature>:
    1188:	0e 94 d2 06 	call	0xda4	; 0xda4 <bmp085_getrawtemperature>
    118c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <bmp085_rawtemperature>
    1190:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <bmp085_rawtemperature+0x1>
    1194:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <bmp085_rawtemperature+0x2>
    1198:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <bmp085_rawtemperature+0x3>
    119c:	08 96       	adiw	r24, 0x08	; 8
    119e:	a1 1d       	adc	r26, r1
    11a0:	b1 1d       	adc	r27, r1
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	68 94       	set
    11a8:	13 f8       	bld	r1, 3
    11aa:	95 95       	asr	r25
    11ac:	87 95       	ror	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	16 94       	lsr	r1
    11b4:	d1 f7       	brne	.-12     	; 0x11aa <bmp085_gettemperature+0x22>
    11b6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__floatsisf>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
    11c6:	08 95       	ret

000011c8 <bmp085_getpressure>:
    11c8:	0e 94 50 07 	call	0xea0	; 0xea0 <bmp085_getrawpressure>
    11cc:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <bmp085_rawpressure>
    11d0:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <bmp085_rawpressure+0x1>
    11d4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <bmp085_rawpressure+0x2>
    11d8:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <bmp085_rawpressure+0x3>
    11dc:	08 95       	ret

000011de <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
    11de:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
    11e0:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e4:	8a e1       	ldi	r24, 0x1A	; 26
    11e6:	8a 95       	dec	r24
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <bmp085_init+0x8>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
    11ec:	0e 94 0b 06 	call	0xc16	; 0xc16 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
    11f0:	0e 94 d2 06 	call	0xda4	; 0xda4 <bmp085_getrawtemperature>
    11f4:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
    11f6:	0e 94 50 07 	call	0xea0	; 0xea0 <bmp085_getrawpressure>
    11fa:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <dht_getdata>:
#elif DHT_FLOAT == 0
int8_t dht_gethumidity(int8_t *humidity) {
	int8_t temperature = 0;
#endif
	return dht_getdata(&temperature, humidity);
}
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <dht_getdata+0x12>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <dht_getdata+0x14>
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	6c 01       	movw	r12, r24
    121e:	de 01       	movw	r26, r28
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	95 e0       	ldi	r25, 0x05	; 5
    1224:	fd 01       	movw	r30, r26
    1226:	11 92       	st	Z+, r1
    1228:	9a 95       	dec	r25
    122a:	e9 f7       	brne	.-6      	; 0x1226 <dht_getdata+0x24>
    122c:	20 9a       	sbi	0x04, 0	; 4
    122e:	28 9a       	sbi	0x05, 0	; 5
    1230:	ff ef       	ldi	r31, 0xFF	; 255
    1232:	20 e7       	ldi	r18, 0x70	; 112
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	f1 50       	subi	r31, 0x01	; 1
    1238:	20 40       	sbci	r18, 0x00	; 0
    123a:	80 40       	sbci	r24, 0x00	; 0
    123c:	e1 f7       	brne	.-8      	; 0x1236 <dht_getdata+0x34>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <dht_getdata+0x3e>
    1240:	00 00       	nop
    1242:	28 98       	cbi	0x05, 0	; 5
    1244:	af e9       	ldi	r26, 0x9F	; 159
    1246:	bc e8       	ldi	r27, 0x8C	; 140
    1248:	11 97       	sbiw	r26, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <dht_getdata+0x46>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <dht_getdata+0x4c>
    124e:	00 00       	nop
    1250:	28 9a       	sbi	0x05, 0	; 5
    1252:	20 98       	cbi	0x04, 0	; 4
    1254:	ba e6       	ldi	r27, 0x6A	; 106
    1256:	ba 95       	dec	r27
    1258:	f1 f7       	brne	.-4      	; 0x1256 <dht_getdata+0x54>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <dht_getdata+0x5a>
    125c:	18 99       	sbic	0x03, 0	; 3
    125e:	59 c0       	rjmp	.+178    	; 0x1312 <dht_getdata+0x110>
    1260:	e5 ed       	ldi	r30, 0xD5	; 213
    1262:	ea 95       	dec	r30
    1264:	f1 f7       	brne	.-4      	; 0x1262 <dht_getdata+0x60>
    1266:	00 00       	nop
    1268:	18 9b       	sbis	0x03, 0	; 3
    126a:	55 c0       	rjmp	.+170    	; 0x1316 <dht_getdata+0x114>
    126c:	f5 ed       	ldi	r31, 0xD5	; 213
    126e:	fa 95       	dec	r31
    1270:	f1 f7       	brne	.-4      	; 0x126e <dht_getdata+0x6c>
    1272:	00 00       	nop
    1274:	8e 01       	movw	r16, r28
    1276:	0f 5f       	subi	r16, 0xFF	; 255
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	7e 01       	movw	r14, r28
    127c:	26 e0       	ldi	r18, 0x06	; 6
    127e:	e2 0e       	add	r14, r18
    1280:	f1 1c       	adc	r15, r1
    1282:	e1 e0       	ldi	r30, 0x01	; 1
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	26 c0       	rjmp	.+76     	; 0x12d4 <dht_getdata+0xd2>
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	31 09       	sbc	r19, r1
    128c:	19 f4       	brne	.+6      	; 0x1294 <dht_getdata+0x92>
    128e:	45 c0       	rjmp	.+138    	; 0x131a <dht_getdata+0x118>
    1290:	29 ec       	ldi	r18, 0xC9	; 201
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	18 9b       	sbis	0x03, 0	; 3
    1296:	f8 cf       	rjmp	.-16     	; 0x1288 <dht_getdata+0x86>
    1298:	80 e5       	ldi	r24, 0x50	; 80
    129a:	8a 95       	dec	r24
    129c:	f1 f7       	brne	.-4      	; 0x129a <dht_getdata+0x98>
    129e:	18 9b       	sbis	0x03, 0	; 3
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <dht_getdata+0xb0>
    12a2:	9f 01       	movw	r18, r30
    12a4:	04 2e       	mov	r0, r20
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <dht_getdata+0xaa>
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <dht_getdata+0xa6>
    12b0:	92 2b       	or	r25, r18
    12b2:	29 ec       	ldi	r18, 0xC9	; 201
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <dht_getdata+0xbc>
    12b8:	21 50       	subi	r18, 0x01	; 1
    12ba:	31 09       	sbc	r19, r1
    12bc:	81 f1       	breq	.+96     	; 0x131e <dht_getdata+0x11c>
    12be:	18 99       	sbic	0x03, 0	; 3
    12c0:	fb cf       	rjmp	.-10     	; 0x12b8 <dht_getdata+0xb6>
    12c2:	41 50       	subi	r20, 0x01	; 1
    12c4:	51 09       	sbc	r21, r1
    12c6:	20 f7       	brcc	.-56     	; 0x1290 <dht_getdata+0x8e>
    12c8:	d8 01       	movw	r26, r16
    12ca:	9d 93       	st	X+, r25
    12cc:	8d 01       	movw	r16, r26
    12ce:	ea 16       	cp	r14, r26
    12d0:	fb 06       	cpc	r15, r27
    12d2:	21 f0       	breq	.+8      	; 0x12dc <dht_getdata+0xda>
    12d4:	47 e0       	ldi	r20, 0x07	; 7
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	da cf       	rjmp	.-76     	; 0x1290 <dht_getdata+0x8e>
    12dc:	20 9a       	sbi	0x04, 0	; 4
    12de:	28 9a       	sbi	0x05, 0	; 5
    12e0:	bf ef       	ldi	r27, 0xFF	; 255
    12e2:	e0 e7       	ldi	r30, 0x70	; 112
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	b1 50       	subi	r27, 0x01	; 1
    12e8:	e0 40       	sbci	r30, 0x00	; 0
    12ea:	f0 40       	sbci	r31, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <dht_getdata+0xe4>
    12ee:	00 c0       	rjmp	.+0      	; 0x12f0 <dht_getdata+0xee>
    12f0:	00 00       	nop
    12f2:	29 81       	ldd	r18, Y+1	; 0x01
    12f4:	3b 81       	ldd	r19, Y+3	; 0x03
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	82 0f       	add	r24, r18
    12fa:	83 0f       	add	r24, r19
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	89 0f       	add	r24, r25
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	89 13       	cpse	r24, r25
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <dht_getdata+0x120>
    1306:	d6 01       	movw	r26, r12
    1308:	3c 93       	st	X, r19
    130a:	fb 01       	movw	r30, r22
    130c:	20 83       	st	Z, r18
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <dht_getdata+0x122>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <dht_getdata+0x122>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <dht_getdata+0x122>
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <dht_getdata+0x122>
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <dht_getdata+0x122>
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	08 95       	ret

00001340 <dht_gettemperaturehumidity>:
#if DHT_FLOAT == 1
int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
#endif
	return dht_getdata(temperature, humidity);
    1340:	0e 94 01 09 	call	0x1202	; 0x1202 <dht_getdata>
}
    1344:	08 95       	ret

00001346 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
                           /* no prescaler */
  TWBR = 32;  /* must be > 10 for stable operation */
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    134c:	08 95       	ret

0000134e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    134e:	94 ea       	ldi	r25, 0xA4	; 164
    1350:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1354:	ec eb       	ldi	r30, 0xBC	; 188
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	90 81       	ld	r25, Z
    135a:	99 23       	and	r25, r25
    135c:	ec f7       	brge	.-6      	; 0x1358 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    135e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1362:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1364:	98 30       	cpi	r25, 0x08	; 8
    1366:	11 f0       	breq	.+4      	; 0x136c <i2c_start+0x1e>
    1368:	90 31       	cpi	r25, 0x10	; 16
    136a:	a1 f4       	brne	.+40     	; 0x1394 <i2c_start+0x46>

	// send device address
	TWDR = address;
    136c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1370:	84 e8       	ldi	r24, 0x84	; 132
    1372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1376:	ec eb       	ldi	r30, 0xBC	; 188
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	88 23       	and	r24, r24
    137e:	ec f7       	brge	.-6      	; 0x137a <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1380:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1384:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1386:	98 31       	cpi	r25, 0x18	; 24
    1388:	39 f0       	breq	.+14     	; 0x1398 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 34       	cpi	r25, 0x40	; 64
    138e:	29 f4       	brne	.+10     	; 0x139a <i2c_start+0x4c>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1398:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    139a:	08 95       	ret

0000139c <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    13a0:	ec eb       	ldi	r30, 0xBC	; 188
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    13a6:	a9 eb       	ldi	r26, 0xB9	; 185
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    13aa:	cb eb       	ldi	r28, 0xBB	; 187
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
    13ae:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    13b0:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    13b2:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    13b4:	90 81       	ld	r25, Z
    13b6:	99 23       	and	r25, r25
    13b8:	ec f7       	brge	.-6      	; 0x13b4 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    13ba:	9c 91       	ld	r25, X
    13bc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    13be:	98 30       	cpi	r25, 0x08	; 8
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <i2c_start_wait+0x2a>
    13c2:	90 31       	cpi	r25, 0x10	; 16
    13c4:	b1 f7       	brne	.-20     	; 0x13b2 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
    13c6:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    13c8:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    13ca:	90 81       	ld	r25, Z
    13cc:	99 23       	and	r25, r25
    13ce:	ec f7       	brge	.-6      	; 0x13ca <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    13d0:	9c 91       	ld	r25, X
    13d2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    13d4:	90 32       	cpi	r25, 0x20	; 32
    13d6:	11 f0       	breq	.+4      	; 0x13dc <i2c_start_wait+0x40>
    13d8:	98 35       	cpi	r25, 0x58	; 88
    13da:	29 f4       	brne	.+10     	; 0x13e6 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    13dc:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    13de:	90 81       	ld	r25, Z
    13e0:	94 fd       	sbrc	r25, 4
    13e2:	fd cf       	rjmp	.-6      	; 0x13de <i2c_start_wait+0x42>
    13e4:	e6 cf       	rjmp	.-52     	; 0x13b2 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    13ec:	0e 94 a7 09 	call	0x134e	; 0x134e <i2c_start>

}/* i2c_rep_start */
    13f0:	08 95       	ret

000013f2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    13f2:	84 e9       	ldi	r24, 0x94	; 148
    13f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    13f8:	ec eb       	ldi	r30, 0xBC	; 188
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	84 fd       	sbrc	r24, 4
    1400:	fd cf       	rjmp	.-6      	; 0x13fc <i2c_stop+0xa>

}/* i2c_stop */
    1402:	08 95       	ret

00001404 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1404:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1408:	84 e8       	ldi	r24, 0x84	; 132
    140a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    140e:	ec eb       	ldi	r30, 0xBC	; 188
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	88 23       	and	r24, r24
    1416:	ec f7       	brge	.-6      	; 0x1412 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1418:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    141c:	98 7f       	andi	r25, 0xF8	; 248
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	98 32       	cpi	r25, 0x28	; 40
    1422:	09 f4       	brne	.+2      	; 0x1426 <i2c_write+0x22>
    1424:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1426:	08 95       	ret

00001428 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1428:	84 ec       	ldi	r24, 0xC4	; 196
    142a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    142e:	ec eb       	ldi	r30, 0xBC	; 188
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 23       	and	r24, r24
    1436:	ec f7       	brge	.-6      	; 0x1432 <i2c_readAck+0xa>

    return TWDR;
    1438:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    143c:	08 95       	ret

0000143e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    143e:	84 e8       	ldi	r24, 0x84	; 132
    1440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    1444:	ec eb       	ldi	r30, 0xBC	; 188
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	ec f7       	brge	.-6      	; 0x1448 <i2c_readNak+0xa>
	
    return TWDR;
    144e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    1452:	08 95       	ret

00001454 <readLight>:
#include "../header.h"
#include <avr/io.h>

int readLight(void)
{
	enableChannel(CH4);
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 56 05 	call	0xaac	; 0xaac <enableChannel>
	int light = ReadADC(0);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadADC>
	return (light);
    1462:	08 95       	ret

00001464 <ReadADC>:


uint16_t ReadADC(uint8_t adcx)
{
	// Select ADC Channel
	ADMUX	&=	0xf0;
    1464:	ec e7       	ldi	r30, 0x7C	; 124
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	90 81       	ld	r25, Z
    146a:	90 7f       	andi	r25, 0xF0	; 240
    146c:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
    146e:	90 81       	ld	r25, Z
    1470:	89 2b       	or	r24, r25
    1472:	80 83       	st	Z, r24

	
	// Start Single conversion
	ADCSRA|=(1<<ADSC);
    1474:	ea e7       	ldi	r30, 0x7A	; 122
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	80 83       	st	Z, r24

	// Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
    147e:	80 81       	ld	r24, Z
    1480:	84 ff       	sbrs	r24, 4
    1482:	fd cf       	rjmp	.-6      	; 0x147e <ReadADC+0x1a>

	//Clear ADIF by writing 1 to it
	ADCSRA|=(1<<ADIF);
    1484:	ea e7       	ldi	r30, 0x7A	; 122
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 61       	ori	r24, 0x10	; 16
    148c:	80 83       	st	Z, r24

	return(ADC);
    148e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1492:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1496:	08 95       	ret

00001498 <readCapacitance>:

#include <avr/io.h>
#include "../header.h"

float readCapacitance(void)
{
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
	float capacitance;
	int adc_result;
	float IC = 24.48;			// Internal capacitance (error)
	
	DDRC &= ~(A0);				// A0 as INPUT
    14a4:	39 98       	cbi	0x07, 1	; 7
	PORTC |= A1;				// A1 HIGH (charge)
    14a6:	42 9a       	sbi	0x08, 2	; 8
	adc_result = ReadADC(1);	// Read ADC from A0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadADC>
    14ae:	ec 01       	movw	r28, r24
	PORTC &= ~(A1);				// A1 LOW (discharge)
    14b0:	42 98       	cbi	0x08, 2	; 8
	DDRC |= A0;					// A0 as OUTPUT (to make sure it discharges)
    14b2:	39 9a       	sbi	0x07, 1	; 7
	
	capacitance = (adc_result*IC)/(1023-adc_result);
	
	return(capacitance);
    14b4:	bc 01       	movw	r22, r24
    14b6:	99 0f       	add	r25, r25
    14b8:	88 0b       	sbc	r24, r24
    14ba:	99 0b       	sbc	r25, r25
    14bc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__floatsisf>
    14c0:	2a e0       	ldi	r18, 0x0A	; 10
    14c2:	37 ed       	ldi	r19, 0xD7	; 215
    14c4:	43 ec       	ldi	r20, 0xC3	; 195
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__mulsf3>
    14cc:	6b 01       	movw	r12, r22
    14ce:	7c 01       	movw	r14, r24
    14d0:	6f ef       	ldi	r22, 0xFF	; 255
    14d2:	73 e0       	ldi	r23, 0x03	; 3
    14d4:	6c 1b       	sub	r22, r28
    14d6:	7d 0b       	sbc	r23, r29
    14d8:	07 2e       	mov	r0, r23
    14da:	00 0c       	add	r0, r0
    14dc:	88 0b       	sbc	r24, r24
    14de:	99 0b       	sbc	r25, r25
    14e0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__floatsisf>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	c7 01       	movw	r24, r14
    14ea:	b6 01       	movw	r22, r12
    14ec:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	08 95       	ret

000014fe <readGas>:
#include "../header.h"
#include <avr/io.h>

int readGas(void)
{
	int gasADC = ReadADC(3);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadADC>
	return (gasADC);
    1504:	08 95       	ret

00001506 <setup_rf>:
	{
		// Do something
	}
}

nRF24L01 *setup_rf(void) {
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
    150a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <nRF24L01_init>
    150e:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
    1510:	85 e2       	ldi	r24, 0x25	; 37
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	99 83       	std	Y+1, r25	; 0x01
    1516:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
    1518:	22 e0       	ldi	r18, 0x02	; 2
    151a:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
    1520:	21 e0       	ldi	r18, 0x01	; 1
    1522:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
    1524:	9f 83       	std	Y+7, r25	; 0x07
    1526:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
    1528:	25 e0       	ldi	r18, 0x05	; 5
    152a:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
    152c:	9a 87       	std	Y+10, r25	; 0x0a
    152e:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
    1530:	23 e0       	ldi	r18, 0x03	; 3
    1532:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
    1534:	9d 87       	std	Y+13, r25	; 0x0d
    1536:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	8e 87       	std	Y+14, r24	; 0x0e
	nRF24L01_begin(rf);
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nRF24L01_begin>
	return rf;
    1542:	ce 01       	movw	r24, r28
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <transmit>:
#include <string.h>
#include <stdio.h>


void transmit(char *message)
{
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	c6 54       	subi	r28, 0x46	; 70
    1564:	d1 09       	sbc	r29, r1
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
	char text[30];									// Placeholder
	strcpy(text, message);							// Copy string from *message to placeholder
    1570:	bc 01       	movw	r22, r24
    1572:	8e 01       	movw	r16, r28
    1574:	0f 5f       	subi	r16, 0xFF	; 255
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <strcpy>
	int messageLength = strlen(text);				// Get the length
    157e:	f8 01       	movw	r30, r16
    1580:	01 90       	ld	r0, Z+
    1582:	00 20       	and	r0, r0
    1584:	e9 f7       	brne	.-6      	; 0x1580 <transmit+0x36>
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	cf 01       	movw	r24, r30
    158a:	80 1b       	sub	r24, r16
    158c:	91 0b       	sbc	r25, r17
    158e:	8c 01       	movw	r16, r24

	if (messageLength>30)							// If string exceeds length (nRF24L01 max packet size = 32 bytes)
    1590:	8f 31       	cpi	r24, 0x1F	; 31
    1592:	91 05       	cpc	r25, r1
    1594:	14 f1       	brlt	.+68     	; 0x15da <transmit+0x90>
	{
		memset(text, 0, sizeof(text));				// Clear string
    1596:	8e 01       	movw	r16, r28
    1598:	0f 5f       	subi	r16, 0xFF	; 255
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	8e e1       	ldi	r24, 0x1E	; 30
    159e:	f8 01       	movw	r30, r16
    15a0:	11 92       	st	Z+, r1
    15a2:	8a 95       	dec	r24
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <transmit+0x56>
		strcpy(text, "Error: string too long");
    15a6:	87 e1       	ldi	r24, 0x17	; 23
    15a8:	e7 ef       	ldi	r30, 0xF7	; 247
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	d8 01       	movw	r26, r16
    15ae:	01 90       	ld	r0, Z+
    15b0:	0d 92       	st	X+, r0
    15b2:	8a 95       	dec	r24
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <transmit+0x64>
		printf("Error: string too long\r");
    15b6:	8e e0       	ldi	r24, 0x0E	; 14
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	9f 93       	push	r25
    15bc:	8f 93       	push	r24
    15be:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
		messageLength = strlen(text);
    15c2:	f8 01       	movw	r30, r16
    15c4:	01 90       	ld	r0, Z+
    15c6:	00 20       	and	r0, r0
    15c8:	e9 f7       	brne	.-6      	; 0x15c4 <transmit+0x7a>
    15ca:	31 97       	sbiw	r30, 0x01	; 1
    15cc:	cf 01       	movw	r24, r30
    15ce:	80 1b       	sub	r24, r16
    15d0:	91 0b       	sbc	r25, r17
    15d2:	8c 01       	movw	r16, r24
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	23 c0       	rjmp	.+70     	; 0x1620 <transmit+0xd6>
	}
	else if (messageLength<28)
    15da:	4c 97       	sbiw	r24, 0x1c	; 28
    15dc:	0c f5       	brge	.+66     	; 0x1620 <transmit+0xd6>
	{
		memset(text, 0, sizeof(text));				// Clear string
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	8e e1       	ldi	r24, 0x1E	; 30
    15e6:	f8 01       	movw	r30, r16
    15e8:	11 92       	st	Z+, r1
    15ea:	8a 95       	dec	r24
    15ec:	e9 f7       	brne	.-6      	; 0x15e8 <transmit+0x9e>
		strcpy(text, "Error: missing data");
    15ee:	84 e1       	ldi	r24, 0x14	; 20
    15f0:	e6 e2       	ldi	r30, 0x26	; 38
    15f2:	f2 e0       	ldi	r31, 0x02	; 2
    15f4:	d8 01       	movw	r26, r16
    15f6:	01 90       	ld	r0, Z+
    15f8:	0d 92       	st	X+, r0
    15fa:	8a 95       	dec	r24
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <transmit+0xac>
		printf("Error: missing data\r");
    15fe:	8a e3       	ldi	r24, 0x3A	; 58
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	9f 93       	push	r25
    1604:	8f 93       	push	r24
    1606:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
		messageLength = strlen(text);
    160a:	f8 01       	movw	r30, r16
    160c:	01 90       	ld	r0, Z+
    160e:	00 20       	and	r0, r0
    1610:	e9 f7       	brne	.-6      	; 0x160c <transmit+0xc2>
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	cf 01       	movw	r24, r30
    1616:	80 1b       	sub	r24, r16
    1618:	91 0b       	sbc	r25, r17
    161a:	8c 01       	movw	r16, r24
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
		
	}
	printf("Transmitting data: %s\r",text);
    1620:	fe 01       	movw	r30, r28
    1622:	31 96       	adiw	r30, 0x01	; 1
    1624:	5f 01       	movw	r10, r30
    1626:	ff 93       	push	r31
    1628:	ef 93       	push	r30
    162a:	8f e4       	ldi	r24, 0x4F	; 79
    162c:	92 e0       	ldi	r25, 0x02	; 2
    162e:	9f 93       	push	r25
    1630:	8f 93       	push	r24
    1632:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <printf>
	uint8_t to_address[5] = { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7 };
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	e2 e2       	ldi	r30, 0x22	; 34
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	de 01       	movw	r26, r28
    163e:	5f 96       	adiw	r26, 0x1f	; 31
    1640:	01 90       	ld	r0, Z+
    1642:	0d 92       	st	X+, r0
    1644:	8a 95       	dec	r24
    1646:	e1 f7       	brne	.-8      	; 0x1640 <transmit+0xf6>
	nRF24L01 *rf = setup_rf();
    1648:	0e 94 83 0a 	call	0x1506	; 0x1506 <setup_rf>
    164c:	6c 01       	movw	r12, r24
	nRF24L01Message msg;
	nRF24L01_flush_transmit_message(rf);
    164e:	0e 94 be 03 	call	0x77c	; 0x77c <nRF24L01_flush_transmit_message>
	memcpy(msg.data, text, messageLength);
    1652:	7e 01       	movw	r14, r28
    1654:	f6 e2       	ldi	r31, 0x26	; 38
    1656:	ef 0e       	add	r14, r31
    1658:	f1 1c       	adc	r15, r1
    165a:	a8 01       	movw	r20, r16
    165c:	b5 01       	movw	r22, r10
    165e:	c7 01       	movw	r24, r14
    1660:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <memcpy>
	msg.length = strlen((char *)msg.data) + 1;
    1664:	f7 01       	movw	r30, r14
    1666:	01 90       	ld	r0, Z+
    1668:	00 20       	and	r0, r0
    166a:	e9 f7       	brne	.-6      	; 0x1666 <transmit+0x11c>
    166c:	ee 19       	sub	r30, r14
    166e:	27 96       	adiw	r28, 0x07	; 7
    1670:	ef af       	std	Y+63, r30	; 0x3f
    1672:	27 97       	sbiw	r28, 0x07	; 7
	nRF24L01_transmit(rf, to_address, &msg);
    1674:	ae 01       	movw	r20, r28
    1676:	4c 5d       	subi	r20, 0xDC	; 220
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	be 01       	movw	r22, r28
    167c:	61 5e       	subi	r22, 0xE1	; 225
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	c6 01       	movw	r24, r12
    1682:	0e 94 e6 04 	call	0x9cc	; 0x9cc <nRF24L01_transmit>
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	ca 5b       	subi	r28, 0xBA	; 186
    1690:	df 4f       	sbci	r29, 0xFF	; 255
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	af 90       	pop	r10
    16b0:	08 95       	ret

000016b2 <intToHex>:

void intToHex(int var)
{
	int i;
	
	if (var<=15)
    16b2:	80 31       	cpi	r24, 0x10	; 16
    16b4:	91 05       	cpc	r25, r1
    16b6:	0c f0       	brlt	.+2      	; 0x16ba <intToHex+0x8>
    16b8:	44 c0       	rjmp	.+136    	; 0x1742 <intToHex+0x90>
	{
		if (var<=9)
    16ba:	8a 30       	cpi	r24, 0x0A	; 10
    16bc:	91 05       	cpc	r25, r1
    16be:	34 f4       	brge	.+12     	; 0x16cc <intToHex+0x1a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    16c0:	4a e0       	ldi	r20, 0x0A	; 10
    16c2:	6e e0       	ldi	r22, 0x0E	; 14
    16c4:	73 e0       	ldi	r23, 0x03	; 3
    16c6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__itoa_ncheck>
    16ca:	08 95       	ret
		{
			itoa(var,hex,10);		// Int to string
		}
		else
		{
			switch(var)
    16cc:	8c 30       	cpi	r24, 0x0C	; 12
    16ce:	91 05       	cpc	r25, r1
    16d0:	e1 f0       	breq	.+56     	; 0x170a <intToHex+0x58>
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <intToHex+0x2e>
    16d4:	8a 30       	cpi	r24, 0x0A	; 10
    16d6:	91 05       	cpc	r25, r1
    16d8:	51 f0       	breq	.+20     	; 0x16ee <intToHex+0x3c>
    16da:	0b 97       	sbiw	r24, 0x0b	; 11
    16dc:	79 f0       	breq	.+30     	; 0x16fc <intToHex+0x4a>
    16de:	08 95       	ret
    16e0:	8e 30       	cpi	r24, 0x0E	; 14
    16e2:	91 05       	cpc	r25, r1
    16e4:	01 f1       	breq	.+64     	; 0x1726 <intToHex+0x74>
    16e6:	c4 f0       	brlt	.+48     	; 0x1718 <intToHex+0x66>
    16e8:	0f 97       	sbiw	r24, 0x0f	; 15
    16ea:	21 f1       	breq	.+72     	; 0x1734 <intToHex+0x82>
    16ec:	08 95       	ret
			{
				case 10:
				strcpy(hex,"A");
    16ee:	81 e4       	ldi	r24, 0x41	; 65
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    16f6:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
				break;
    16fa:	08 95       	ret
				case 11:
				strcpy(hex,"B");
    16fc:	82 e4       	ldi	r24, 0x42	; 66
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    1704:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
				break;
    1708:	08 95       	ret
				case 12:
				strcpy(hex,"C");
    170a:	83 e4       	ldi	r24, 0x43	; 67
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    1712:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
				break;
    1716:	08 95       	ret
				case 13:
				strcpy(hex,"D");
    1718:	84 e4       	ldi	r24, 0x44	; 68
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    1720:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
				break;
    1724:	08 95       	ret
				case 14:
				strcpy(hex,"E");
    1726:	85 e4       	ldi	r24, 0x45	; 69
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    172e:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
				break;
    1732:	08 95       	ret
				case 15:
				strcpy(hex,"F");
    1734:	86 e4       	ldi	r24, 0x46	; 70
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <hex+0x1>
    173c:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <hex>
    1740:	08 95       	ret
	else
	{
		long int quotient;
		int temp;
		i = 0;
		quotient = var;
    1742:	09 2e       	mov	r0, r25
    1744:	00 0c       	add	r0, r0
    1746:	aa 0b       	sbc	r26, r26
    1748:	bb 0b       	sbc	r27, r27
		while(quotient!=0)
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 05       	cpc	r26, r1
    174e:	b1 05       	cpc	r27, r1
    1750:	a9 f1       	breq	.+106    	; 0x17bc <intToHex+0x10a>
    1752:	ee e0       	ldi	r30, 0x0E	; 14
    1754:	f3 e0       	ldi	r31, 0x03	; 3
		{
			temp = quotient % 16;
    1756:	ac 01       	movw	r20, r24
    1758:	bd 01       	movw	r22, r26
    175a:	4f 70       	andi	r20, 0x0F	; 15
    175c:	55 27       	eor	r21, r21
    175e:	66 27       	eor	r22, r22
    1760:	70 78       	andi	r23, 0x80	; 128
    1762:	77 23       	and	r23, r23
    1764:	64 f4       	brge	.+24     	; 0x177e <intToHex+0xcc>
    1766:	41 50       	subi	r20, 0x01	; 1
    1768:	51 09       	sbc	r21, r1
    176a:	61 09       	sbc	r22, r1
    176c:	71 09       	sbc	r23, r1
    176e:	40 6f       	ori	r20, 0xF0	; 240
    1770:	5f 6f       	ori	r21, 0xFF	; 255
    1772:	6f 6f       	ori	r22, 0xFF	; 255
    1774:	7f 6f       	ori	r23, 0xFF	; 255
    1776:	4f 5f       	subi	r20, 0xFF	; 255
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	6f 4f       	sbci	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
			//To convert integer into character
			if( temp < 10)
    177e:	4a 30       	cpi	r20, 0x0A	; 10
    1780:	51 05       	cpc	r21, r1
    1782:	1c f4       	brge	.+6      	; 0x178a <intToHex+0xd8>
			{
				temp =temp + 48;
    1784:	40 5d       	subi	r20, 0xD0	; 208
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	02 c0       	rjmp	.+4      	; 0x178e <intToHex+0xdc>
			}
			else
			{
				temp = temp + 55;
    178a:	49 5c       	subi	r20, 0xC9	; 201
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			hex[i++]= temp;
    178e:	41 93       	st	Z+, r20
			quotient = quotient / 16;
    1790:	ac 01       	movw	r20, r24
    1792:	bd 01       	movw	r22, r26
    1794:	bb 23       	and	r27, r27
    1796:	24 f4       	brge	.+8      	; 0x17a0 <intToHex+0xee>
    1798:	41 5f       	subi	r20, 0xF1	; 241
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	6f 4f       	sbci	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	db 01       	movw	r26, r22
    17a2:	ca 01       	movw	r24, r20
    17a4:	68 94       	set
    17a6:	13 f8       	bld	r1, 3
    17a8:	b5 95       	asr	r27
    17aa:	a7 95       	ror	r26
    17ac:	97 95       	ror	r25
    17ae:	87 95       	ror	r24
    17b0:	16 94       	lsr	r1
    17b2:	d1 f7       	brne	.-12     	; 0x17a8 <intToHex+0xf6>
	{
		long int quotient;
		int temp;
		i = 0;
		quotient = var;
		while(quotient!=0)
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	a1 05       	cpc	r26, r1
    17b8:	b1 05       	cpc	r27, r1
    17ba:	69 f6       	brne	.-102    	; 0x1756 <intToHex+0xa4>
    17bc:	08 95       	ret

000017be <windDirection>:
#include <stdio.h>


void windDirection(void)
{
	enableChannel(CH1);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 56 05 	call	0xaac	; 0xaac <enableChannel>
	int i = ReadADC(0);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadADC>
	i = 240;
	
	if (i > 230 && i < 250)
	{
		dataStream[27] = 78;
    17cc:	e6 ed       	ldi	r30, 0xD6	; 214
    17ce:	f2 e0       	ldi	r31, 0x02	; 2
    17d0:	8e e4       	ldi	r24, 0x4E	; 78
    17d2:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 0;
    17d4:	14 8e       	std	Z+28, r1	; 0x1c
    17d6:	08 95       	ret

000017d8 <readWindSpeed>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int readWindSpeed(void)
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
	int ms = 0;
	unsigned long measureTime = 10000; // 10 Seconds
	int offState = 800;		// ADC value when IR LED is not blocked
	int revolution = 0;
	
	enableChannel(CH0);		// Read from analog multiplexer channel 4
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 56 05 	call	0xaac	; 0xaac <enableChannel>
{
	int measuring = true;
	int ms = 0;
	unsigned long measureTime = 10000; // 10 Seconds
	int offState = 800;		// ADC value when IR LED is not blocked
	int revolution = 0;
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	10 e0       	ldi	r17, 0x00	; 0
#include <stdio.h>

int readWindSpeed(void)
{
	int measuring = true;
	int ms = 0;
    17ec:	c0 e0       	ldi	r28, 0x00	; 0
    17ee:	d0 e0       	ldi	r29, 0x00	; 0
	int revolution = 0;
	
	enableChannel(CH0);		// Read from analog multiplexer channel 4
	//PORTD |= 0x80;			// Enable IR LED
	
	while(measuring)
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <readWindSpeed+0x40>
	{
		int IR = ReadADC(0);
		if (IR>offState)
		{
			revolution++;
    17f2:	0f 5f       	subi	r16, 0xFF	; 255
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		ms++;
    17f6:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17f8:	8f ec       	ldi	r24, 0xCF	; 207
    17fa:	97 e0       	ldi	r25, 0x07	; 7
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <readWindSpeed+0x24>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <readWindSpeed+0x2a>
    1802:	00 00       	nop
		_delay_ms(1);
		if (ms>=measureTime)
    1804:	ce 01       	movw	r24, r28
    1806:	0d 2e       	mov	r0, r29
    1808:	00 0c       	add	r0, r0
    180a:	aa 0b       	sbc	r26, r26
    180c:	bb 0b       	sbc	r27, r27
    180e:	80 31       	cpi	r24, 0x10	; 16
    1810:	97 42       	sbci	r25, 0x27	; 39
    1812:	a1 05       	cpc	r26, r1
    1814:	b1 05       	cpc	r27, r1
    1816:	38 f4       	brcc	.+14     	; 0x1826 <readWindSpeed+0x4e>
	enableChannel(CH0);		// Read from analog multiplexer channel 4
	//PORTD |= 0x80;			// Enable IR LED
	
	while(measuring)
	{
		int IR = ReadADC(0);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadADC>
		if (IR>offState)
    181e:	81 32       	cpi	r24, 0x21	; 33
    1820:	93 40       	sbci	r25, 0x03	; 3
    1822:	3c f7       	brge	.-50     	; 0x17f2 <readWindSpeed+0x1a>
    1824:	e8 cf       	rjmp	.-48     	; 0x17f6 <readWindSpeed+0x1e>
			break;
		}
	}
	
	return (revolution);
    1826:	c8 01       	movw	r24, r16
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	08 95       	ret

00001832 <uart_putchar>:
    stdout = &mystdout; //required by printf
    stdin  = &mystdin; //required by scanf
}

//redirect stdout to UART
int uart_putchar(char c, FILE *stream) {
    1832:	cf 93       	push	r28
    1834:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    1836:	8a 30       	cpi	r24, 0x0A	; 10
    1838:	19 f4       	brne	.+6      	; 0x1840 <uart_putchar+0xe>
		uart_putchar('\r', stream);
    183a:	8d e0       	ldi	r24, 0x0D	; 13
    183c:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1840:	e0 ec       	ldi	r30, 0xC0	; 192
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	85 ff       	sbrs	r24, 5
    1848:	fd cf       	rjmp	.-6      	; 0x1844 <uart_putchar+0x12>
	UDR0 = c;
    184a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <uart_getchar>:

//redirect stdin to UART
int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    1856:	e0 ec       	ldi	r30, 0xC0	; 192
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	88 23       	and	r24, r24
    185e:	ec f7       	brge	.-6      	; 0x185a <uart_getchar+0x4>
	return UDR0;
    1860:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	08 95       	ret

00001868 <ioinit>:
static FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ); //redirect uart_getchar() to stdio

void ioinit (void)
{
    //USART Baud rate: 9600, 8data, 1stop
    UBRR0H = MYUBRR >> 8;
    1868:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = MYUBRR;
    186c:	83 e3       	ldi	r24, 0x33	; 51
    186e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1872:	88 e1       	ldi	r24, 0x18	; 24
    1874:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    stdout = &mystdout; //required by printf
    1878:	e9 e1       	ldi	r30, 0x19	; 25
    187a:	f3 e0       	ldi	r31, 0x03	; 3
    187c:	84 e1       	ldi	r24, 0x14	; 20
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	93 83       	std	Z+3, r25	; 0x03
    1882:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &mystdin; //required by scanf
    1884:	86 e0       	ldi	r24, 0x06	; 6
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	08 95       	ret

0000188e <__divsf3>:
    188e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3x>
    1892:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_round>
    1896:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscB>
    189a:	58 f0       	brcs	.+22     	; 0x18b2 <__divsf3+0x24>
    189c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscA>
    18a0:	40 f0       	brcs	.+16     	; 0x18b2 <__divsf3+0x24>
    18a2:	29 f4       	brne	.+10     	; 0x18ae <__divsf3+0x20>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <__divsf3+0x24>
    18a8:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    18ac:	51 11       	cpse	r21, r1
    18ae:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    18b2:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_nan>

000018b6 <__divsf3x>:
    18b6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_split3>
    18ba:	68 f3       	brcs	.-38     	; 0x1896 <__divsf3+0x8>

000018bc <__divsf3_pse>:
    18bc:	99 23       	and	r25, r25
    18be:	b1 f3       	breq	.-20     	; 0x18ac <__divsf3+0x1e>
    18c0:	55 23       	and	r21, r21
    18c2:	91 f3       	breq	.-28     	; 0x18a8 <__divsf3+0x1a>
    18c4:	95 1b       	sub	r25, r21
    18c6:	55 0b       	sbc	r21, r21
    18c8:	bb 27       	eor	r27, r27
    18ca:	aa 27       	eor	r26, r26
    18cc:	62 17       	cp	r22, r18
    18ce:	73 07       	cpc	r23, r19
    18d0:	84 07       	cpc	r24, r20
    18d2:	38 f0       	brcs	.+14     	; 0x18e2 <__divsf3_pse+0x26>
    18d4:	9f 5f       	subi	r25, 0xFF	; 255
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	44 1f       	adc	r20, r20
    18de:	aa 1f       	adc	r26, r26
    18e0:	a9 f3       	breq	.-22     	; 0x18cc <__divsf3_pse+0x10>
    18e2:	35 d0       	rcall	.+106    	; 0x194e <__divsf3_pse+0x92>
    18e4:	0e 2e       	mov	r0, r30
    18e6:	3a f0       	brmi	.+14     	; 0x18f6 <__divsf3_pse+0x3a>
    18e8:	e0 e8       	ldi	r30, 0x80	; 128
    18ea:	32 d0       	rcall	.+100    	; 0x1950 <__divsf3_pse+0x94>
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	e6 95       	lsr	r30
    18f2:	00 1c       	adc	r0, r0
    18f4:	ca f7       	brpl	.-14     	; 0x18e8 <__divsf3_pse+0x2c>
    18f6:	2b d0       	rcall	.+86     	; 0x194e <__divsf3_pse+0x92>
    18f8:	fe 2f       	mov	r31, r30
    18fa:	29 d0       	rcall	.+82     	; 0x194e <__divsf3_pse+0x92>
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	bb 1f       	adc	r27, r27
    1904:	26 17       	cp	r18, r22
    1906:	37 07       	cpc	r19, r23
    1908:	48 07       	cpc	r20, r24
    190a:	ab 07       	cpc	r26, r27
    190c:	b0 e8       	ldi	r27, 0x80	; 128
    190e:	09 f0       	breq	.+2      	; 0x1912 <__divsf3_pse+0x56>
    1910:	bb 0b       	sbc	r27, r27
    1912:	80 2d       	mov	r24, r0
    1914:	bf 01       	movw	r22, r30
    1916:	ff 27       	eor	r31, r31
    1918:	93 58       	subi	r25, 0x83	; 131
    191a:	5f 4f       	sbci	r21, 0xFF	; 255
    191c:	3a f0       	brmi	.+14     	; 0x192c <__divsf3_pse+0x70>
    191e:	9e 3f       	cpi	r25, 0xFE	; 254
    1920:	51 05       	cpc	r21, r1
    1922:	78 f0       	brcs	.+30     	; 0x1942 <__divsf3_pse+0x86>
    1924:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1928:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    192c:	5f 3f       	cpi	r21, 0xFF	; 255
    192e:	e4 f3       	brlt	.-8      	; 0x1928 <__divsf3_pse+0x6c>
    1930:	98 3e       	cpi	r25, 0xE8	; 232
    1932:	d4 f3       	brlt	.-12     	; 0x1928 <__divsf3_pse+0x6c>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b7 95       	ror	r27
    193c:	f7 95       	ror	r31
    193e:	9f 5f       	subi	r25, 0xFF	; 255
    1940:	c9 f7       	brne	.-14     	; 0x1934 <__divsf3_pse+0x78>
    1942:	88 0f       	add	r24, r24
    1944:	91 1d       	adc	r25, r1
    1946:	96 95       	lsr	r25
    1948:	87 95       	ror	r24
    194a:	97 f9       	bld	r25, 7
    194c:	08 95       	ret
    194e:	e1 e0       	ldi	r30, 0x01	; 1
    1950:	66 0f       	add	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	bb 1f       	adc	r27, r27
    1958:	62 17       	cp	r22, r18
    195a:	73 07       	cpc	r23, r19
    195c:	84 07       	cpc	r24, r20
    195e:	ba 07       	cpc	r27, r26
    1960:	20 f0       	brcs	.+8      	; 0x196a <__divsf3_pse+0xae>
    1962:	62 1b       	sub	r22, r18
    1964:	73 0b       	sbc	r23, r19
    1966:	84 0b       	sbc	r24, r20
    1968:	ba 0b       	sbc	r27, r26
    196a:	ee 1f       	adc	r30, r30
    196c:	88 f7       	brcc	.-30     	; 0x1950 <__divsf3_pse+0x94>
    196e:	e0 95       	com	r30
    1970:	08 95       	ret

00001972 <__fixsfsi>:
    1972:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__fixunssfsi>
    1976:	68 94       	set
    1978:	b1 11       	cpse	r27, r1
    197a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    197e:	08 95       	ret

00001980 <__fixunssfsi>:
    1980:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_splitA>
    1984:	88 f0       	brcs	.+34     	; 0x19a8 <__fixunssfsi+0x28>
    1986:	9f 57       	subi	r25, 0x7F	; 127
    1988:	98 f0       	brcs	.+38     	; 0x19b0 <__fixunssfsi+0x30>
    198a:	b9 2f       	mov	r27, r25
    198c:	99 27       	eor	r25, r25
    198e:	b7 51       	subi	r27, 0x17	; 23
    1990:	b0 f0       	brcs	.+44     	; 0x19be <__fixunssfsi+0x3e>
    1992:	e1 f0       	breq	.+56     	; 0x19cc <__fixunssfsi+0x4c>
    1994:	66 0f       	add	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	1a f0       	brmi	.+6      	; 0x19a4 <__fixunssfsi+0x24>
    199e:	ba 95       	dec	r27
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__fixunssfsi+0x14>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <__fixunssfsi+0x4c>
    19a4:	b1 30       	cpi	r27, 0x01	; 1
    19a6:	91 f0       	breq	.+36     	; 0x19cc <__fixunssfsi+0x4c>
    19a8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__fp_zero>
    19ac:	b1 e0       	ldi	r27, 0x01	; 1
    19ae:	08 95       	ret
    19b0:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__fp_zero>
    19b4:	67 2f       	mov	r22, r23
    19b6:	78 2f       	mov	r23, r24
    19b8:	88 27       	eor	r24, r24
    19ba:	b8 5f       	subi	r27, 0xF8	; 248
    19bc:	39 f0       	breq	.+14     	; 0x19cc <__fixunssfsi+0x4c>
    19be:	b9 3f       	cpi	r27, 0xF9	; 249
    19c0:	cc f3       	brlt	.-14     	; 0x19b4 <__fixunssfsi+0x34>
    19c2:	86 95       	lsr	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b3 95       	inc	r27
    19ca:	d9 f7       	brne	.-10     	; 0x19c2 <__fixunssfsi+0x42>
    19cc:	3e f4       	brtc	.+14     	; 0x19dc <__fixunssfsi+0x5c>
    19ce:	90 95       	com	r25
    19d0:	80 95       	com	r24
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	08 95       	ret

000019de <__floatunsisf>:
    19de:	e8 94       	clt
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <__floatsisf+0x12>

000019e2 <__floatsisf>:
    19e2:	97 fb       	bst	r25, 7
    19e4:	3e f4       	brtc	.+14     	; 0x19f4 <__floatsisf+0x12>
    19e6:	90 95       	com	r25
    19e8:	80 95       	com	r24
    19ea:	70 95       	com	r23
    19ec:	61 95       	neg	r22
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8f 4f       	sbci	r24, 0xFF	; 255
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	99 23       	and	r25, r25
    19f6:	a9 f0       	breq	.+42     	; 0x1a22 <__floatsisf+0x40>
    19f8:	f9 2f       	mov	r31, r25
    19fa:	96 e9       	ldi	r25, 0x96	; 150
    19fc:	bb 27       	eor	r27, r27
    19fe:	93 95       	inc	r25
    1a00:	f6 95       	lsr	r31
    1a02:	87 95       	ror	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	b7 95       	ror	r27
    1a0a:	f1 11       	cpse	r31, r1
    1a0c:	f8 cf       	rjmp	.-16     	; 0x19fe <__floatsisf+0x1c>
    1a0e:	fa f4       	brpl	.+62     	; 0x1a4e <__floatsisf+0x6c>
    1a10:	bb 0f       	add	r27, r27
    1a12:	11 f4       	brne	.+4      	; 0x1a18 <__floatsisf+0x36>
    1a14:	60 ff       	sbrs	r22, 0
    1a16:	1b c0       	rjmp	.+54     	; 0x1a4e <__floatsisf+0x6c>
    1a18:	6f 5f       	subi	r22, 0xFF	; 255
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	16 c0       	rjmp	.+44     	; 0x1a4e <__floatsisf+0x6c>
    1a22:	88 23       	and	r24, r24
    1a24:	11 f0       	breq	.+4      	; 0x1a2a <__floatsisf+0x48>
    1a26:	96 e9       	ldi	r25, 0x96	; 150
    1a28:	11 c0       	rjmp	.+34     	; 0x1a4c <__floatsisf+0x6a>
    1a2a:	77 23       	and	r23, r23
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <__floatsisf+0x54>
    1a2e:	9e e8       	ldi	r25, 0x8E	; 142
    1a30:	87 2f       	mov	r24, r23
    1a32:	76 2f       	mov	r23, r22
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <__floatsisf+0x5e>
    1a36:	66 23       	and	r22, r22
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <__floatsisf+0x74>
    1a3a:	96 e8       	ldi	r25, 0x86	; 134
    1a3c:	86 2f       	mov	r24, r22
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	2a f0       	brmi	.+10     	; 0x1a4e <__floatsisf+0x6c>
    1a44:	9a 95       	dec	r25
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	88 1f       	adc	r24, r24
    1a4c:	da f7       	brpl	.-10     	; 0x1a44 <__floatsisf+0x62>
    1a4e:	88 0f       	add	r24, r24
    1a50:	96 95       	lsr	r25
    1a52:	87 95       	ror	r24
    1a54:	97 f9       	bld	r25, 7
    1a56:	08 95       	ret

00001a58 <__fp_inf>:
    1a58:	97 f9       	bld	r25, 7
    1a5a:	9f 67       	ori	r25, 0x7F	; 127
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	08 95       	ret

00001a64 <__fp_nan>:
    1a64:	9f ef       	ldi	r25, 0xFF	; 255
    1a66:	80 ec       	ldi	r24, 0xC0	; 192
    1a68:	08 95       	ret

00001a6a <__fp_pscA>:
    1a6a:	00 24       	eor	r0, r0
    1a6c:	0a 94       	dec	r0
    1a6e:	16 16       	cp	r1, r22
    1a70:	17 06       	cpc	r1, r23
    1a72:	18 06       	cpc	r1, r24
    1a74:	09 06       	cpc	r0, r25
    1a76:	08 95       	ret

00001a78 <__fp_pscB>:
    1a78:	00 24       	eor	r0, r0
    1a7a:	0a 94       	dec	r0
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	14 06       	cpc	r1, r20
    1a82:	05 06       	cpc	r0, r21
    1a84:	08 95       	ret

00001a86 <__fp_round>:
    1a86:	09 2e       	mov	r0, r25
    1a88:	03 94       	inc	r0
    1a8a:	00 0c       	add	r0, r0
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__fp_round+0xc>
    1a8e:	88 23       	and	r24, r24
    1a90:	52 f0       	brmi	.+20     	; 0x1aa6 <__fp_round+0x20>
    1a92:	bb 0f       	add	r27, r27
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <__fp_round+0x20>
    1a96:	bf 2b       	or	r27, r31
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__fp_round+0x18>
    1a9a:	60 ff       	sbrs	r22, 0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__fp_round+0x20>
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	08 95       	ret

00001aa8 <__fp_split3>:
    1aa8:	57 fd       	sbrc	r21, 7
    1aaa:	90 58       	subi	r25, 0x80	; 128
    1aac:	44 0f       	add	r20, r20
    1aae:	55 1f       	adc	r21, r21
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <__fp_splitA+0x10>
    1ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <__fp_splitA+0x1a>
    1ab6:	47 95       	ror	r20

00001ab8 <__fp_splitA>:
    1ab8:	88 0f       	add	r24, r24
    1aba:	97 fb       	bst	r25, 7
    1abc:	99 1f       	adc	r25, r25
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <__fp_splitA+0x20>
    1ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac2:	79 f0       	breq	.+30     	; 0x1ae2 <__fp_splitA+0x2a>
    1ac4:	87 95       	ror	r24
    1ac6:	08 95       	ret
    1ac8:	12 16       	cp	r1, r18
    1aca:	13 06       	cpc	r1, r19
    1acc:	14 06       	cpc	r1, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	f2 cf       	rjmp	.-28     	; 0x1ab6 <__fp_split3+0xe>
    1ad2:	46 95       	lsr	r20
    1ad4:	f1 df       	rcall	.-30     	; 0x1ab8 <__fp_splitA>
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <__fp_splitA+0x30>
    1ad8:	16 16       	cp	r1, r22
    1ada:	17 06       	cpc	r1, r23
    1adc:	18 06       	cpc	r1, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	f1 cf       	rjmp	.-30     	; 0x1ac4 <__fp_splitA+0xc>
    1ae2:	86 95       	lsr	r24
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	08 94       	sec
    1aea:	08 95       	ret

00001aec <__fp_zero>:
    1aec:	e8 94       	clt

00001aee <__fp_szero>:
    1aee:	bb 27       	eor	r27, r27
    1af0:	66 27       	eor	r22, r22
    1af2:	77 27       	eor	r23, r23
    1af4:	cb 01       	movw	r24, r22
    1af6:	97 f9       	bld	r25, 7
    1af8:	08 95       	ret

00001afa <__mulsf3>:
    1afa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__mulsf3x>
    1afe:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_round>
    1b02:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscA>
    1b06:	38 f0       	brcs	.+14     	; 0x1b16 <__mulsf3+0x1c>
    1b08:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscB>
    1b0c:	20 f0       	brcs	.+8      	; 0x1b16 <__mulsf3+0x1c>
    1b0e:	95 23       	and	r25, r21
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <__mulsf3+0x1c>
    1b12:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1b16:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_nan>
    1b1a:	11 24       	eor	r1, r1
    1b1c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>

00001b20 <__mulsf3x>:
    1b20:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_split3>
    1b24:	70 f3       	brcs	.-36     	; 0x1b02 <__mulsf3+0x8>

00001b26 <__mulsf3_pse>:
    1b26:	95 9f       	mul	r25, r21
    1b28:	c1 f3       	breq	.-16     	; 0x1b1a <__mulsf3+0x20>
    1b2a:	95 0f       	add	r25, r21
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	55 1f       	adc	r21, r21
    1b30:	62 9f       	mul	r22, r18
    1b32:	f0 01       	movw	r30, r0
    1b34:	72 9f       	mul	r23, r18
    1b36:	bb 27       	eor	r27, r27
    1b38:	f0 0d       	add	r31, r0
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	63 9f       	mul	r22, r19
    1b3e:	aa 27       	eor	r26, r26
    1b40:	f0 0d       	add	r31, r0
    1b42:	b1 1d       	adc	r27, r1
    1b44:	aa 1f       	adc	r26, r26
    1b46:	64 9f       	mul	r22, r20
    1b48:	66 27       	eor	r22, r22
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	a1 1d       	adc	r26, r1
    1b4e:	66 1f       	adc	r22, r22
    1b50:	82 9f       	mul	r24, r18
    1b52:	22 27       	eor	r18, r18
    1b54:	b0 0d       	add	r27, r0
    1b56:	a1 1d       	adc	r26, r1
    1b58:	62 1f       	adc	r22, r18
    1b5a:	73 9f       	mul	r23, r19
    1b5c:	b0 0d       	add	r27, r0
    1b5e:	a1 1d       	adc	r26, r1
    1b60:	62 1f       	adc	r22, r18
    1b62:	83 9f       	mul	r24, r19
    1b64:	a0 0d       	add	r26, r0
    1b66:	61 1d       	adc	r22, r1
    1b68:	22 1f       	adc	r18, r18
    1b6a:	74 9f       	mul	r23, r20
    1b6c:	33 27       	eor	r19, r19
    1b6e:	a0 0d       	add	r26, r0
    1b70:	61 1d       	adc	r22, r1
    1b72:	23 1f       	adc	r18, r19
    1b74:	84 9f       	mul	r24, r20
    1b76:	60 0d       	add	r22, r0
    1b78:	21 1d       	adc	r18, r1
    1b7a:	82 2f       	mov	r24, r18
    1b7c:	76 2f       	mov	r23, r22
    1b7e:	6a 2f       	mov	r22, r26
    1b80:	11 24       	eor	r1, r1
    1b82:	9f 57       	subi	r25, 0x7F	; 127
    1b84:	50 40       	sbci	r21, 0x00	; 0
    1b86:	9a f0       	brmi	.+38     	; 0x1bae <__mulsf3_pse+0x88>
    1b88:	f1 f0       	breq	.+60     	; 0x1bc6 <__mulsf3_pse+0xa0>
    1b8a:	88 23       	and	r24, r24
    1b8c:	4a f0       	brmi	.+18     	; 0x1ba0 <__mulsf3_pse+0x7a>
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	bb 1f       	adc	r27, r27
    1b94:	66 1f       	adc	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	91 50       	subi	r25, 0x01	; 1
    1b9c:	50 40       	sbci	r21, 0x00	; 0
    1b9e:	a9 f7       	brne	.-22     	; 0x1b8a <__mulsf3_pse+0x64>
    1ba0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	80 f0       	brcs	.+32     	; 0x1bc6 <__mulsf3_pse+0xa0>
    1ba6:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1baa:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    1bae:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb0:	e4 f3       	brlt	.-8      	; 0x1baa <__mulsf3_pse+0x84>
    1bb2:	98 3e       	cpi	r25, 0xE8	; 232
    1bb4:	d4 f3       	brlt	.-12     	; 0x1baa <__mulsf3_pse+0x84>
    1bb6:	86 95       	lsr	r24
    1bb8:	77 95       	ror	r23
    1bba:	67 95       	ror	r22
    1bbc:	b7 95       	ror	r27
    1bbe:	f7 95       	ror	r31
    1bc0:	e7 95       	ror	r30
    1bc2:	9f 5f       	subi	r25, 0xFF	; 255
    1bc4:	c1 f7       	brne	.-16     	; 0x1bb6 <__mulsf3_pse+0x90>
    1bc6:	fe 2b       	or	r31, r30
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret

00001bd4 <__mulsi3>:
    1bd4:	db 01       	movw	r26, r22
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	a2 9f       	mul	r26, r18
    1be4:	80 0d       	add	r24, r0
    1be6:	91 1d       	adc	r25, r1
    1be8:	a3 9f       	mul	r26, r19
    1bea:	90 0d       	add	r25, r0
    1bec:	b2 9f       	mul	r27, r18
    1bee:	90 0d       	add	r25, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	08 95       	ret

00001bf4 <__udivmodsi4>:
    1bf4:	a1 e2       	ldi	r26, 0x21	; 33
    1bf6:	1a 2e       	mov	r1, r26
    1bf8:	aa 1b       	sub	r26, r26
    1bfa:	bb 1b       	sub	r27, r27
    1bfc:	fd 01       	movw	r30, r26
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <__udivmodsi4_ep>

00001c00 <__udivmodsi4_loop>:
    1c00:	aa 1f       	adc	r26, r26
    1c02:	bb 1f       	adc	r27, r27
    1c04:	ee 1f       	adc	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	a2 17       	cp	r26, r18
    1c0a:	b3 07       	cpc	r27, r19
    1c0c:	e4 07       	cpc	r30, r20
    1c0e:	f5 07       	cpc	r31, r21
    1c10:	20 f0       	brcs	.+8      	; 0x1c1a <__udivmodsi4_ep>
    1c12:	a2 1b       	sub	r26, r18
    1c14:	b3 0b       	sbc	r27, r19
    1c16:	e4 0b       	sbc	r30, r20
    1c18:	f5 0b       	sbc	r31, r21

00001c1a <__udivmodsi4_ep>:
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	1a 94       	dec	r1
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <__udivmodsi4_loop>
    1c26:	60 95       	com	r22
    1c28:	70 95       	com	r23
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	9b 01       	movw	r18, r22
    1c30:	ac 01       	movw	r20, r24
    1c32:	bd 01       	movw	r22, r26
    1c34:	cf 01       	movw	r24, r30
    1c36:	08 95       	ret

00001c38 <__divmodsi4>:
    1c38:	05 2e       	mov	r0, r21
    1c3a:	97 fb       	bst	r25, 7
    1c3c:	1e f4       	brtc	.+6      	; 0x1c44 <__divmodsi4+0xc>
    1c3e:	00 94       	com	r0
    1c40:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__negsi2>
    1c44:	57 fd       	sbrc	r21, 7
    1c46:	07 d0       	rcall	.+14     	; 0x1c56 <__divmodsi4_neg2>
    1c48:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__udivmodsi4>
    1c4c:	07 fc       	sbrc	r0, 7
    1c4e:	03 d0       	rcall	.+6      	; 0x1c56 <__divmodsi4_neg2>
    1c50:	4e f4       	brtc	.+18     	; 0x1c64 <__divmodsi4_exit>
    1c52:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__negsi2>

00001c56 <__divmodsi4_neg2>:
    1c56:	50 95       	com	r21
    1c58:	40 95       	com	r20
    1c5a:	30 95       	com	r19
    1c5c:	21 95       	neg	r18
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	4f 4f       	sbci	r20, 0xFF	; 255
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255

00001c64 <__divmodsi4_exit>:
    1c64:	08 95       	ret

00001c66 <__negsi2>:
    1c66:	90 95       	com	r25
    1c68:	80 95       	com	r24
    1c6a:	70 95       	com	r23
    1c6c:	61 95       	neg	r22
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	8f 4f       	sbci	r24, 0xFF	; 255
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	08 95       	ret

00001c76 <__tablejump2__>:
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	05 90       	lpm	r0, Z+
    1c7c:	f4 91       	lpm	r31, Z
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	09 94       	ijmp

00001c82 <__muluhisi3>:
    1c82:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__umulhisi3>
    1c86:	a5 9f       	mul	r26, r21
    1c88:	90 0d       	add	r25, r0
    1c8a:	b4 9f       	mul	r27, r20
    1c8c:	90 0d       	add	r25, r0
    1c8e:	a4 9f       	mul	r26, r20
    1c90:	80 0d       	add	r24, r0
    1c92:	91 1d       	adc	r25, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	08 95       	ret

00001c98 <__mulshisi3>:
    1c98:	b7 ff       	sbrs	r27, 7
    1c9a:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__muluhisi3>

00001c9e <__mulohisi3>:
    1c9e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__muluhisi3>
    1ca2:	82 1b       	sub	r24, r18
    1ca4:	93 0b       	sbc	r25, r19
    1ca6:	08 95       	ret

00001ca8 <__umulhisi3>:
    1ca8:	a2 9f       	mul	r26, r18
    1caa:	b0 01       	movw	r22, r0
    1cac:	b3 9f       	mul	r27, r19
    1cae:	c0 01       	movw	r24, r0
    1cb0:	a3 9f       	mul	r26, r19
    1cb2:	70 0d       	add	r23, r0
    1cb4:	81 1d       	adc	r24, r1
    1cb6:	11 24       	eor	r1, r1
    1cb8:	91 1d       	adc	r25, r1
    1cba:	b2 9f       	mul	r27, r18
    1cbc:	70 0d       	add	r23, r0
    1cbe:	81 1d       	adc	r24, r1
    1cc0:	11 24       	eor	r1, r1
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	08 95       	ret

00001cc6 <malloc>:
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	10 f4       	brcc	.+4      	; 0x1cd8 <malloc+0x12>
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <__flp>
    1cdc:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <__flp+0x1>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	30 97       	sbiw	r30, 0x00	; 0
    1cea:	19 f1       	breq	.+70     	; 0x1d32 <malloc+0x6c>
    1cec:	40 81       	ld	r20, Z
    1cee:	51 81       	ldd	r21, Z+1	; 0x01
    1cf0:	02 81       	ldd	r16, Z+2	; 0x02
    1cf2:	13 81       	ldd	r17, Z+3	; 0x03
    1cf4:	48 17       	cp	r20, r24
    1cf6:	59 07       	cpc	r21, r25
    1cf8:	c8 f0       	brcs	.+50     	; 0x1d2c <malloc+0x66>
    1cfa:	84 17       	cp	r24, r20
    1cfc:	95 07       	cpc	r25, r21
    1cfe:	69 f4       	brne	.+26     	; 0x1d1a <malloc+0x54>
    1d00:	10 97       	sbiw	r26, 0x00	; 0
    1d02:	31 f0       	breq	.+12     	; 0x1d10 <malloc+0x4a>
    1d04:	12 96       	adiw	r26, 0x02	; 2
    1d06:	0c 93       	st	X, r16
    1d08:	12 97       	sbiw	r26, 0x02	; 2
    1d0a:	13 96       	adiw	r26, 0x03	; 3
    1d0c:	1c 93       	st	X, r17
    1d0e:	27 c0       	rjmp	.+78     	; 0x1d5e <malloc+0x98>
    1d10:	00 93 17 03 	sts	0x0317, r16	; 0x800317 <__flp>
    1d14:	10 93 18 03 	sts	0x0318, r17	; 0x800318 <__flp+0x1>
    1d18:	22 c0       	rjmp	.+68     	; 0x1d5e <malloc+0x98>
    1d1a:	21 15       	cp	r18, r1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <malloc+0x60>
    1d20:	42 17       	cp	r20, r18
    1d22:	53 07       	cpc	r21, r19
    1d24:	18 f4       	brcc	.+6      	; 0x1d2c <malloc+0x66>
    1d26:	9a 01       	movw	r18, r20
    1d28:	bd 01       	movw	r22, r26
    1d2a:	ef 01       	movw	r28, r30
    1d2c:	df 01       	movw	r26, r30
    1d2e:	f8 01       	movw	r30, r16
    1d30:	db cf       	rjmp	.-74     	; 0x1ce8 <malloc+0x22>
    1d32:	21 15       	cp	r18, r1
    1d34:	31 05       	cpc	r19, r1
    1d36:	f9 f0       	breq	.+62     	; 0x1d76 <malloc+0xb0>
    1d38:	28 1b       	sub	r18, r24
    1d3a:	39 0b       	sbc	r19, r25
    1d3c:	24 30       	cpi	r18, 0x04	; 4
    1d3e:	31 05       	cpc	r19, r1
    1d40:	80 f4       	brcc	.+32     	; 0x1d62 <malloc+0x9c>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	61 15       	cp	r22, r1
    1d48:	71 05       	cpc	r23, r1
    1d4a:	21 f0       	breq	.+8      	; 0x1d54 <malloc+0x8e>
    1d4c:	fb 01       	movw	r30, r22
    1d4e:	93 83       	std	Z+3, r25	; 0x03
    1d50:	82 83       	std	Z+2, r24	; 0x02
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <malloc+0x96>
    1d54:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <__flp+0x1>
    1d58:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <__flp>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	32 96       	adiw	r30, 0x02	; 2
    1d60:	44 c0       	rjmp	.+136    	; 0x1dea <malloc+0x124>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
    1d68:	81 93       	st	Z+, r24
    1d6a:	91 93       	st	Z+, r25
    1d6c:	22 50       	subi	r18, 0x02	; 2
    1d6e:	31 09       	sbc	r19, r1
    1d70:	39 83       	std	Y+1, r19	; 0x01
    1d72:	28 83       	st	Y, r18
    1d74:	3a c0       	rjmp	.+116    	; 0x1dea <malloc+0x124>
    1d76:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <__brkval>
    1d7a:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <__brkval+0x1>
    1d7e:	23 2b       	or	r18, r19
    1d80:	41 f4       	brne	.+16     	; 0x1d92 <malloc+0xcc>
    1d82:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d86:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d8a:	30 93 16 03 	sts	0x0316, r19	; 0x800316 <__brkval+0x1>
    1d8e:	20 93 15 03 	sts	0x0315, r18	; 0x800315 <__brkval>
    1d92:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d96:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d9a:	21 15       	cp	r18, r1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	41 f4       	brne	.+16     	; 0x1db0 <malloc+0xea>
    1da0:	2d b7       	in	r18, 0x3d	; 61
    1da2:	3e b7       	in	r19, 0x3e	; 62
    1da4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1da8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1dac:	24 1b       	sub	r18, r20
    1dae:	35 0b       	sbc	r19, r21
    1db0:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <__brkval>
    1db4:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <__brkval+0x1>
    1db8:	e2 17       	cp	r30, r18
    1dba:	f3 07       	cpc	r31, r19
    1dbc:	a0 f4       	brcc	.+40     	; 0x1de6 <malloc+0x120>
    1dbe:	2e 1b       	sub	r18, r30
    1dc0:	3f 0b       	sbc	r19, r31
    1dc2:	28 17       	cp	r18, r24
    1dc4:	39 07       	cpc	r19, r25
    1dc6:	78 f0       	brcs	.+30     	; 0x1de6 <malloc+0x120>
    1dc8:	ac 01       	movw	r20, r24
    1dca:	4e 5f       	subi	r20, 0xFE	; 254
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	24 17       	cp	r18, r20
    1dd0:	35 07       	cpc	r19, r21
    1dd2:	48 f0       	brcs	.+18     	; 0x1de6 <malloc+0x120>
    1dd4:	4e 0f       	add	r20, r30
    1dd6:	5f 1f       	adc	r21, r31
    1dd8:	50 93 16 03 	sts	0x0316, r21	; 0x800316 <__brkval+0x1>
    1ddc:	40 93 15 03 	sts	0x0315, r20	; 0x800315 <__brkval>
    1de0:	81 93       	st	Z+, r24
    1de2:	91 93       	st	Z+, r25
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <malloc+0x124>
    1de6:	e0 e0       	ldi	r30, 0x00	; 0
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	cf 01       	movw	r24, r30
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <free>:
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <free+0xa>
    1dfe:	81 c0       	rjmp	.+258    	; 0x1f02 <free+0x10c>
    1e00:	fc 01       	movw	r30, r24
    1e02:	32 97       	sbiw	r30, 0x02	; 2
    1e04:	13 82       	std	Z+3, r1	; 0x03
    1e06:	12 82       	std	Z+2, r1	; 0x02
    1e08:	a0 91 17 03 	lds	r26, 0x0317	; 0x800317 <__flp>
    1e0c:	b0 91 18 03 	lds	r27, 0x0318	; 0x800318 <__flp+0x1>
    1e10:	10 97       	sbiw	r26, 0x00	; 0
    1e12:	81 f4       	brne	.+32     	; 0x1e34 <free+0x3e>
    1e14:	20 81       	ld	r18, Z
    1e16:	31 81       	ldd	r19, Z+1	; 0x01
    1e18:	82 0f       	add	r24, r18
    1e1a:	93 1f       	adc	r25, r19
    1e1c:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <__brkval>
    1e20:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <__brkval+0x1>
    1e24:	28 17       	cp	r18, r24
    1e26:	39 07       	cpc	r19, r25
    1e28:	51 f5       	brne	.+84     	; 0x1e7e <free+0x88>
    1e2a:	f0 93 16 03 	sts	0x0316, r31	; 0x800316 <__brkval+0x1>
    1e2e:	e0 93 15 03 	sts	0x0315, r30	; 0x800315 <__brkval>
    1e32:	67 c0       	rjmp	.+206    	; 0x1f02 <free+0x10c>
    1e34:	ed 01       	movw	r28, r26
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ce 17       	cp	r28, r30
    1e3c:	df 07       	cpc	r29, r31
    1e3e:	40 f4       	brcc	.+16     	; 0x1e50 <free+0x5a>
    1e40:	4a 81       	ldd	r20, Y+2	; 0x02
    1e42:	5b 81       	ldd	r21, Y+3	; 0x03
    1e44:	9e 01       	movw	r18, r28
    1e46:	41 15       	cp	r20, r1
    1e48:	51 05       	cpc	r21, r1
    1e4a:	f1 f0       	breq	.+60     	; 0x1e88 <free+0x92>
    1e4c:	ea 01       	movw	r28, r20
    1e4e:	f5 cf       	rjmp	.-22     	; 0x1e3a <free+0x44>
    1e50:	d3 83       	std	Z+3, r29	; 0x03
    1e52:	c2 83       	std	Z+2, r28	; 0x02
    1e54:	40 81       	ld	r20, Z
    1e56:	51 81       	ldd	r21, Z+1	; 0x01
    1e58:	84 0f       	add	r24, r20
    1e5a:	95 1f       	adc	r25, r21
    1e5c:	c8 17       	cp	r28, r24
    1e5e:	d9 07       	cpc	r29, r25
    1e60:	59 f4       	brne	.+22     	; 0x1e78 <free+0x82>
    1e62:	88 81       	ld	r24, Y
    1e64:	99 81       	ldd	r25, Y+1	; 0x01
    1e66:	84 0f       	add	r24, r20
    1e68:	95 1f       	adc	r25, r21
    1e6a:	02 96       	adiw	r24, 0x02	; 2
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	93 83       	std	Z+3, r25	; 0x03
    1e76:	82 83       	std	Z+2, r24	; 0x02
    1e78:	21 15       	cp	r18, r1
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	29 f4       	brne	.+10     	; 0x1e88 <free+0x92>
    1e7e:	f0 93 18 03 	sts	0x0318, r31	; 0x800318 <__flp+0x1>
    1e82:	e0 93 17 03 	sts	0x0317, r30	; 0x800317 <__flp>
    1e86:	3d c0       	rjmp	.+122    	; 0x1f02 <free+0x10c>
    1e88:	e9 01       	movw	r28, r18
    1e8a:	fb 83       	std	Y+3, r31	; 0x03
    1e8c:	ea 83       	std	Y+2, r30	; 0x02
    1e8e:	49 91       	ld	r20, Y+
    1e90:	59 91       	ld	r21, Y+
    1e92:	c4 0f       	add	r28, r20
    1e94:	d5 1f       	adc	r29, r21
    1e96:	ec 17       	cp	r30, r28
    1e98:	fd 07       	cpc	r31, r29
    1e9a:	61 f4       	brne	.+24     	; 0x1eb4 <free+0xbe>
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	84 0f       	add	r24, r20
    1ea2:	95 1f       	adc	r25, r21
    1ea4:	02 96       	adiw	r24, 0x02	; 2
    1ea6:	e9 01       	movw	r28, r18
    1ea8:	99 83       	std	Y+1, r25	; 0x01
    1eaa:	88 83       	st	Y, r24
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	9b 83       	std	Y+3, r25	; 0x03
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	13 97       	sbiw	r26, 0x03	; 3
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	19 f0       	breq	.+6      	; 0x1eca <free+0xd4>
    1ec4:	fd 01       	movw	r30, r26
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	f7 cf       	rjmp	.-18     	; 0x1eb8 <free+0xc2>
    1eca:	8d 91       	ld	r24, X+
    1ecc:	9c 91       	ld	r25, X
    1ece:	11 97       	sbiw	r26, 0x01	; 1
    1ed0:	9d 01       	movw	r18, r26
    1ed2:	2e 5f       	subi	r18, 0xFE	; 254
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	82 0f       	add	r24, r18
    1ed8:	93 1f       	adc	r25, r19
    1eda:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <__brkval>
    1ede:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <__brkval+0x1>
    1ee2:	28 17       	cp	r18, r24
    1ee4:	39 07       	cpc	r19, r25
    1ee6:	69 f4       	brne	.+26     	; 0x1f02 <free+0x10c>
    1ee8:	30 97       	sbiw	r30, 0x00	; 0
    1eea:	29 f4       	brne	.+10     	; 0x1ef6 <free+0x100>
    1eec:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__flp+0x1>
    1ef0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__flp>
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <free+0x104>
    1ef6:	13 82       	std	Z+3, r1	; 0x03
    1ef8:	12 82       	std	Z+2, r1	; 0x02
    1efa:	b0 93 16 03 	sts	0x0316, r27	; 0x800316 <__brkval+0x1>
    1efe:	a0 93 15 03 	sts	0x0315, r26	; 0x800315 <__brkval>
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	08 95       	ret

00001f08 <memcpy>:
    1f08:	fb 01       	movw	r30, r22
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <memcpy+0xa>
    1f0e:	01 90       	ld	r0, Z+
    1f10:	0d 92       	st	X+, r0
    1f12:	41 50       	subi	r20, 0x01	; 1
    1f14:	50 40       	sbci	r21, 0x00	; 0
    1f16:	d8 f7       	brcc	.-10     	; 0x1f0e <memcpy+0x6>
    1f18:	08 95       	ret

00001f1a <strcpy>:
    1f1a:	fb 01       	movw	r30, r22
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	01 90       	ld	r0, Z+
    1f20:	0d 92       	st	X+, r0
    1f22:	00 20       	and	r0, r0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <strcpy+0x4>
    1f26:	08 95       	ret

00001f28 <__itoa_ncheck>:
    1f28:	bb 27       	eor	r27, r27
    1f2a:	4a 30       	cpi	r20, 0x0A	; 10
    1f2c:	31 f4       	brne	.+12     	; 0x1f3a <__itoa_ncheck+0x12>
    1f2e:	99 23       	and	r25, r25
    1f30:	22 f4       	brpl	.+8      	; 0x1f3a <__itoa_ncheck+0x12>
    1f32:	bd e2       	ldi	r27, 0x2D	; 45
    1f34:	90 95       	com	r25
    1f36:	81 95       	neg	r24
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__utoa_common>

00001f3e <__utoa_ncheck>:
    1f3e:	bb 27       	eor	r27, r27

00001f40 <__utoa_common>:
    1f40:	fb 01       	movw	r30, r22
    1f42:	55 27       	eor	r21, r21
    1f44:	aa 27       	eor	r26, r26
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	a4 17       	cp	r26, r20
    1f4e:	10 f0       	brcs	.+4      	; 0x1f54 <__utoa_common+0x14>
    1f50:	a4 1b       	sub	r26, r20
    1f52:	83 95       	inc	r24
    1f54:	50 51       	subi	r21, 0x10	; 16
    1f56:	b9 f7       	brne	.-18     	; 0x1f46 <__utoa_common+0x6>
    1f58:	a0 5d       	subi	r26, 0xD0	; 208
    1f5a:	aa 33       	cpi	r26, 0x3A	; 58
    1f5c:	08 f0       	brcs	.+2      	; 0x1f60 <__utoa_common+0x20>
    1f5e:	a9 5d       	subi	r26, 0xD9	; 217
    1f60:	a1 93       	st	Z+, r26
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	79 f7       	brne	.-34     	; 0x1f44 <__utoa_common+0x4>
    1f66:	b1 11       	cpse	r27, r1
    1f68:	b1 93       	st	Z+, r27
    1f6a:	11 92       	st	Z+, r1
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <strrev>

00001f72 <printf>:
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ef eb       	ldi	r30, 0xBF	; 191
    1f78:	ff e0       	ldi	r31, 0x0F	; 15
    1f7a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x20>
    1f7e:	ae 01       	movw	r20, r28
    1f80:	4b 5f       	subi	r20, 0xFB	; 251
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	fa 01       	movw	r30, r20
    1f86:	61 91       	ld	r22, Z+
    1f88:	71 91       	ld	r23, Z+
    1f8a:	af 01       	movw	r20, r30
    1f8c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <__iob+0x2>
    1f90:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__iob+0x3>
    1f94:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <vfprintf>
    1f98:	e2 e0       	ldi	r30, 0x02	; 2
    1f9a:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x20>

00001f9e <vfprintf>:
    1f9e:	ab e0       	ldi	r26, 0x0B	; 11
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e5 ed       	ldi	r30, 0xD5	; 213
    1fa4:	ff e0       	ldi	r31, 0x0F	; 15
    1fa6:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
    1faa:	6c 01       	movw	r12, r24
    1fac:	7b 01       	movw	r14, r22
    1fae:	8a 01       	movw	r16, r20
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	17 82       	std	Z+7, r1	; 0x07
    1fb4:	16 82       	std	Z+6, r1	; 0x06
    1fb6:	83 81       	ldd	r24, Z+3	; 0x03
    1fb8:	81 ff       	sbrs	r24, 1
    1fba:	cc c1       	rjmp	.+920    	; 0x2354 <vfprintf+0x3b6>
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	3c 01       	movw	r6, r24
    1fc2:	f6 01       	movw	r30, r12
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	93 fd       	sbrc	r25, 3
    1fca:	85 91       	lpm	r24, Z+
    1fcc:	93 ff       	sbrs	r25, 3
    1fce:	81 91       	ld	r24, Z+
    1fd0:	7f 01       	movw	r14, r30
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <vfprintf+0x3a>
    1fd6:	ba c1       	rjmp	.+884    	; 0x234c <vfprintf+0x3ae>
    1fd8:	85 32       	cpi	r24, 0x25	; 37
    1fda:	39 f4       	brne	.+14     	; 0x1fea <vfprintf+0x4c>
    1fdc:	93 fd       	sbrc	r25, 3
    1fde:	85 91       	lpm	r24, Z+
    1fe0:	93 ff       	sbrs	r25, 3
    1fe2:	81 91       	ld	r24, Z+
    1fe4:	7f 01       	movw	r14, r30
    1fe6:	85 32       	cpi	r24, 0x25	; 37
    1fe8:	29 f4       	brne	.+10     	; 0x1ff4 <vfprintf+0x56>
    1fea:	b6 01       	movw	r22, r12
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    1ff2:	e7 cf       	rjmp	.-50     	; 0x1fc2 <vfprintf+0x24>
    1ff4:	91 2c       	mov	r9, r1
    1ff6:	21 2c       	mov	r2, r1
    1ff8:	31 2c       	mov	r3, r1
    1ffa:	ff e1       	ldi	r31, 0x1F	; 31
    1ffc:	f3 15       	cp	r31, r3
    1ffe:	d8 f0       	brcs	.+54     	; 0x2036 <vfprintf+0x98>
    2000:	8b 32       	cpi	r24, 0x2B	; 43
    2002:	79 f0       	breq	.+30     	; 0x2022 <vfprintf+0x84>
    2004:	38 f4       	brcc	.+14     	; 0x2014 <vfprintf+0x76>
    2006:	80 32       	cpi	r24, 0x20	; 32
    2008:	79 f0       	breq	.+30     	; 0x2028 <vfprintf+0x8a>
    200a:	83 32       	cpi	r24, 0x23	; 35
    200c:	a1 f4       	brne	.+40     	; 0x2036 <vfprintf+0x98>
    200e:	23 2d       	mov	r18, r3
    2010:	20 61       	ori	r18, 0x10	; 16
    2012:	1d c0       	rjmp	.+58     	; 0x204e <vfprintf+0xb0>
    2014:	8d 32       	cpi	r24, 0x2D	; 45
    2016:	61 f0       	breq	.+24     	; 0x2030 <vfprintf+0x92>
    2018:	80 33       	cpi	r24, 0x30	; 48
    201a:	69 f4       	brne	.+26     	; 0x2036 <vfprintf+0x98>
    201c:	23 2d       	mov	r18, r3
    201e:	21 60       	ori	r18, 0x01	; 1
    2020:	16 c0       	rjmp	.+44     	; 0x204e <vfprintf+0xb0>
    2022:	83 2d       	mov	r24, r3
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	38 2e       	mov	r3, r24
    2028:	e3 2d       	mov	r30, r3
    202a:	e4 60       	ori	r30, 0x04	; 4
    202c:	3e 2e       	mov	r3, r30
    202e:	2a c0       	rjmp	.+84     	; 0x2084 <vfprintf+0xe6>
    2030:	f3 2d       	mov	r31, r3
    2032:	f8 60       	ori	r31, 0x08	; 8
    2034:	1d c0       	rjmp	.+58     	; 0x2070 <vfprintf+0xd2>
    2036:	37 fc       	sbrc	r3, 7
    2038:	2d c0       	rjmp	.+90     	; 0x2094 <vfprintf+0xf6>
    203a:	20 ed       	ldi	r18, 0xD0	; 208
    203c:	28 0f       	add	r18, r24
    203e:	2a 30       	cpi	r18, 0x0A	; 10
    2040:	40 f0       	brcs	.+16     	; 0x2052 <vfprintf+0xb4>
    2042:	8e 32       	cpi	r24, 0x2E	; 46
    2044:	b9 f4       	brne	.+46     	; 0x2074 <vfprintf+0xd6>
    2046:	36 fc       	sbrc	r3, 6
    2048:	81 c1       	rjmp	.+770    	; 0x234c <vfprintf+0x3ae>
    204a:	23 2d       	mov	r18, r3
    204c:	20 64       	ori	r18, 0x40	; 64
    204e:	32 2e       	mov	r3, r18
    2050:	19 c0       	rjmp	.+50     	; 0x2084 <vfprintf+0xe6>
    2052:	36 fe       	sbrs	r3, 6
    2054:	06 c0       	rjmp	.+12     	; 0x2062 <vfprintf+0xc4>
    2056:	8a e0       	ldi	r24, 0x0A	; 10
    2058:	98 9e       	mul	r9, r24
    205a:	20 0d       	add	r18, r0
    205c:	11 24       	eor	r1, r1
    205e:	92 2e       	mov	r9, r18
    2060:	11 c0       	rjmp	.+34     	; 0x2084 <vfprintf+0xe6>
    2062:	ea e0       	ldi	r30, 0x0A	; 10
    2064:	2e 9e       	mul	r2, r30
    2066:	20 0d       	add	r18, r0
    2068:	11 24       	eor	r1, r1
    206a:	22 2e       	mov	r2, r18
    206c:	f3 2d       	mov	r31, r3
    206e:	f0 62       	ori	r31, 0x20	; 32
    2070:	3f 2e       	mov	r3, r31
    2072:	08 c0       	rjmp	.+16     	; 0x2084 <vfprintf+0xe6>
    2074:	8c 36       	cpi	r24, 0x6C	; 108
    2076:	21 f4       	brne	.+8      	; 0x2080 <vfprintf+0xe2>
    2078:	83 2d       	mov	r24, r3
    207a:	80 68       	ori	r24, 0x80	; 128
    207c:	38 2e       	mov	r3, r24
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <vfprintf+0xe6>
    2080:	88 36       	cpi	r24, 0x68	; 104
    2082:	41 f4       	brne	.+16     	; 0x2094 <vfprintf+0xf6>
    2084:	f7 01       	movw	r30, r14
    2086:	93 fd       	sbrc	r25, 3
    2088:	85 91       	lpm	r24, Z+
    208a:	93 ff       	sbrs	r25, 3
    208c:	81 91       	ld	r24, Z+
    208e:	7f 01       	movw	r14, r30
    2090:	81 11       	cpse	r24, r1
    2092:	b3 cf       	rjmp	.-154    	; 0x1ffa <vfprintf+0x5c>
    2094:	98 2f       	mov	r25, r24
    2096:	9f 7d       	andi	r25, 0xDF	; 223
    2098:	95 54       	subi	r25, 0x45	; 69
    209a:	93 30       	cpi	r25, 0x03	; 3
    209c:	28 f4       	brcc	.+10     	; 0x20a8 <vfprintf+0x10a>
    209e:	0c 5f       	subi	r16, 0xFC	; 252
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	9f e3       	ldi	r25, 0x3F	; 63
    20a4:	99 83       	std	Y+1, r25	; 0x01
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <vfprintf+0x124>
    20a8:	83 36       	cpi	r24, 0x63	; 99
    20aa:	31 f0       	breq	.+12     	; 0x20b8 <vfprintf+0x11a>
    20ac:	83 37       	cpi	r24, 0x73	; 115
    20ae:	71 f0       	breq	.+28     	; 0x20cc <vfprintf+0x12e>
    20b0:	83 35       	cpi	r24, 0x53	; 83
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <vfprintf+0x118>
    20b4:	59 c0       	rjmp	.+178    	; 0x2168 <vfprintf+0x1ca>
    20b6:	21 c0       	rjmp	.+66     	; 0x20fa <vfprintf+0x15c>
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 81       	ld	r24, Z
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	0e 5f       	subi	r16, 0xFE	; 254
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	88 24       	eor	r8, r8
    20c4:	83 94       	inc	r8
    20c6:	91 2c       	mov	r9, r1
    20c8:	53 01       	movw	r10, r6
    20ca:	13 c0       	rjmp	.+38     	; 0x20f2 <vfprintf+0x154>
    20cc:	28 01       	movw	r4, r16
    20ce:	f2 e0       	ldi	r31, 0x02	; 2
    20d0:	4f 0e       	add	r4, r31
    20d2:	51 1c       	adc	r5, r1
    20d4:	f8 01       	movw	r30, r16
    20d6:	a0 80       	ld	r10, Z
    20d8:	b1 80       	ldd	r11, Z+1	; 0x01
    20da:	36 fe       	sbrs	r3, 6
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <vfprintf+0x146>
    20de:	69 2d       	mov	r22, r9
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <vfprintf+0x14a>
    20e4:	6f ef       	ldi	r22, 0xFF	; 255
    20e6:	7f ef       	ldi	r23, 0xFF	; 255
    20e8:	c5 01       	movw	r24, r10
    20ea:	0e 94 bb 11 	call	0x2376	; 0x2376 <strnlen>
    20ee:	4c 01       	movw	r8, r24
    20f0:	82 01       	movw	r16, r4
    20f2:	f3 2d       	mov	r31, r3
    20f4:	ff 77       	andi	r31, 0x7F	; 127
    20f6:	3f 2e       	mov	r3, r31
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <vfprintf+0x188>
    20fa:	28 01       	movw	r4, r16
    20fc:	22 e0       	ldi	r18, 0x02	; 2
    20fe:	42 0e       	add	r4, r18
    2100:	51 1c       	adc	r5, r1
    2102:	f8 01       	movw	r30, r16
    2104:	a0 80       	ld	r10, Z
    2106:	b1 80       	ldd	r11, Z+1	; 0x01
    2108:	36 fe       	sbrs	r3, 6
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <vfprintf+0x174>
    210c:	69 2d       	mov	r22, r9
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x178>
    2112:	6f ef       	ldi	r22, 0xFF	; 255
    2114:	7f ef       	ldi	r23, 0xFF	; 255
    2116:	c5 01       	movw	r24, r10
    2118:	0e 94 b0 11 	call	0x2360	; 0x2360 <strnlen_P>
    211c:	4c 01       	movw	r8, r24
    211e:	f3 2d       	mov	r31, r3
    2120:	f0 68       	ori	r31, 0x80	; 128
    2122:	3f 2e       	mov	r3, r31
    2124:	82 01       	movw	r16, r4
    2126:	33 fc       	sbrc	r3, 3
    2128:	1b c0       	rjmp	.+54     	; 0x2160 <vfprintf+0x1c2>
    212a:	82 2d       	mov	r24, r2
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	88 16       	cp	r8, r24
    2130:	99 06       	cpc	r9, r25
    2132:	b0 f4       	brcc	.+44     	; 0x2160 <vfprintf+0x1c2>
    2134:	b6 01       	movw	r22, r12
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    213e:	2a 94       	dec	r2
    2140:	f4 cf       	rjmp	.-24     	; 0x212a <vfprintf+0x18c>
    2142:	f5 01       	movw	r30, r10
    2144:	37 fc       	sbrc	r3, 7
    2146:	85 91       	lpm	r24, Z+
    2148:	37 fe       	sbrs	r3, 7
    214a:	81 91       	ld	r24, Z+
    214c:	5f 01       	movw	r10, r30
    214e:	b6 01       	movw	r22, r12
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    2156:	21 10       	cpse	r2, r1
    2158:	2a 94       	dec	r2
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	82 1a       	sub	r8, r18
    215e:	91 08       	sbc	r9, r1
    2160:	81 14       	cp	r8, r1
    2162:	91 04       	cpc	r9, r1
    2164:	71 f7       	brne	.-36     	; 0x2142 <vfprintf+0x1a4>
    2166:	e8 c0       	rjmp	.+464    	; 0x2338 <vfprintf+0x39a>
    2168:	84 36       	cpi	r24, 0x64	; 100
    216a:	11 f0       	breq	.+4      	; 0x2170 <vfprintf+0x1d2>
    216c:	89 36       	cpi	r24, 0x69	; 105
    216e:	41 f5       	brne	.+80     	; 0x21c0 <vfprintf+0x222>
    2170:	f8 01       	movw	r30, r16
    2172:	37 fe       	sbrs	r3, 7
    2174:	07 c0       	rjmp	.+14     	; 0x2184 <vfprintf+0x1e6>
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	0c 5f       	subi	r16, 0xFC	; 252
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	08 c0       	rjmp	.+16     	; 0x2194 <vfprintf+0x1f6>
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	07 2e       	mov	r0, r23
    218a:	00 0c       	add	r0, r0
    218c:	88 0b       	sbc	r24, r24
    218e:	99 0b       	sbc	r25, r25
    2190:	0e 5f       	subi	r16, 0xFE	; 254
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	f3 2d       	mov	r31, r3
    2196:	ff 76       	andi	r31, 0x6F	; 111
    2198:	3f 2e       	mov	r3, r31
    219a:	97 ff       	sbrs	r25, 7
    219c:	09 c0       	rjmp	.+18     	; 0x21b0 <vfprintf+0x212>
    219e:	90 95       	com	r25
    21a0:	80 95       	com	r24
    21a2:	70 95       	com	r23
    21a4:	61 95       	neg	r22
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8f 4f       	sbci	r24, 0xFF	; 255
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	f0 68       	ori	r31, 0x80	; 128
    21ae:	3f 2e       	mov	r3, r31
    21b0:	2a e0       	ldi	r18, 0x0A	; 10
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	a3 01       	movw	r20, r6
    21b6:	0e 94 12 12 	call	0x2424	; 0x2424 <__ultoa_invert>
    21ba:	88 2e       	mov	r8, r24
    21bc:	86 18       	sub	r8, r6
    21be:	45 c0       	rjmp	.+138    	; 0x224a <vfprintf+0x2ac>
    21c0:	85 37       	cpi	r24, 0x75	; 117
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <vfprintf+0x232>
    21c4:	23 2d       	mov	r18, r3
    21c6:	2f 7e       	andi	r18, 0xEF	; 239
    21c8:	b2 2e       	mov	r11, r18
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	25 c0       	rjmp	.+74     	; 0x221a <vfprintf+0x27c>
    21d0:	93 2d       	mov	r25, r3
    21d2:	99 7f       	andi	r25, 0xF9	; 249
    21d4:	b9 2e       	mov	r11, r25
    21d6:	8f 36       	cpi	r24, 0x6F	; 111
    21d8:	c1 f0       	breq	.+48     	; 0x220a <vfprintf+0x26c>
    21da:	18 f4       	brcc	.+6      	; 0x21e2 <vfprintf+0x244>
    21dc:	88 35       	cpi	r24, 0x58	; 88
    21de:	79 f0       	breq	.+30     	; 0x21fe <vfprintf+0x260>
    21e0:	b5 c0       	rjmp	.+362    	; 0x234c <vfprintf+0x3ae>
    21e2:	80 37       	cpi	r24, 0x70	; 112
    21e4:	19 f0       	breq	.+6      	; 0x21ec <vfprintf+0x24e>
    21e6:	88 37       	cpi	r24, 0x78	; 120
    21e8:	21 f0       	breq	.+8      	; 0x21f2 <vfprintf+0x254>
    21ea:	b0 c0       	rjmp	.+352    	; 0x234c <vfprintf+0x3ae>
    21ec:	e9 2f       	mov	r30, r25
    21ee:	e0 61       	ori	r30, 0x10	; 16
    21f0:	be 2e       	mov	r11, r30
    21f2:	b4 fe       	sbrs	r11, 4
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <vfprintf+0x272>
    21f6:	fb 2d       	mov	r31, r11
    21f8:	f4 60       	ori	r31, 0x04	; 4
    21fa:	bf 2e       	mov	r11, r31
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <vfprintf+0x272>
    21fe:	34 fe       	sbrs	r3, 4
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <vfprintf+0x278>
    2202:	29 2f       	mov	r18, r25
    2204:	26 60       	ori	r18, 0x06	; 6
    2206:	b2 2e       	mov	r11, r18
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <vfprintf+0x278>
    220a:	28 e0       	ldi	r18, 0x08	; 8
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	05 c0       	rjmp	.+10     	; 0x221a <vfprintf+0x27c>
    2210:	20 e1       	ldi	r18, 0x10	; 16
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <vfprintf+0x27c>
    2216:	20 e1       	ldi	r18, 0x10	; 16
    2218:	32 e0       	ldi	r19, 0x02	; 2
    221a:	f8 01       	movw	r30, r16
    221c:	b7 fe       	sbrs	r11, 7
    221e:	07 c0       	rjmp	.+14     	; 0x222e <vfprintf+0x290>
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0c 5f       	subi	r16, 0xFC	; 252
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	06 c0       	rjmp	.+12     	; 0x223a <vfprintf+0x29c>
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 5f       	subi	r16, 0xFE	; 254
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	a3 01       	movw	r20, r6
    223c:	0e 94 12 12 	call	0x2424	; 0x2424 <__ultoa_invert>
    2240:	88 2e       	mov	r8, r24
    2242:	86 18       	sub	r8, r6
    2244:	fb 2d       	mov	r31, r11
    2246:	ff 77       	andi	r31, 0x7F	; 127
    2248:	3f 2e       	mov	r3, r31
    224a:	36 fe       	sbrs	r3, 6
    224c:	0d c0       	rjmp	.+26     	; 0x2268 <vfprintf+0x2ca>
    224e:	23 2d       	mov	r18, r3
    2250:	2e 7f       	andi	r18, 0xFE	; 254
    2252:	a2 2e       	mov	r10, r18
    2254:	89 14       	cp	r8, r9
    2256:	58 f4       	brcc	.+22     	; 0x226e <vfprintf+0x2d0>
    2258:	34 fe       	sbrs	r3, 4
    225a:	0b c0       	rjmp	.+22     	; 0x2272 <vfprintf+0x2d4>
    225c:	32 fc       	sbrc	r3, 2
    225e:	09 c0       	rjmp	.+18     	; 0x2272 <vfprintf+0x2d4>
    2260:	83 2d       	mov	r24, r3
    2262:	8e 7e       	andi	r24, 0xEE	; 238
    2264:	a8 2e       	mov	r10, r24
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <vfprintf+0x2d4>
    2268:	b8 2c       	mov	r11, r8
    226a:	a3 2c       	mov	r10, r3
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <vfprintf+0x2d6>
    226e:	b8 2c       	mov	r11, r8
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <vfprintf+0x2d6>
    2272:	b9 2c       	mov	r11, r9
    2274:	a4 fe       	sbrs	r10, 4
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <vfprintf+0x2f8>
    2278:	fe 01       	movw	r30, r28
    227a:	e8 0d       	add	r30, r8
    227c:	f1 1d       	adc	r31, r1
    227e:	80 81       	ld	r24, Z
    2280:	80 33       	cpi	r24, 0x30	; 48
    2282:	21 f4       	brne	.+8      	; 0x228c <vfprintf+0x2ee>
    2284:	9a 2d       	mov	r25, r10
    2286:	99 7e       	andi	r25, 0xE9	; 233
    2288:	a9 2e       	mov	r10, r25
    228a:	09 c0       	rjmp	.+18     	; 0x229e <vfprintf+0x300>
    228c:	a2 fe       	sbrs	r10, 2
    228e:	06 c0       	rjmp	.+12     	; 0x229c <vfprintf+0x2fe>
    2290:	b3 94       	inc	r11
    2292:	b3 94       	inc	r11
    2294:	04 c0       	rjmp	.+8      	; 0x229e <vfprintf+0x300>
    2296:	8a 2d       	mov	r24, r10
    2298:	86 78       	andi	r24, 0x86	; 134
    229a:	09 f0       	breq	.+2      	; 0x229e <vfprintf+0x300>
    229c:	b3 94       	inc	r11
    229e:	a3 fc       	sbrc	r10, 3
    22a0:	11 c0       	rjmp	.+34     	; 0x22c4 <vfprintf+0x326>
    22a2:	a0 fe       	sbrs	r10, 0
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <vfprintf+0x314>
    22a6:	b2 14       	cp	r11, r2
    22a8:	88 f4       	brcc	.+34     	; 0x22cc <vfprintf+0x32e>
    22aa:	28 0c       	add	r2, r8
    22ac:	92 2c       	mov	r9, r2
    22ae:	9b 18       	sub	r9, r11
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <vfprintf+0x330>
    22b2:	b2 14       	cp	r11, r2
    22b4:	60 f4       	brcc	.+24     	; 0x22ce <vfprintf+0x330>
    22b6:	b6 01       	movw	r22, r12
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    22c0:	b3 94       	inc	r11
    22c2:	f7 cf       	rjmp	.-18     	; 0x22b2 <vfprintf+0x314>
    22c4:	b2 14       	cp	r11, r2
    22c6:	18 f4       	brcc	.+6      	; 0x22ce <vfprintf+0x330>
    22c8:	2b 18       	sub	r2, r11
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <vfprintf+0x332>
    22cc:	98 2c       	mov	r9, r8
    22ce:	21 2c       	mov	r2, r1
    22d0:	a4 fe       	sbrs	r10, 4
    22d2:	10 c0       	rjmp	.+32     	; 0x22f4 <vfprintf+0x356>
    22d4:	b6 01       	movw	r22, r12
    22d6:	80 e3       	ldi	r24, 0x30	; 48
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    22de:	a2 fe       	sbrs	r10, 2
    22e0:	17 c0       	rjmp	.+46     	; 0x2310 <vfprintf+0x372>
    22e2:	a1 fc       	sbrc	r10, 1
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x34e>
    22e6:	88 e7       	ldi	r24, 0x78	; 120
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <vfprintf+0x352>
    22ec:	88 e5       	ldi	r24, 0x58	; 88
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	b6 01       	movw	r22, r12
    22f2:	0c c0       	rjmp	.+24     	; 0x230c <vfprintf+0x36e>
    22f4:	8a 2d       	mov	r24, r10
    22f6:	86 78       	andi	r24, 0x86	; 134
    22f8:	59 f0       	breq	.+22     	; 0x2310 <vfprintf+0x372>
    22fa:	a1 fe       	sbrs	r10, 1
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <vfprintf+0x364>
    22fe:	8b e2       	ldi	r24, 0x2B	; 43
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <vfprintf+0x366>
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	a7 fc       	sbrc	r10, 7
    2306:	8d e2       	ldi	r24, 0x2D	; 45
    2308:	b6 01       	movw	r22, r12
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    2310:	89 14       	cp	r8, r9
    2312:	38 f4       	brcc	.+14     	; 0x2322 <vfprintf+0x384>
    2314:	b6 01       	movw	r22, r12
    2316:	80 e3       	ldi	r24, 0x30	; 48
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    231e:	9a 94       	dec	r9
    2320:	f7 cf       	rjmp	.-18     	; 0x2310 <vfprintf+0x372>
    2322:	8a 94       	dec	r8
    2324:	f3 01       	movw	r30, r6
    2326:	e8 0d       	add	r30, r8
    2328:	f1 1d       	adc	r31, r1
    232a:	80 81       	ld	r24, Z
    232c:	b6 01       	movw	r22, r12
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    2334:	81 10       	cpse	r8, r1
    2336:	f5 cf       	rjmp	.-22     	; 0x2322 <vfprintf+0x384>
    2338:	22 20       	and	r2, r2
    233a:	09 f4       	brne	.+2      	; 0x233e <vfprintf+0x3a0>
    233c:	42 ce       	rjmp	.-892    	; 0x1fc2 <vfprintf+0x24>
    233e:	b6 01       	movw	r22, r12
    2340:	80 e2       	ldi	r24, 0x20	; 32
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 d6 11 	call	0x23ac	; 0x23ac <fputc>
    2348:	2a 94       	dec	r2
    234a:	f6 cf       	rjmp	.-20     	; 0x2338 <vfprintf+0x39a>
    234c:	f6 01       	movw	r30, r12
    234e:	86 81       	ldd	r24, Z+6	; 0x06
    2350:	97 81       	ldd	r25, Z+7	; 0x07
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <vfprintf+0x3ba>
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	9f ef       	ldi	r25, 0xFF	; 255
    2358:	2b 96       	adiw	r28, 0x0b	; 11
    235a:	e2 e1       	ldi	r30, 0x12	; 18
    235c:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

00002360 <strnlen_P>:
    2360:	fc 01       	movw	r30, r24
    2362:	05 90       	lpm	r0, Z+
    2364:	61 50       	subi	r22, 0x01	; 1
    2366:	70 40       	sbci	r23, 0x00	; 0
    2368:	01 10       	cpse	r0, r1
    236a:	d8 f7       	brcc	.-10     	; 0x2362 <strnlen_P+0x2>
    236c:	80 95       	com	r24
    236e:	90 95       	com	r25
    2370:	8e 0f       	add	r24, r30
    2372:	9f 1f       	adc	r25, r31
    2374:	08 95       	ret

00002376 <strnlen>:
    2376:	fc 01       	movw	r30, r24
    2378:	61 50       	subi	r22, 0x01	; 1
    237a:	70 40       	sbci	r23, 0x00	; 0
    237c:	01 90       	ld	r0, Z+
    237e:	01 10       	cpse	r0, r1
    2380:	d8 f7       	brcc	.-10     	; 0x2378 <strnlen+0x2>
    2382:	80 95       	com	r24
    2384:	90 95       	com	r25
    2386:	8e 0f       	add	r24, r30
    2388:	9f 1f       	adc	r25, r31
    238a:	08 95       	ret

0000238c <strrev>:
    238c:	dc 01       	movw	r26, r24
    238e:	fc 01       	movw	r30, r24
    2390:	67 2f       	mov	r22, r23
    2392:	71 91       	ld	r23, Z+
    2394:	77 23       	and	r23, r23
    2396:	e1 f7       	brne	.-8      	; 0x2390 <strrev+0x4>
    2398:	32 97       	sbiw	r30, 0x02	; 2
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <strrev+0x18>
    239c:	7c 91       	ld	r23, X
    239e:	6d 93       	st	X+, r22
    23a0:	70 83       	st	Z, r23
    23a2:	62 91       	ld	r22, -Z
    23a4:	ae 17       	cp	r26, r30
    23a6:	bf 07       	cpc	r27, r31
    23a8:	c8 f3       	brcs	.-14     	; 0x239c <strrev+0x10>
    23aa:	08 95       	ret

000023ac <fputc>:
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	fb 01       	movw	r30, r22
    23b6:	23 81       	ldd	r18, Z+3	; 0x03
    23b8:	21 fd       	sbrc	r18, 1
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <fputc+0x16>
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	9f ef       	ldi	r25, 0xFF	; 255
    23c0:	2c c0       	rjmp	.+88     	; 0x241a <fputc+0x6e>
    23c2:	22 ff       	sbrs	r18, 2
    23c4:	16 c0       	rjmp	.+44     	; 0x23f2 <fputc+0x46>
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	24 81       	ldd	r18, Z+4	; 0x04
    23cc:	35 81       	ldd	r19, Z+5	; 0x05
    23ce:	42 17       	cp	r20, r18
    23d0:	53 07       	cpc	r21, r19
    23d2:	44 f4       	brge	.+16     	; 0x23e4 <fputc+0x38>
    23d4:	a0 81       	ld	r26, Z
    23d6:	b1 81       	ldd	r27, Z+1	; 0x01
    23d8:	9d 01       	movw	r18, r26
    23da:	2f 5f       	subi	r18, 0xFF	; 255
    23dc:	3f 4f       	sbci	r19, 0xFF	; 255
    23de:	31 83       	std	Z+1, r19	; 0x01
    23e0:	20 83       	st	Z, r18
    23e2:	8c 93       	st	X, r24
    23e4:	26 81       	ldd	r18, Z+6	; 0x06
    23e6:	37 81       	ldd	r19, Z+7	; 0x07
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	37 83       	std	Z+7, r19	; 0x07
    23ee:	26 83       	std	Z+6, r18	; 0x06
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <fputc+0x6e>
    23f2:	8b 01       	movw	r16, r22
    23f4:	ec 01       	movw	r28, r24
    23f6:	fb 01       	movw	r30, r22
    23f8:	00 84       	ldd	r0, Z+8	; 0x08
    23fa:	f1 85       	ldd	r31, Z+9	; 0x09
    23fc:	e0 2d       	mov	r30, r0
    23fe:	09 95       	icall
    2400:	89 2b       	or	r24, r25
    2402:	e1 f6       	brne	.-72     	; 0x23bc <fputc+0x10>
    2404:	d8 01       	movw	r26, r16
    2406:	16 96       	adiw	r26, 0x06	; 6
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	17 97       	sbiw	r26, 0x07	; 7
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	17 96       	adiw	r26, 0x07	; 7
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
    2416:	16 97       	sbiw	r26, 0x06	; 6
    2418:	ce 01       	movw	r24, r28
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret

00002424 <__ultoa_invert>:
    2424:	fa 01       	movw	r30, r20
    2426:	aa 27       	eor	r26, r26
    2428:	28 30       	cpi	r18, 0x08	; 8
    242a:	51 f1       	breq	.+84     	; 0x2480 <__ultoa_invert+0x5c>
    242c:	20 31       	cpi	r18, 0x10	; 16
    242e:	81 f1       	breq	.+96     	; 0x2490 <__ultoa_invert+0x6c>
    2430:	e8 94       	clt
    2432:	6f 93       	push	r22
    2434:	6e 7f       	andi	r22, 0xFE	; 254
    2436:	6e 5f       	subi	r22, 0xFE	; 254
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	8f 4f       	sbci	r24, 0xFF	; 255
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	af 4f       	sbci	r26, 0xFF	; 255
    2440:	b1 e0       	ldi	r27, 0x01	; 1
    2442:	3e d0       	rcall	.+124    	; 0x24c0 <__ultoa_invert+0x9c>
    2444:	b4 e0       	ldi	r27, 0x04	; 4
    2446:	3c d0       	rcall	.+120    	; 0x24c0 <__ultoa_invert+0x9c>
    2448:	67 0f       	add	r22, r23
    244a:	78 1f       	adc	r23, r24
    244c:	89 1f       	adc	r24, r25
    244e:	9a 1f       	adc	r25, r26
    2450:	a1 1d       	adc	r26, r1
    2452:	68 0f       	add	r22, r24
    2454:	79 1f       	adc	r23, r25
    2456:	8a 1f       	adc	r24, r26
    2458:	91 1d       	adc	r25, r1
    245a:	a1 1d       	adc	r26, r1
    245c:	6a 0f       	add	r22, r26
    245e:	71 1d       	adc	r23, r1
    2460:	81 1d       	adc	r24, r1
    2462:	91 1d       	adc	r25, r1
    2464:	a1 1d       	adc	r26, r1
    2466:	20 d0       	rcall	.+64     	; 0x24a8 <__ultoa_invert+0x84>
    2468:	09 f4       	brne	.+2      	; 0x246c <__ultoa_invert+0x48>
    246a:	68 94       	set
    246c:	3f 91       	pop	r19
    246e:	2a e0       	ldi	r18, 0x0A	; 10
    2470:	26 9f       	mul	r18, r22
    2472:	11 24       	eor	r1, r1
    2474:	30 19       	sub	r19, r0
    2476:	30 5d       	subi	r19, 0xD0	; 208
    2478:	31 93       	st	Z+, r19
    247a:	de f6       	brtc	.-74     	; 0x2432 <__ultoa_invert+0xe>
    247c:	cf 01       	movw	r24, r30
    247e:	08 95       	ret
    2480:	46 2f       	mov	r20, r22
    2482:	47 70       	andi	r20, 0x07	; 7
    2484:	40 5d       	subi	r20, 0xD0	; 208
    2486:	41 93       	st	Z+, r20
    2488:	b3 e0       	ldi	r27, 0x03	; 3
    248a:	0f d0       	rcall	.+30     	; 0x24aa <__ultoa_invert+0x86>
    248c:	c9 f7       	brne	.-14     	; 0x2480 <__ultoa_invert+0x5c>
    248e:	f6 cf       	rjmp	.-20     	; 0x247c <__ultoa_invert+0x58>
    2490:	46 2f       	mov	r20, r22
    2492:	4f 70       	andi	r20, 0x0F	; 15
    2494:	40 5d       	subi	r20, 0xD0	; 208
    2496:	4a 33       	cpi	r20, 0x3A	; 58
    2498:	18 f0       	brcs	.+6      	; 0x24a0 <__ultoa_invert+0x7c>
    249a:	49 5d       	subi	r20, 0xD9	; 217
    249c:	31 fd       	sbrc	r19, 1
    249e:	40 52       	subi	r20, 0x20	; 32
    24a0:	41 93       	st	Z+, r20
    24a2:	02 d0       	rcall	.+4      	; 0x24a8 <__ultoa_invert+0x84>
    24a4:	a9 f7       	brne	.-22     	; 0x2490 <__ultoa_invert+0x6c>
    24a6:	ea cf       	rjmp	.-44     	; 0x247c <__ultoa_invert+0x58>
    24a8:	b4 e0       	ldi	r27, 0x04	; 4
    24aa:	a6 95       	lsr	r26
    24ac:	97 95       	ror	r25
    24ae:	87 95       	ror	r24
    24b0:	77 95       	ror	r23
    24b2:	67 95       	ror	r22
    24b4:	ba 95       	dec	r27
    24b6:	c9 f7       	brne	.-14     	; 0x24aa <__ultoa_invert+0x86>
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	61 05       	cpc	r22, r1
    24bc:	71 05       	cpc	r23, r1
    24be:	08 95       	ret
    24c0:	9b 01       	movw	r18, r22
    24c2:	ac 01       	movw	r20, r24
    24c4:	0a 2e       	mov	r0, r26
    24c6:	06 94       	lsr	r0
    24c8:	57 95       	ror	r21
    24ca:	47 95       	ror	r20
    24cc:	37 95       	ror	r19
    24ce:	27 95       	ror	r18
    24d0:	ba 95       	dec	r27
    24d2:	c9 f7       	brne	.-14     	; 0x24c6 <__ultoa_invert+0xa2>
    24d4:	62 0f       	add	r22, r18
    24d6:	73 1f       	adc	r23, r19
    24d8:	84 1f       	adc	r24, r20
    24da:	95 1f       	adc	r25, r21
    24dc:	a0 1d       	adc	r26, r0
    24de:	08 95       	ret

000024e0 <eeprom_read_byte>:
    24e0:	f9 99       	sbic	0x1f, 1	; 31
    24e2:	fe cf       	rjmp	.-4      	; 0x24e0 <eeprom_read_byte>
    24e4:	92 bd       	out	0x22, r25	; 34
    24e6:	81 bd       	out	0x21, r24	; 33
    24e8:	f8 9a       	sbi	0x1f, 0	; 31
    24ea:	99 27       	eor	r25, r25
    24ec:	80 b5       	in	r24, 0x20	; 32
    24ee:	08 95       	ret

000024f0 <__prologue_saves__>:
    24f0:	2f 92       	push	r2
    24f2:	3f 92       	push	r3
    24f4:	4f 92       	push	r4
    24f6:	5f 92       	push	r5
    24f8:	6f 92       	push	r6
    24fa:	7f 92       	push	r7
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	ca 1b       	sub	r28, r26
    251a:	db 0b       	sbc	r29, r27
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	09 94       	ijmp

00002528 <__epilogue_restores__>:
    2528:	2a 88       	ldd	r2, Y+18	; 0x12
    252a:	39 88       	ldd	r3, Y+17	; 0x11
    252c:	48 88       	ldd	r4, Y+16	; 0x10
    252e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2530:	6e 84       	ldd	r6, Y+14	; 0x0e
    2532:	7d 84       	ldd	r7, Y+13	; 0x0d
    2534:	8c 84       	ldd	r8, Y+12	; 0x0c
    2536:	9b 84       	ldd	r9, Y+11	; 0x0b
    2538:	aa 84       	ldd	r10, Y+10	; 0x0a
    253a:	b9 84       	ldd	r11, Y+9	; 0x09
    253c:	c8 84       	ldd	r12, Y+8	; 0x08
    253e:	df 80       	ldd	r13, Y+7	; 0x07
    2540:	ee 80       	ldd	r14, Y+6	; 0x06
    2542:	fd 80       	ldd	r15, Y+5	; 0x05
    2544:	0c 81       	ldd	r16, Y+4	; 0x04
    2546:	1b 81       	ldd	r17, Y+3	; 0x03
    2548:	aa 81       	ldd	r26, Y+2	; 0x02
    254a:	b9 81       	ldd	r27, Y+1	; 0x01
    254c:	ce 0f       	add	r28, r30
    254e:	d1 1d       	adc	r29, r1
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	ed 01       	movw	r28, r26
    255c:	08 95       	ret

0000255e <_exit>:
    255e:	f8 94       	cli

00002560 <__stop_program>:
    2560:	ff cf       	rjmp	.-2      	; 0x2560 <__stop_program>
