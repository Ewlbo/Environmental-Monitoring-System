
EMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  0000255e  000025f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000255e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800252  00800252  00002744  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  000027e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004129  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017b8  00000000  00000000  00006c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002127  00000000  00000000  00008449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  0000a570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2c  00000000  00000000  0000ae04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f61  00000000  00000000  0000ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000e991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	bd 00       	.word	0x00bd	; ????
      6a:	d1 00       	.word	0x00d1	; ????
      6c:	fa 00       	.word	0x00fa	; ????
      6e:	23 01       	movw	r4, r6
      70:	4c 01       	movw	r8, r24
      72:	75 01       	movw	r14, r10
      74:	9e 01       	movw	r18, r28
      76:	bd 01       	movw	r22, r26
      78:	d0 01       	movw	r26, r0
      7a:	f9 01       	movw	r30, r18

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee e5       	ldi	r30, 0x5E	; 94
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 35       	cpi	r26, 0x52	; 82
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	a2 e5       	ldi	r26, 0x52	; 82
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 3f       	cpi	r26, 0xF9	; 249
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
      b2:	0c 94 ad 12 	jmp	0x255a	; 0x255a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <setup>:
		alert = false;
		break;
		case 1:
		alert = true;
		printf("Alert detected \r");
		break;
      ba:	2f ef       	ldi	r18, 0xFF	; 255
      bc:	84 e3       	ldi	r24, 0x34	; 52
      be:	9c e0       	ldi	r25, 0x0C	; 12
      c0:	21 50       	subi	r18, 0x01	; 1
      c2:	80 40       	sbci	r24, 0x00	; 0
      c4:	90 40       	sbci	r25, 0x00	; 0
      c6:	e1 f7       	brne	.-8      	; 0xc0 <setup+0x6>
      c8:	00 c0       	rjmp	.+0      	; 0xca <setup+0x10>
      ca:	00 00       	nop
      cc:	89 e2       	ldi	r24, 0x29	; 41
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
      d8:	8a e4       	ldi	r24, 0x4A	; 74
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	0e 94 2d 0a 	call	0x145a	; 0x145a <transmit>
      e0:	6a e2       	ldi	r22, 0x2A	; 42
      e2:	8a e2       	ldi	r24, 0x2A	; 42
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <eeprom_update_byte>
      ea:	38 98       	cbi	0x07, 0	; 7
      ec:	8a b1       	in	r24, 0x0a	; 10
      ee:	8c 60       	ori	r24, 0x0C	; 12
      f0:	8a b9       	out	0x0a, r24	; 10
      f2:	39 9a       	sbi	0x07, 1	; 7
      f4:	3a 9a       	sbi	0x07, 2	; 7
      f6:	f8 94       	cli
      f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      fc:	e1 e8       	ldi	r30, 0x81	; 129
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	10 82       	st	Z, r1
     102:	80 ef       	ldi	r24, 0xF0	; 240
     104:	9c e3       	ldi	r25, 0x3C	; 60
     106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     10e:	80 81       	ld	r24, Z
     110:	88 60       	ori	r24, 0x08	; 8
     112:	80 83       	st	Z, r24
     114:	80 81       	ld	r24, Z
     116:	81 60       	ori	r24, 0x01	; 1
     118:	80 83       	st	Z, r24
     11a:	80 81       	ld	r24, Z
     11c:	84 60       	ori	r24, 0x04	; 4
     11e:	80 83       	st	Z, r24
     120:	ef e6       	ldi	r30, 0x6F	; 111
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	82 60       	ori	r24, 0x02	; 2
     128:	80 83       	st	Z, r24
     12a:	80 e4       	ldi	r24, 0x40	; 64
     12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     130:	87 e8       	ldi	r24, 0x87	; 135
     132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     136:	78 94       	sei
     138:	8f e1       	ldi	r24, 0x1F	; 31
     13a:	9e e4       	ldi	r25, 0x4E	; 78
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <setup+0x82>
     140:	00 c0       	rjmp	.+0      	; 0x142 <setup+0x88>
     142:	00 00       	nop
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
     14c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__data_end+0x1>
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	41 f4       	brne	.+16     	; 0x164 <setup+0xaa>
     154:	89 e6       	ldi	r24, 0x69	; 105
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	9f 93       	push	r25
     15a:	8f 93       	push	r24
     15c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	08 95       	ret

00000166 <assignData>:
	}
}

void assignData(int dec, const char *hex, int place)
{
	switch(place)
     166:	fa 01       	movw	r30, r20
     168:	31 97       	sbiw	r30, 0x01	; 1
     16a:	ea 30       	cpi	r30, 0x0A	; 10
     16c:	f1 05       	cpc	r31, r1
     16e:	08 f0       	brcs	.+2      	; 0x172 <assignData+0xc>
     170:	52 c1       	rjmp	.+676    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     172:	ec 5c       	subi	r30, 0xCC	; 204
     174:	ff 4f       	sbci	r31, 0xFF	; 255
     176:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__tablejump2__>
	{
		case 1:		// ID
		if (dec<=15)
     17a:	40 97       	sbiw	r24, 0x10	; 16
     17c:	44 f4       	brge	.+16     	; 0x18e <assignData+0x28>
		{
			dataStream[0] = 48;			// 0
     17e:	e0 eb       	ldi	r30, 0xB0	; 176
     180:	f2 e0       	ldi	r31, 0x02	; 2
     182:	80 e3       	ldi	r24, 0x30	; 48
     184:	80 83       	st	Z, r24
			dataStream[1] = hex [0];
     186:	db 01       	movw	r26, r22
     188:	8c 91       	ld	r24, X
     18a:	81 83       	std	Z+1, r24	; 0x01
     18c:	08 95       	ret
		}
		else
		{
			dataStream[0] = hex [1];
     18e:	e0 eb       	ldi	r30, 0xB0	; 176
     190:	f2 e0       	ldi	r31, 0x02	; 2
     192:	db 01       	movw	r26, r22
     194:	11 96       	adiw	r26, 0x01	; 1
     196:	8c 91       	ld	r24, X
     198:	11 97       	sbiw	r26, 0x01	; 1
     19a:	80 83       	st	Z, r24
			dataStream[1] = hex [0];
     19c:	8c 91       	ld	r24, X
     19e:	81 83       	std	Z+1, r24	; 0x01
     1a0:	08 95       	ret
		}
		break;
		case 2:		// GAS
		if (dec<=15)
     1a2:	80 31       	cpi	r24, 0x10	; 16
     1a4:	91 05       	cpc	r25, r1
     1a6:	4c f4       	brge	.+18     	; 0x1ba <assignData+0x54>
		{
			dataStream[2] = 48;
     1a8:	e0 eb       	ldi	r30, 0xB0	; 176
     1aa:	f2 e0       	ldi	r31, 0x02	; 2
     1ac:	80 e3       	ldi	r24, 0x30	; 48
     1ae:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = 48;
     1b0:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1b2:	db 01       	movw	r26, r22
     1b4:	8c 91       	ld	r24, X
     1b6:	84 83       	std	Z+4, r24	; 0x04
     1b8:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     1ba:	40 97       	sbiw	r24, 0x10	; 16
     1bc:	80 3f       	cpi	r24, 0xF0	; 240
     1be:	91 05       	cpc	r25, r1
     1c0:	60 f4       	brcc	.+24     	; 0x1da <assignData+0x74>
		{
			dataStream[2] = 48;
     1c2:	e0 eb       	ldi	r30, 0xB0	; 176
     1c4:	f2 e0       	ldi	r31, 0x02	; 2
     1c6:	80 e3       	ldi	r24, 0x30	; 48
     1c8:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = hex [1];
     1ca:	db 01       	movw	r26, r22
     1cc:	11 96       	adiw	r26, 0x01	; 1
     1ce:	8c 91       	ld	r24, X
     1d0:	11 97       	sbiw	r26, 0x01	; 1
     1d2:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1d4:	8c 91       	ld	r24, X
     1d6:	84 83       	std	Z+4, r24	; 0x04
     1d8:	08 95       	ret
		}
		else
		{
			dataStream[2] = hex [2];
     1da:	fb 01       	movw	r30, r22
     1dc:	82 81       	ldd	r24, Z+2	; 0x02
     1de:	e0 eb       	ldi	r30, 0xB0	; 176
     1e0:	f2 e0       	ldi	r31, 0x02	; 2
     1e2:	82 83       	std	Z+2, r24	; 0x02
			dataStream[3] = hex [1];
     1e4:	db 01       	movw	r26, r22
     1e6:	11 96       	adiw	r26, 0x01	; 1
     1e8:	8c 91       	ld	r24, X
     1ea:	11 97       	sbiw	r26, 0x01	; 1
     1ec:	83 83       	std	Z+3, r24	; 0x03
			dataStream[4] = hex [0];
     1ee:	8c 91       	ld	r24, X
     1f0:	84 83       	std	Z+4, r24	; 0x04
     1f2:	08 95       	ret
		}
		break;
		case 3:		// CELL1
		if (dec<=15)
     1f4:	80 31       	cpi	r24, 0x10	; 16
     1f6:	91 05       	cpc	r25, r1
     1f8:	4c f4       	brge	.+18     	; 0x20c <assignData+0xa6>
		{
			dataStream[5] = 48;
     1fa:	e0 eb       	ldi	r30, 0xB0	; 176
     1fc:	f2 e0       	ldi	r31, 0x02	; 2
     1fe:	80 e3       	ldi	r24, 0x30	; 48
     200:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = 48;
     202:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     204:	db 01       	movw	r26, r22
     206:	8c 91       	ld	r24, X
     208:	87 83       	std	Z+7, r24	; 0x07
     20a:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     20c:	40 97       	sbiw	r24, 0x10	; 16
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	91 05       	cpc	r25, r1
     212:	60 f4       	brcc	.+24     	; 0x22c <assignData+0xc6>
		{
			dataStream[5] = 48;
     214:	e0 eb       	ldi	r30, 0xB0	; 176
     216:	f2 e0       	ldi	r31, 0x02	; 2
     218:	80 e3       	ldi	r24, 0x30	; 48
     21a:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = hex [1];
     21c:	db 01       	movw	r26, r22
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	8c 91       	ld	r24, X
     222:	11 97       	sbiw	r26, 0x01	; 1
     224:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     226:	8c 91       	ld	r24, X
     228:	87 83       	std	Z+7, r24	; 0x07
     22a:	08 95       	ret
		}
		else
		{
			dataStream[5] = hex [2];
     22c:	fb 01       	movw	r30, r22
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	e0 eb       	ldi	r30, 0xB0	; 176
     232:	f2 e0       	ldi	r31, 0x02	; 2
     234:	85 83       	std	Z+5, r24	; 0x05
			dataStream[6] = hex [1];
     236:	db 01       	movw	r26, r22
     238:	11 96       	adiw	r26, 0x01	; 1
     23a:	8c 91       	ld	r24, X
     23c:	11 97       	sbiw	r26, 0x01	; 1
     23e:	86 83       	std	Z+6, r24	; 0x06
			dataStream[7] = hex [0];
     240:	8c 91       	ld	r24, X
     242:	87 83       	std	Z+7, r24	; 0x07
     244:	08 95       	ret
		}
		break;
		case 4:		// CELL2
		if (dec<=15)
     246:	80 31       	cpi	r24, 0x10	; 16
     248:	91 05       	cpc	r25, r1
     24a:	4c f4       	brge	.+18     	; 0x25e <assignData+0xf8>
		{
			dataStream[8] = 48;
     24c:	e0 eb       	ldi	r30, 0xB0	; 176
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	80 e3       	ldi	r24, 0x30	; 48
     252:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = 48;
     254:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     256:	db 01       	movw	r26, r22
     258:	8c 91       	ld	r24, X
     25a:	82 87       	std	Z+10, r24	; 0x0a
     25c:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     25e:	40 97       	sbiw	r24, 0x10	; 16
     260:	80 3f       	cpi	r24, 0xF0	; 240
     262:	91 05       	cpc	r25, r1
     264:	60 f4       	brcc	.+24     	; 0x27e <assignData+0x118>
		{
			dataStream[8] = 48;
     266:	e0 eb       	ldi	r30, 0xB0	; 176
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	80 e3       	ldi	r24, 0x30	; 48
     26c:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = hex [1];
     26e:	db 01       	movw	r26, r22
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	8c 91       	ld	r24, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     278:	8c 91       	ld	r24, X
     27a:	82 87       	std	Z+10, r24	; 0x0a
     27c:	08 95       	ret
		}
		else
		{
			dataStream[8] = hex [2];
     27e:	fb 01       	movw	r30, r22
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	e0 eb       	ldi	r30, 0xB0	; 176
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 87       	std	Z+8, r24	; 0x08
			dataStream[9] = hex [1];
     288:	db 01       	movw	r26, r22
     28a:	11 96       	adiw	r26, 0x01	; 1
     28c:	8c 91       	ld	r24, X
     28e:	11 97       	sbiw	r26, 0x01	; 1
     290:	81 87       	std	Z+9, r24	; 0x09
			dataStream[10] = hex [0];
     292:	8c 91       	ld	r24, X
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	08 95       	ret
		}
		break;
		case 5:		// RAIN
		if (dec<=15)
     298:	80 31       	cpi	r24, 0x10	; 16
     29a:	91 05       	cpc	r25, r1
     29c:	4c f4       	brge	.+18     	; 0x2b0 <assignData+0x14a>
		{
			dataStream[11] = 48;
     29e:	e0 eb       	ldi	r30, 0xB0	; 176
     2a0:	f2 e0       	ldi	r31, 0x02	; 2
     2a2:	80 e3       	ldi	r24, 0x30	; 48
     2a4:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = 48;
     2a6:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     2a8:	db 01       	movw	r26, r22
     2aa:	8c 91       	ld	r24, X
     2ac:	85 87       	std	Z+13, r24	; 0x0d
     2ae:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     2b0:	40 97       	sbiw	r24, 0x10	; 16
     2b2:	80 3f       	cpi	r24, 0xF0	; 240
     2b4:	91 05       	cpc	r25, r1
     2b6:	60 f4       	brcc	.+24     	; 0x2d0 <assignData+0x16a>
		{
			dataStream[11] = 48;
     2b8:	e0 eb       	ldi	r30, 0xB0	; 176
     2ba:	f2 e0       	ldi	r31, 0x02	; 2
     2bc:	80 e3       	ldi	r24, 0x30	; 48
     2be:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = hex [1];
     2c0:	db 01       	movw	r26, r22
     2c2:	11 96       	adiw	r26, 0x01	; 1
     2c4:	8c 91       	ld	r24, X
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     2ca:	8c 91       	ld	r24, X
     2cc:	85 87       	std	Z+13, r24	; 0x0d
     2ce:	08 95       	ret
		}
		else
		{
			dataStream[11] = hex [2];
     2d0:	fb 01       	movw	r30, r22
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	e0 eb       	ldi	r30, 0xB0	; 176
     2d6:	f2 e0       	ldi	r31, 0x02	; 2
     2d8:	83 87       	std	Z+11, r24	; 0x0b
			dataStream[12] = hex [1];
     2da:	db 01       	movw	r26, r22
     2dc:	11 96       	adiw	r26, 0x01	; 1
     2de:	8c 91       	ld	r24, X
     2e0:	11 97       	sbiw	r26, 0x01	; 1
     2e2:	84 87       	std	Z+12, r24	; 0x0c
			dataStream[13] = hex [0];
     2e4:	8c 91       	ld	r24, X
     2e6:	85 87       	std	Z+13, r24	; 0x0d
     2e8:	08 95       	ret
		}
		break;
		case 6:		// LIGHT
		if (dec<=15)
     2ea:	80 31       	cpi	r24, 0x10	; 16
     2ec:	91 05       	cpc	r25, r1
     2ee:	4c f4       	brge	.+18     	; 0x302 <assignData+0x19c>
		{
			dataStream[14] = 48;
     2f0:	e0 eb       	ldi	r30, 0xB0	; 176
     2f2:	f2 e0       	ldi	r31, 0x02	; 2
     2f4:	80 e3       	ldi	r24, 0x30	; 48
     2f6:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = 48;
     2f8:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     2fa:	db 01       	movw	r26, r22
     2fc:	8c 91       	ld	r24, X
     2fe:	80 8b       	std	Z+16, r24	; 0x10
     300:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     302:	40 97       	sbiw	r24, 0x10	; 16
     304:	80 3f       	cpi	r24, 0xF0	; 240
     306:	91 05       	cpc	r25, r1
     308:	60 f4       	brcc	.+24     	; 0x322 <assignData+0x1bc>
		{
			dataStream[14] = 48;
     30a:	e0 eb       	ldi	r30, 0xB0	; 176
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = hex [1];
     312:	db 01       	movw	r26, r22
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	8c 91       	ld	r24, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     31c:	8c 91       	ld	r24, X
     31e:	80 8b       	std	Z+16, r24	; 0x10
     320:	08 95       	ret
		}
		else
		{
			dataStream[14] = hex [2];
     322:	fb 01       	movw	r30, r22
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	e0 eb       	ldi	r30, 0xB0	; 176
     328:	f2 e0       	ldi	r31, 0x02	; 2
     32a:	86 87       	std	Z+14, r24	; 0x0e
			dataStream[15] = hex [1];
     32c:	db 01       	movw	r26, r22
     32e:	11 96       	adiw	r26, 0x01	; 1
     330:	8c 91       	ld	r24, X
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	87 87       	std	Z+15, r24	; 0x0f
			dataStream[16] = hex [0];
     336:	8c 91       	ld	r24, X
     338:	80 8b       	std	Z+16, r24	; 0x10
     33a:	08 95       	ret
		}
		break;
		case 7:		// TEMP
		if (dec<0)
     33c:	99 23       	and	r25, r25
     33e:	3c f4       	brge	.+14     	; 0x34e <assignData+0x1e8>
		{
			dataStream[17] = 45;		// -
     340:	2d e2       	ldi	r18, 0x2D	; 45
     342:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <dataStream+0x11>
			dec = dec * (-1);
     346:	91 95       	neg	r25
     348:	81 95       	neg	r24
     34a:	91 09       	sbc	r25, r1
     34c:	03 c0       	rjmp	.+6      	; 0x354 <assignData+0x1ee>
		}
		else
		{
			dataStream[17] = 43;		// +
     34e:	2b e2       	ldi	r18, 0x2B	; 43
     350:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <dataStream+0x11>
		}
		if (dec<=15)
     354:	40 97       	sbiw	r24, 0x10	; 16
     356:	44 f4       	brge	.+16     	; 0x368 <assignData+0x202>
		{
			dataStream[18] = 48;
     358:	e0 eb       	ldi	r30, 0xB0	; 176
     35a:	f2 e0       	ldi	r31, 0x02	; 2
     35c:	80 e3       	ldi	r24, 0x30	; 48
     35e:	82 8b       	std	Z+18, r24	; 0x12
			dataStream[19] = hex [0];
     360:	db 01       	movw	r26, r22
     362:	8c 91       	ld	r24, X
     364:	83 8b       	std	Z+19, r24	; 0x13
     366:	08 95       	ret
		}
		else
		{
			dataStream[18] = hex [1];
     368:	fb 01       	movw	r30, r22
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	e0 eb       	ldi	r30, 0xB0	; 176
     36e:	f2 e0       	ldi	r31, 0x02	; 2
     370:	82 8b       	std	Z+18, r24	; 0x12
			dataStream[19] = hex [0];
     372:	db 01       	movw	r26, r22
     374:	8c 91       	ld	r24, X
     376:	83 8b       	std	Z+19, r24	; 0x13
     378:	08 95       	ret
		}
		break;
		case 8:		// HUM
		if (dec<=15)
     37a:	40 97       	sbiw	r24, 0x10	; 16
     37c:	44 f4       	brge	.+16     	; 0x38e <assignData+0x228>
		{
			dataStream[20] = 48;
     37e:	e0 eb       	ldi	r30, 0xB0	; 176
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	80 e3       	ldi	r24, 0x30	; 48
     384:	84 8b       	std	Z+20, r24	; 0x14
			dataStream[21] = hex [0];
     386:	db 01       	movw	r26, r22
     388:	8c 91       	ld	r24, X
     38a:	85 8b       	std	Z+21, r24	; 0x15
     38c:	08 95       	ret
		}
		else
		{
			dataStream[20] = hex [1];
     38e:	fb 01       	movw	r30, r22
     390:	81 81       	ldd	r24, Z+1	; 0x01
     392:	e0 eb       	ldi	r30, 0xB0	; 176
     394:	f2 e0       	ldi	r31, 0x02	; 2
     396:	84 8b       	std	Z+20, r24	; 0x14
			dataStream[21] = hex [0];
     398:	db 01       	movw	r26, r22
     39a:	8c 91       	ld	r24, X
     39c:	85 8b       	std	Z+21, r24	; 0x15
     39e:	08 95       	ret
		}
		break;
		case 9:		// PRESS
		if (dec<=15)
     3a0:	80 31       	cpi	r24, 0x10	; 16
     3a2:	91 05       	cpc	r25, r1
     3a4:	4c f4       	brge	.+18     	; 0x3b8 <assignData+0x252>
		{
			dataStream[22] = 48;
     3a6:	e0 eb       	ldi	r30, 0xB0	; 176
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	80 e3       	ldi	r24, 0x30	; 48
     3ac:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = 48;
     3ae:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3b0:	db 01       	movw	r26, r22
     3b2:	8c 91       	ld	r24, X
     3b4:	80 8f       	std	Z+24, r24	; 0x18
     3b6:	08 95       	ret
		}
		else if (dec>15 && dec<=255)
     3b8:	40 97       	sbiw	r24, 0x10	; 16
     3ba:	80 3f       	cpi	r24, 0xF0	; 240
     3bc:	91 05       	cpc	r25, r1
     3be:	60 f4       	brcc	.+24     	; 0x3d8 <assignData+0x272>
		{
			dataStream[22] = 48;
     3c0:	e0 eb       	ldi	r30, 0xB0	; 176
     3c2:	f2 e0       	ldi	r31, 0x02	; 2
     3c4:	80 e3       	ldi	r24, 0x30	; 48
     3c6:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = hex [1];
     3c8:	db 01       	movw	r26, r22
     3ca:	11 96       	adiw	r26, 0x01	; 1
     3cc:	8c 91       	ld	r24, X
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3d2:	8c 91       	ld	r24, X
     3d4:	80 8f       	std	Z+24, r24	; 0x18
     3d6:	08 95       	ret
		}
		else
		{
			dataStream[22] = hex [2];
     3d8:	fb 01       	movw	r30, r22
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	e0 eb       	ldi	r30, 0xB0	; 176
     3de:	f2 e0       	ldi	r31, 0x02	; 2
     3e0:	86 8b       	std	Z+22, r24	; 0x16
			dataStream[23] = hex [1];
     3e2:	db 01       	movw	r26, r22
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	8c 91       	ld	r24, X
     3e8:	11 97       	sbiw	r26, 0x01	; 1
     3ea:	87 8b       	std	Z+23, r24	; 0x17
			dataStream[24] = hex [0];
     3ec:	8c 91       	ld	r24, X
     3ee:	80 8f       	std	Z+24, r24	; 0x18
     3f0:	08 95       	ret
		}
		break;
		case 10:	// SPD
		if (dec<=15)
     3f2:	40 97       	sbiw	r24, 0x10	; 16
     3f4:	44 f4       	brge	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			dataStream[25] = 48;
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	80 e3       	ldi	r24, 0x30	; 48
     3fc:	81 8f       	std	Z+25, r24	; 0x19
			dataStream[26] = hex [0];
     3fe:	db 01       	movw	r26, r22
     400:	8c 91       	ld	r24, X
     402:	82 8f       	std	Z+26, r24	; 0x1a
     404:	08 95       	ret
		}
		else
		{
			dataStream[25] = hex [1];
     406:	fb 01       	movw	r30, r22
     408:	81 81       	ldd	r24, Z+1	; 0x01
     40a:	e0 eb       	ldi	r30, 0xB0	; 176
     40c:	f2 e0       	ldi	r31, 0x02	; 2
     40e:	81 8f       	std	Z+25, r24	; 0x19
			dataStream[26] = hex [0];
     410:	db 01       	movw	r26, r22
     412:	8c 91       	ld	r24, X
     414:	82 8f       	std	Z+26, r24	; 0x1a
     416:	08 95       	ret

00000418 <gatherData>:
	}
	
}

void gatherData(void)
{
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	00 d0       	rcall	.+0      	; 0x42a <gatherData+0x12>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
	printf("Function gatherData(); called\r");
     42e:	8a e7       	ldi	r24, 0x7A	; 122
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
	//int getRain = 250;
	//int getLight = 150;
	int pressf = 1005;
	int temp = 22;
	int getWindSpeed = 0;
	int8_t temperature = 0;
     43a:	19 82       	std	Y+1, r1	; 0x01
	int8_t hum = 0;
     43c:	1a 82       	std	Y+2, r1	; 0x02
	
	// ID
	uint8_t getID = eeprom_read_byte((uint8_t*)location);	// Get ID from EEPROM
     43e:	8a e2       	ldi	r24, 0x2A	; 42
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <eeprom_read_byte>
	intToHex(getID);										// Transform it to HEX
     446:	08 2f       	mov	r16, r24
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getID,hex,1);								// Assign to dataStream
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	68 ee       	ldi	r22, 0xE8	; 232
     456:	72 e0       	ldi	r23, 0x02	; 2
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// GAS SENSOR
	int getGas = readGas();
     45e:	0e 94 07 0a 	call	0x140e	; 0x140e <readGas>
     462:	8c 01       	movw	r16, r24
	intToHex(getGas);
     464:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getGas,hex,2);
     468:	42 e0       	ldi	r20, 0x02	; 2
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	68 ee       	ldi	r22, 0xE8	; 232
     46e:	72 e0       	ldi	r23, 0x02	; 2
     470:	c8 01       	movw	r24, r16
     472:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// CELL1
	//int getCell1 = readCell1();
	intToHex(getCell1);
     476:	87 e3       	ldi	r24, 0x37	; 55
     478:	93 e0       	ldi	r25, 0x03	; 3
     47a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getCell1,hex,3);
     47e:	43 e0       	ldi	r20, 0x03	; 3
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	68 ee       	ldi	r22, 0xE8	; 232
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	87 e3       	ldi	r24, 0x37	; 55
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// CELL2
	//int getCell2 = readCell1();
	intToHex(getCell2);
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getCell2,hex,4);
     496:	44 e0       	ldi	r20, 0x04	; 4
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	68 ee       	ldi	r22, 0xE8	; 232
     49c:	72 e0       	ldi	r23, 0x02	; 2
     49e:	80 e2       	ldi	r24, 0x20	; 32
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// RAIN SENSOR
	int getRain = readCapacitance();
     4a6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <readCapacitance>
     4aa:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fixsfsi>
     4ae:	6b 01       	movw	r12, r22
     4b0:	7c 01       	movw	r14, r24
	intToHex(getRain);
     4b2:	cb 01       	movw	r24, r22
     4b4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getRain,hex,5);
     4b8:	45 e0       	ldi	r20, 0x05	; 5
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	68 ee       	ldi	r22, 0xE8	; 232
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	c6 01       	movw	r24, r12
     4c2:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// LIGHT SENSOR
	int getLight = readLight();
     4c6:	0e 94 b2 09 	call	0x1364	; 0x1364 <readLight>
     4ca:	8c 01       	movw	r16, r24
	intToHex(getLight);
     4cc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getLight,hex,6);
     4d0:	46 e0       	ldi	r20, 0x06	; 6
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	68 ee       	ldi	r22, 0xE8	; 232
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	c8 01       	movw	r24, r16
     4da:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	//uint32_t hum;
	//BME280_readout(&temp, &press, &hum);
	
	// TEMPERATURE
	//int temp = bmp085_gettemperature();
	intToHex(temp);
     4de:	86 e1       	ldi	r24, 0x16	; 22
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(temp,hex,7);
     4e6:	47 e0       	ldi	r20, 0x07	; 7
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	68 ee       	ldi	r22, 0xE8	; 232
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	86 e1       	ldi	r24, 0x16	; 22
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// HUMIDITY
	dht_gettemperaturehumidity(&temperature, &hum);
     4f6:	be 01       	movw	r22, r28
     4f8:	6e 5f       	subi	r22, 0xFE	; 254
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	0e 94 28 09 	call	0x1250	; 0x1250 <dht_gettemperaturehumidity>
	intToHex(hum);
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	08 2e       	mov	r0, r24
     508:	00 0c       	add	r0, r0
     50a:	99 0b       	sbc	r25, r25
     50c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(hum,hex,8);
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	48 e0       	ldi	r20, 0x08	; 8
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	68 ee       	ldi	r22, 0xE8	; 232
     518:	72 e0       	ldi	r23, 0x02	; 2
     51a:	08 2e       	mov	r0, r24
     51c:	00 0c       	add	r0, r0
     51e:	99 0b       	sbc	r25, r25
     520:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     524:	8f e1       	ldi	r24, 0x1F	; 31
     526:	9e e4       	ldi	r25, 0x4E	; 78
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <gatherData+0x110>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <gatherData+0x116>
     52e:	00 00       	nop
	_delay_ms(10);
	
	// PRESSURE
	//long press = bmp085_getpressure();
	//int pressf = press/100;
	intToHex(pressf);
     530:	8d ee       	ldi	r24, 0xED	; 237
     532:	93 e0       	ldi	r25, 0x03	; 3
     534:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(pressf,hex,9);
     538:	49 e0       	ldi	r20, 0x09	; 9
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	68 ee       	ldi	r22, 0xE8	; 232
     53e:	72 e0       	ldi	r23, 0x02	; 2
     540:	8d ee       	ldi	r24, 0xED	; 237
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// WIND SPEED
	//int getWindSpeed = readWindSpeed();
	intToHex(getWindSpeed);
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <intToHex>
	assignData(getWindSpeed,hex,10);
     550:	4a e0       	ldi	r20, 0x0A	; 10
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	68 ee       	ldi	r22, 0xE8	; 232
     556:	72 e0       	ldi	r23, 0x02	; 2
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 b3 00 	call	0x166	; 0x166 <assignData>
	
	// WIND DIRECTION
	windDirection();
     560:	0e 94 6d 0b 	call	0x16da	; 0x16da <windDirection>

	printf("Datastream: %s\r",dataStream);
     564:	80 eb       	ldi	r24, 0xB0	; 176
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	89 e9       	ldi	r24, 0x99	; 153
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	08 95       	ret

0000059a <main>:
int sec = 0;
int alert = false;

int main(void)
{
	ioinit();			// Init. UART
     59a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ioinit>
	setup();			// Init. setup
     59e:	0e 94 5d 00 	call	0xba	; 0xba <setup>
	bmp085_init();
     5a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <bmp085_init>
	
	while(1)
	{
		gatherData();
     5a6:	0e 94 0c 02 	call	0x418	; 0x418 <gatherData>
		transmit(dataStream);
     5aa:	80 eb       	ldi	r24, 0xB0	; 176
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 2d 0a 	call	0x145a	; 0x145a <transmit>
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	89 e6       	ldi	r24, 0x69	; 105
     5b6:	98 e1       	ldi	r25, 0x18	; 24
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <main+0x1e>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <main+0x28>
     5c2:	00 00       	nop
     5c4:	f0 cf       	rjmp	.-32     	; 0x5a6 <main+0xc>

000005c6 <realTime>:
	printf("Datastream: %s\r",dataStream);
}

void realTime(void)
{
	alert = true;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__data_end+0x1>
     5ce:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end>
	printf("Realtime data enabled\r");
     5d2:	89 ea       	ldi	r24, 0xA9	; 169
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
	gatherData();
     5de:	0e 94 0c 02 	call	0x418	; 0x418 <gatherData>
     5e2:	8f e1       	ldi	r24, 0x1F	; 31
     5e4:	9e e4       	ldi	r25, 0x4E	; 78
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <realTime+0x20>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <realTime+0x26>
     5ec:	00 00       	nop
	_delay_ms(10);
	transmit(dataStream);
     5ee:	80 eb       	ldi	r24, 0xB0	; 176
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 2d 0a 	call	0x145a	; 0x145a <transmit>
}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	08 95       	ret

000005fc <__vector_11>:
		break;
	}
}

ISR(TIMER1_COMPA_vect)  // timer0 overflow interrupt
{
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	2f 93       	push	r18
     608:	3f 93       	push	r19
     60a:	4f 93       	push	r20
     60c:	5f 93       	push	r21
     60e:	6f 93       	push	r22
     610:	7f 93       	push	r23
     612:	8f 93       	push	r24
     614:	9f 93       	push	r25
     616:	af 93       	push	r26
     618:	bf 93       	push	r27
     61a:	ef 93       	push	r30
     61c:	ff 93       	push	r31
	int gas = readGas();
     61e:	0e 94 07 0a 	call	0x140e	; 0x140e <readGas>
	if (gas>500)
     622:	85 3f       	cpi	r24, 0xF5	; 245
     624:	91 40       	sbci	r25, 0x01	; 1
     626:	34 f0       	brlt	.+12     	; 0x634 <__vector_11+0x38>
	{
		printf("Gas detected\n");
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <puts>
		realTime();
     630:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <realTime>
	}
}
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     656:	fc 01       	movw	r30, r24
     658:	a6 2f       	mov	r26, r22
     65a:	b7 2f       	mov	r27, r23
     65c:	9c 01       	movw	r18, r24
     65e:	2b 5f       	subi	r18, 0xFB	; 251
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	91 91       	ld	r25, Z+
     664:	9d 93       	st	X+, r25
     666:	e2 17       	cp	r30, r18
     668:	f3 07       	cpc	r31, r19
     66a:	d9 f7       	brne	.-10     	; 0x662 <copy_address+0xc>
     66c:	08 95       	ret

0000066e <nRF24L01_init>:
     66e:	80 e1       	ldi	r24, 0x10	; 16
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <malloc>
     676:	20 e1       	ldi	r18, 0x10	; 16
     678:	fc 01       	movw	r30, r24
     67a:	11 92       	st	Z+, r1
     67c:	2a 95       	dec	r18
     67e:	e9 f7       	brne	.-6      	; 0x67a <nRF24L01_init+0xc>
     680:	08 95       	ret

00000682 <nRF24L01_send_command>:
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
     688:	da 01       	movw	r26, r20
     68a:	e8 81       	ld	r30, Y
     68c:	f9 81       	ldd	r31, Y+1	; 0x01
     68e:	50 81       	ld	r21, Z
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0a 80       	ldd	r0, Y+2	; 0x02
     696:	02 c0       	rjmp	.+4      	; 0x69c <nRF24L01_send_command+0x1a>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <nRF24L01_send_command+0x16>
     6a0:	80 95       	com	r24
     6a2:	85 23       	and	r24, r21
     6a4:	80 83       	st	Z, r24
     6a6:	6e bd       	out	0x2e, r22	; 46
     6a8:	0d b4       	in	r0, 0x2d	; 45
     6aa:	07 fe       	sbrs	r0, 7
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <nRF24L01_send_command+0x26>
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	8f 87       	std	Y+15, r24	; 0x0f
     6b2:	21 15       	cp	r18, r1
     6b4:	31 05       	cpc	r19, r1
     6b6:	79 f0       	breq	.+30     	; 0x6d6 <nRF24L01_send_command+0x54>
     6b8:	fd 01       	movw	r30, r26
     6ba:	2a 0f       	add	r18, r26
     6bc:	3b 1f       	adc	r19, r27
     6be:	df 01       	movw	r26, r30
     6c0:	90 81       	ld	r25, Z
     6c2:	9e bd       	out	0x2e, r25	; 46
     6c4:	0d b4       	in	r0, 0x2d	; 45
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <nRF24L01_send_command+0x42>
     6ca:	9e b5       	in	r25, 0x2e	; 46
     6cc:	9c 93       	st	X, r25
     6ce:	31 96       	adiw	r30, 0x01	; 1
     6d0:	e2 17       	cp	r30, r18
     6d2:	f3 07       	cpc	r31, r19
     6d4:	a1 f7       	brne	.-24     	; 0x6be <nRF24L01_send_command+0x3c>
     6d6:	e8 81       	ld	r30, Y
     6d8:	f9 81       	ldd	r31, Y+1	; 0x01
     6da:	20 81       	ld	r18, Z
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0a 80       	ldd	r0, Y+2	; 0x02
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <nRF24L01_send_command+0x66>
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	0a 94       	dec	r0
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <nRF24L01_send_command+0x62>
     6ec:	82 2b       	or	r24, r18
     6ee:	80 83       	st	Z, r24
     6f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <nRF24L01_write_register>:
     6f8:	60 62       	ori	r22, 0x20	; 32
     6fa:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
     6fe:	08 95       	ret

00000700 <nRF24L01_read_register>:
     700:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
     704:	08 95       	ret

00000706 <nRF24L01_flush_transmit_message>:
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	61 ee       	ldi	r22, 0xE1	; 225
     710:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
     714:	08 95       	ret

00000716 <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	1f 92       	push	r1
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     720:	20 e7       	ldi	r18, 0x70	; 112
     722:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	ae 01       	movw	r20, r28
     72a:	4f 5f       	subi	r20, 0xFF	; 255
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	67 e0       	ldi	r22, 0x07	; 7
     730:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
}
     734:	0f 90       	pop	r0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	1f 92       	push	r1
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     74e:	dc 01       	movw	r26, r24
     750:	ed 91       	ld	r30, X+
     752:	fc 91       	ld	r31, X
     754:	11 97       	sbiw	r26, 0x01	; 1
     756:	42 91       	ld	r20, -Z
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9c 01       	movw	r18, r24
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	0c 90       	ld	r0, X
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	02 c0       	rjmp	.+4      	; 0x76a <nRF24L01_begin+0x2e>
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <nRF24L01_begin+0x2a>
     76e:	24 2b       	or	r18, r20
     770:	20 83       	st	Z, r18
     772:	13 96       	adiw	r26, 0x03	; 3
     774:	ed 91       	ld	r30, X+
     776:	fc 91       	ld	r31, X
     778:	14 97       	sbiw	r26, 0x04	; 4
     77a:	42 91       	ld	r20, -Z
     77c:	9c 01       	movw	r18, r24
     77e:	15 96       	adiw	r26, 0x05	; 5
     780:	0c 90       	ld	r0, X
     782:	15 97       	sbiw	r26, 0x05	; 5
     784:	02 c0       	rjmp	.+4      	; 0x78a <nRF24L01_begin+0x4e>
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	0a 94       	dec	r0
     78c:	e2 f7       	brpl	.-8      	; 0x786 <nRF24L01_begin+0x4a>
     78e:	24 2b       	or	r18, r20
     790:	20 83       	st	Z, r18
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     798:	40 81       	ld	r20, Z
     79a:	9c 01       	movw	r18, r24
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	0c 90       	ld	r0, X
     7a0:	12 97       	sbiw	r26, 0x02	; 2
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <nRF24L01_begin+0x6c>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <nRF24L01_begin+0x68>
     7ac:	24 2b       	or	r18, r20
     7ae:	20 83       	st	Z, r18
     7b0:	13 96       	adiw	r26, 0x03	; 3
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
     7b8:	30 81       	ld	r19, Z
     7ba:	ac 01       	movw	r20, r24
     7bc:	15 96       	adiw	r26, 0x05	; 5
     7be:	0c 90       	ld	r0, X
     7c0:	15 97       	sbiw	r26, 0x05	; 5
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <nRF24L01_begin+0x8c>
     7c4:	44 0f       	add	r20, r20
     7c6:	55 1f       	adc	r21, r21
     7c8:	0a 94       	dec	r0
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <nRF24L01_begin+0x88>
     7cc:	24 2f       	mov	r18, r20
     7ce:	20 95       	com	r18
     7d0:	23 23       	and	r18, r19
     7d2:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
     7d4:	2c b5       	in	r18, 0x2c	; 44
     7d6:	20 61       	ori	r18, 0x10	; 16
     7d8:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
     7da:	2c b5       	in	r18, 0x2c	; 44
     7dc:	20 64       	ori	r18, 0x40	; 64
     7de:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     7e0:	16 96       	adiw	r26, 0x06	; 6
     7e2:	ed 91       	ld	r30, X+
     7e4:	fc 91       	ld	r31, X
     7e6:	17 97       	sbiw	r26, 0x07	; 7
     7e8:	42 91       	ld	r20, -Z
     7ea:	9c 01       	movw	r18, r24
     7ec:	18 96       	adiw	r26, 0x08	; 8
     7ee:	0c 90       	ld	r0, X
     7f0:	18 97       	sbiw	r26, 0x08	; 8
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <nRF24L01_begin+0xbc>
     7f4:	22 0f       	add	r18, r18
     7f6:	33 1f       	adc	r19, r19
     7f8:	0a 94       	dec	r0
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <nRF24L01_begin+0xb8>
     7fc:	24 2b       	or	r18, r20
     7fe:	20 83       	st	Z, r18
     800:	19 96       	adiw	r26, 0x09	; 9
     802:	ed 91       	ld	r30, X+
     804:	fc 91       	ld	r31, X
     806:	1a 97       	sbiw	r26, 0x0a	; 10
     808:	42 91       	ld	r20, -Z
     80a:	9c 01       	movw	r18, r24
     80c:	1b 96       	adiw	r26, 0x0b	; 11
     80e:	0c 90       	ld	r0, X
     810:	1b 97       	sbiw	r26, 0x0b	; 11
     812:	02 c0       	rjmp	.+4      	; 0x818 <nRF24L01_begin+0xdc>
     814:	22 0f       	add	r18, r18
     816:	33 1f       	adc	r19, r19
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <nRF24L01_begin+0xd8>
     81c:	24 2b       	or	r18, r20
     81e:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
     820:	1c 96       	adiw	r26, 0x0c	; 12
     822:	ed 91       	ld	r30, X+
     824:	fc 91       	ld	r31, X
     826:	1d 97       	sbiw	r26, 0x0d	; 13
     828:	22 91       	ld	r18, -Z
     82a:	1e 96       	adiw	r26, 0x0e	; 14
     82c:	0c 90       	ld	r0, X
     82e:	02 c0       	rjmp	.+4      	; 0x834 <nRF24L01_begin+0xf8>
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	0a 94       	dec	r0
     836:	e2 f7       	brpl	.-8      	; 0x830 <nRF24L01_begin+0xf4>
     838:	80 95       	com	r24
     83a:	82 23       	and	r24, r18
     83c:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
     83e:	8c b5       	in	r24, 0x2c	; 44
     840:	87 7f       	andi	r24, 0xF7	; 247
     842:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
     844:	8c b5       	in	r24, 0x2c	; 44
     846:	8b 7f       	andi	r24, 0xFB	; 251
     848:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
     84a:	8c b5       	in	r24, 0x2c	; 44
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
     850:	8c b5       	in	r24, 0x2c	; 44
     852:	8d 7f       	andi	r24, 0xFD	; 253
     854:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
     856:	8d b5       	in	r24, 0x2d	; 45
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
     85c:	8c b5       	in	r24, 0x2c	; 44
     85e:	8f 7d       	andi	r24, 0xDF	; 223
     860:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	62 ee       	ldi	r22, 0xE2	; 226
     86c:	c8 01       	movw	r24, r16
     86e:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	61 ee       	ldi	r22, 0xE1	; 225
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
     882:	c8 01       	movw	r24, r16
     884:	0e 94 8b 03 	call	0x716	; 0x716 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     888:	8f e0       	ldi	r24, 0x0F	; 15
     88a:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	ae 01       	movw	r20, r28
     892:	4f 5f       	subi	r20, 0xFF	; 255
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
     89e:	0f 2e       	mov	r0, r31
     8a0:	ff e3       	ldi	r31, 0x3F	; 63
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	ae 01       	movw	r20, r28
     8ae:	4f 5f       	subi	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
     8ba:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	ae 01       	movw	r20, r28
     8c2:	4f 5f       	subi	r20, 0xFF	; 255
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	6c e1       	ldi	r22, 0x1C	; 28
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	ae 01       	movw	r20, r28
     8d8:	4f 5f       	subi	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	6d e1       	ldi	r22, 0x1D	; 29
     8de:	c8 01       	movw	r24, r16
     8e0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
     8e4:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	ae 01       	movw	r20, r28
     8ec:	4f 5f       	subi	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	62 e0       	ldi	r22, 0x02	; 2
     8f2:	c8 01       	movw	r24, r16
     8f4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>

	    // disable all rx addresses
    data = 0;
     8f8:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	ae 01       	movw	r20, r28
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	62 e0       	ldi	r22, 0x02	; 2
     906:	c8 01       	movw	r24, r16
     908:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
    
	// Set RF channel
    data = 0x40;
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, RF_CH, &data, 1);	
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	ae 01       	movw	r20, r28
     916:	4f 5f       	subi	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	65 e0       	ldi	r22, 0x05	; 5
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
	/*
	uncomment Set to 1MBPS
	data = 0;
	nRF24L01_write_register(rf, RF_DR_HIGH, &data, 1)
	*/
}
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	08 95       	ret

00000930 <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	1f 92       	push	r1
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
     93a:	20 e3       	ldi	r18, 0x30	; 48
     93c:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	ae 01       	movw	r20, r28
     944:	4f 5f       	subi	r20, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	67 e0       	ldi	r22, 0x07	; 7
     94a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
}
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	00 d0       	rcall	.+0      	; 0x968 <nRF24L01_transmit+0x12>
     968:	00 d0       	rcall	.+0      	; 0x96a <nRF24L01_transmit+0x14>
     96a:	00 d0       	rcall	.+0      	; 0x96c <nRF24L01_transmit+0x16>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	8c 01       	movw	r16, r24
     972:	6b 01       	movw	r12, r22
     974:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
     976:	0e 94 98 04 	call	0x930	; 0x930 <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	c6 01       	movw	r24, r12
     982:	0e 94 2b 03 	call	0x656	; 0x656 <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
     986:	25 e0       	ldi	r18, 0x05	; 5
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	ae 01       	movw	r20, r28
     98c:	4f 5f       	subi	r20, 0xFF	; 255
     98e:	5f 4f       	sbci	r21, 0xFF	; 255
     990:	60 e1       	ldi	r22, 0x10	; 16
     992:	c8 01       	movw	r24, r16
     994:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
     998:	be 01       	movw	r22, r28
     99a:	6f 5f       	subi	r22, 0xFF	; 255
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	c6 01       	movw	r24, r12
     9a0:	0e 94 2b 03 	call	0x656	; 0x656 <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
     9a4:	25 e0       	ldi	r18, 0x05	; 5
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	ae 01       	movw	r20, r28
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	6a e0       	ldi	r22, 0x0A	; 10
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
     9b6:	d7 01       	movw	r26, r14
     9b8:	92 96       	adiw	r26, 0x22	; 34
     9ba:	2c 91       	ld	r18, X
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	a7 01       	movw	r20, r14
     9c0:	4e 5f       	subi	r20, 0xFE	; 254
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	60 ea       	ldi	r22, 0xA0	; 160
     9c6:	c8 01       	movw	r24, r16
     9c8:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	ae 01       	movw	r20, r28
     9d2:	4a 5f       	subi	r20, 0xFA	; 250
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	c8 01       	movw	r24, r16
     9da:	0e 94 80 03 	call	0x700	; 0x700 <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
     9de:	8e 81       	ldd	r24, Y+6	; 0x06
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	ae 01       	movw	r20, r28
     9ea:	4a 5f       	subi	r20, 0xFA	; 250
     9ec:	5f 4f       	sbci	r21, 0xFF	; 255
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nRF24L01_write_register>
     9f6:	d8 01       	movw	r26, r16
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     a00:	20 81       	ld	r18, Z
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	15 96       	adiw	r26, 0x05	; 5
     a08:	0c 90       	ld	r0, X
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <nRF24L01_transmit+0xba>
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	0a 94       	dec	r0
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <nRF24L01_transmit+0xb6>
     a14:	82 2b       	or	r24, r18
     a16:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     a18:	26 96       	adiw	r28, 0x06	; 6
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	08 95       	ret

00000a36 <enableChannel>:
#include "../header.h"


void enableChannel(int ch)
{
	PORTD &= ~(PD4);
     a36:	5a 98       	cbi	0x0b, 2	; 11
	switch(ch)
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	91 05       	cpc	r25, r1
     a3c:	71 f0       	breq	.+28     	; 0xa5a <enableChannel+0x24>
     a3e:	1c f4       	brge	.+6      	; 0xa46 <enableChannel+0x10>
     a40:	89 2b       	or	r24, r25
     a42:	39 f0       	breq	.+14     	; 0xa52 <enableChannel+0x1c>
     a44:	08 95       	ret
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	91 05       	cpc	r25, r1
     a4a:	51 f0       	breq	.+20     	; 0xa60 <enableChannel+0x2a>
     a4c:	03 97       	sbiw	r24, 0x03	; 3
     a4e:	59 f0       	breq	.+22     	; 0xa66 <enableChannel+0x30>
     a50:	08 95       	ret
	{
		case 0:
		PORTD &= ~(S0 | S1);	// All LOW (check flowchart and/or datasheet for select pin states)
     a52:	8b b1       	in	r24, 0x0b	; 11
     a54:	83 7f       	andi	r24, 0xF3	; 243
     a56:	8b b9       	out	0x0b, r24	; 11
		break;
     a58:	08 95       	ret
		case 1:
		PORTD |= S0;
     a5a:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(S1);
     a5c:	5b 98       	cbi	0x0b, 3	; 11
		break;
     a5e:	08 95       	ret
		case 2:
		PORTD |= S1;
     a60:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(S0);
     a62:	5a 98       	cbi	0x0b, 2	; 11
		break;
     a64:	08 95       	ret
		case 3:
		PORTD |= (S0 | S1);
     a66:	8b b1       	in	r24, 0x0b	; 11
     a68:	8c 60       	ori	r24, 0x0C	; 12
     a6a:	8b b9       	out	0x0b, r24	; 11
     a6c:	08 95       	ret

00000a6e <bmp085_writemem>:
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
}
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	d8 2f       	mov	r29, r24
     a74:	c6 2f       	mov	r28, r22
     a76:	8e ee       	ldi	r24, 0xEE	; 238
     a78:	0e 94 56 09 	call	0x12ac	; 0x12ac <i2c_start_wait>
     a7c:	8d 2f       	mov	r24, r29
     a7e:	0e 94 8a 09 	call	0x1314	; 0x1314 <i2c_write>
     a82:	8c 2f       	mov	r24, r28
     a84:	0e 94 8a 09 	call	0x1314	; 0x1314 <i2c_write>
     a88:	0e 94 81 09 	call	0x1302	; 0x1302 <i2c_stop>
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <bmp085_readmem>:
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	c8 2f       	mov	r28, r24
     aa4:	f6 2e       	mov	r15, r22
     aa6:	d7 2f       	mov	r29, r23
     aa8:	e4 2e       	mov	r14, r20
     aaa:	8e ee       	ldi	r24, 0xEE	; 238
     aac:	0e 94 56 09 	call	0x12ac	; 0x12ac <i2c_start_wait>
     ab0:	8c 2f       	mov	r24, r28
     ab2:	0e 94 8a 09 	call	0x1314	; 0x1314 <i2c_write>
     ab6:	8f ee       	ldi	r24, 0xEF	; 239
     ab8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <i2c_rep_start>
     abc:	ee 20       	and	r14, r14
     abe:	09 f1       	breq	.+66     	; 0xb02 <bmp085_readmem+0x70>
     ac0:	0f 2d       	mov	r16, r15
     ac2:	1d 2f       	mov	r17, r29
     ac4:	cc 24       	eor	r12, r12
     ac6:	ca 94       	dec	r12
     ac8:	ce 0c       	add	r12, r14
     aca:	d1 2c       	mov	r13, r1
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	c8 1a       	sub	r12, r24
     ad0:	d8 0a       	sbc	r13, r24
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	f1 2c       	mov	r15, r1
     ad8:	e1 e0       	ldi	r30, 0x01	; 1
     ada:	ee 1a       	sub	r14, r30
     adc:	f1 08       	sbc	r15, r1
     ade:	ec 16       	cp	r14, r28
     ae0:	fd 06       	cpc	r15, r29
     ae2:	29 f4       	brne	.+10     	; 0xaee <bmp085_readmem+0x5c>
     ae4:	0e 94 a7 09 	call	0x134e	; 0x134e <i2c_readNak>
     ae8:	f8 01       	movw	r30, r16
     aea:	80 83       	st	Z, r24
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <bmp085_readmem+0x64>
     aee:	0e 94 9c 09 	call	0x1338	; 0x1338 <i2c_readAck>
     af2:	f8 01       	movw	r30, r16
     af4:	80 83       	st	Z, r24
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	0f 5f       	subi	r16, 0xFF	; 255
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	cc 15       	cp	r28, r12
     afe:	dd 05       	cpc	r29, r13
     b00:	71 f7       	brne	.-36     	; 0xade <bmp085_readmem+0x4c>
     b02:	0e 94 81 09 	call	0x1302	; 0x1302 <i2c_stop>
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <bmp085_avaragefilter>:
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
     b24:	a4 e5       	ldi	r26, 0x54	; 84
     b26:	b2 e0       	ldi	r27, 0x02	; 2
     b28:	28 ea       	ldi	r18, 0xA8	; 168
     b2a:	32 e0       	ldi	r19, 0x02	; 2
     b2c:	fd 01       	movw	r30, r26
     b2e:	44 81       	ldd	r20, Z+4	; 0x04
     b30:	55 81       	ldd	r21, Z+5	; 0x05
     b32:	66 81       	ldd	r22, Z+6	; 0x06
     b34:	77 81       	ldd	r23, Z+7	; 0x07
     b36:	41 93       	st	Z+, r20
     b38:	51 93       	st	Z+, r21
     b3a:	61 93       	st	Z+, r22
     b3c:	71 93       	st	Z+, r23
     b3e:	e2 17       	cp	r30, r18
     b40:	f3 07       	cpc	r31, r19
     b42:	a9 f7       	brne	.-22     	; 0xb2e <bmp085_avaragefilter+0x16>
     b44:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <k+0x50>
     b48:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <k+0x51>
     b4c:	e0 92 a6 02 	sts	0x02A6, r14	; 0x8002a6 <k+0x52>
     b50:	f0 92 a7 02 	sts	0x02A7, r15	; 0x8002a7 <k+0x53>
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	cb 01       	movw	r24, r22
     b5a:	cd 90       	ld	r12, X+
     b5c:	dd 90       	ld	r13, X+
     b5e:	ed 90       	ld	r14, X+
     b60:	fd 90       	ld	r15, X+
     b62:	6c 0d       	add	r22, r12
     b64:	7d 1d       	adc	r23, r13
     b66:	8e 1d       	adc	r24, r14
     b68:	9f 1d       	adc	r25, r15
     b6a:	a2 17       	cp	r26, r18
     b6c:	b3 07       	cpc	r27, r19
     b6e:	a9 f7       	brne	.-22     	; 0xb5a <bmp085_avaragefilter+0x42>
     b70:	25 e1       	ldi	r18, 0x15	; 21
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__divmodsi4>
     b7c:	ca 01       	movw	r24, r20
     b7e:	b9 01       	movw	r22, r18
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	08 95       	ret

00000b8a <bmp085_getcalibration>:
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <bmp085_getcalibration+0x6>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	1a 82       	std	Y+2, r1	; 0x02
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	42 e0       	ldi	r20, 0x02	; 2
     b9a:	be 01       	movw	r22, r28
     b9c:	6f 5f       	subi	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8a ea       	ldi	r24, 0xAA	; 170
     ba2:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	98 2f       	mov	r25, r24
     bac:	88 27       	eor	r24, r24
     bae:	2a 81       	ldd	r18, Y+2	; 0x02
     bb0:	82 2b       	or	r24, r18
     bb2:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <bmp085_regac1+0x1>
     bb6:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bmp085_regac1>
     bba:	42 e0       	ldi	r20, 0x02	; 2
     bbc:	be 01       	movw	r22, r28
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	8c ea       	ldi	r24, 0xAC	; 172
     bc4:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	98 2f       	mov	r25, r24
     bce:	88 27       	eor	r24, r24
     bd0:	2a 81       	ldd	r18, Y+2	; 0x02
     bd2:	82 2b       	or	r24, r18
     bd4:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <bmp085_regac2+0x1>
     bd8:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <bmp085_regac2>
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	be 01       	movw	r22, r28
     be0:	6f 5f       	subi	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	8e ea       	ldi	r24, 0xAE	; 174
     be6:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	98 2f       	mov	r25, r24
     bf0:	88 27       	eor	r24, r24
     bf2:	2a 81       	ldd	r18, Y+2	; 0x02
     bf4:	82 2b       	or	r24, r18
     bf6:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <bmp085_regac3+0x1>
     bfa:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <bmp085_regac3>
     bfe:	42 e0       	ldi	r20, 0x02	; 2
     c00:	be 01       	movw	r22, r28
     c02:	6f 5f       	subi	r22, 0xFF	; 255
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	80 eb       	ldi	r24, 0xB0	; 176
     c08:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	98 2f       	mov	r25, r24
     c12:	88 27       	eor	r24, r24
     c14:	2a 81       	ldd	r18, Y+2	; 0x02
     c16:	82 2b       	or	r24, r18
     c18:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <bmp085_regac4+0x1>
     c1c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <bmp085_regac4>
     c20:	42 e0       	ldi	r20, 0x02	; 2
     c22:	be 01       	movw	r22, r28
     c24:	6f 5f       	subi	r22, 0xFF	; 255
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	82 eb       	ldi	r24, 0xB2	; 178
     c2a:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	98 2f       	mov	r25, r24
     c34:	88 27       	eor	r24, r24
     c36:	2a 81       	ldd	r18, Y+2	; 0x02
     c38:	82 2b       	or	r24, r18
     c3a:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <bmp085_regac5+0x1>
     c3e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <bmp085_regac5>
     c42:	42 e0       	ldi	r20, 0x02	; 2
     c44:	be 01       	movw	r22, r28
     c46:	6f 5f       	subi	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	84 eb       	ldi	r24, 0xB4	; 180
     c4c:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	98 2f       	mov	r25, r24
     c56:	88 27       	eor	r24, r24
     c58:	2a 81       	ldd	r18, Y+2	; 0x02
     c5a:	82 2b       	or	r24, r18
     c5c:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <bmp085_regac6+0x1>
     c60:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <bmp085_regac6>
     c64:	42 e0       	ldi	r20, 0x02	; 2
     c66:	be 01       	movw	r22, r28
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	86 eb       	ldi	r24, 0xB6	; 182
     c6e:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	98 2f       	mov	r25, r24
     c78:	88 27       	eor	r24, r24
     c7a:	2a 81       	ldd	r18, Y+2	; 0x02
     c7c:	82 2b       	or	r24, r18
     c7e:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <bmp085_regb1+0x1>
     c82:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <bmp085_regb1>
     c86:	42 e0       	ldi	r20, 0x02	; 2
     c88:	be 01       	movw	r22, r28
     c8a:	6f 5f       	subi	r22, 0xFF	; 255
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	88 eb       	ldi	r24, 0xB8	; 184
     c90:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	98 2f       	mov	r25, r24
     c9a:	88 27       	eor	r24, r24
     c9c:	2a 81       	ldd	r18, Y+2	; 0x02
     c9e:	82 2b       	or	r24, r18
     ca0:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <bmp085_regb2+0x1>
     ca4:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <bmp085_regb2>
     ca8:	42 e0       	ldi	r20, 0x02	; 2
     caa:	be 01       	movw	r22, r28
     cac:	6f 5f       	subi	r22, 0xFF	; 255
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	8a eb       	ldi	r24, 0xBA	; 186
     cb2:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	98 2f       	mov	r25, r24
     cbc:	88 27       	eor	r24, r24
     cbe:	2a 81       	ldd	r18, Y+2	; 0x02
     cc0:	82 2b       	or	r24, r18
     cc2:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <bmp085_regmb+0x1>
     cc6:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <bmp085_regmb>
     cca:	42 e0       	ldi	r20, 0x02	; 2
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	8c eb       	ldi	r24, 0xBC	; 188
     cd4:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	98 2f       	mov	r25, r24
     cde:	88 27       	eor	r24, r24
     ce0:	2a 81       	ldd	r18, Y+2	; 0x02
     ce2:	82 2b       	or	r24, r18
     ce4:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <bmp085_regmc+0x1>
     ce8:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <bmp085_regmc>
     cec:	42 e0       	ldi	r20, 0x02	; 2
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	8e eb       	ldi	r24, 0xBE	; 190
     cf6:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	98 2f       	mov	r25, r24
     d00:	88 27       	eor	r24, r24
     d02:	2a 81       	ldd	r18, Y+2	; 0x02
     d04:	82 2b       	or	r24, r18
     d06:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <bmp085_regmd+0x1>
     d0a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <bmp085_regmd>
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <bmp085_getrawtemperature>:
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 d0       	rcall	.+0      	; 0xd2a <bmp085_getrawtemperature+0x12>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	1a 82       	std	Y+2, r1	; 0x02
     d30:	19 82       	std	Y+1, r1	; 0x01
     d32:	6e e2       	ldi	r22, 0x2E	; 46
     d34:	84 ef       	ldi	r24, 0xF4	; 244
     d36:	0e 94 37 05 	call	0xa6e	; 0xa6e <bmp085_writemem>
     d3a:	8f e0       	ldi	r24, 0x0F	; 15
     d3c:	97 e2       	ldi	r25, 0x27	; 39
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <bmp085_getrawtemperature+0x26>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <bmp085_getrawtemperature+0x2c>
     d44:	00 00       	nop
     d46:	42 e0       	ldi	r20, 0x02	; 2
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	86 ef       	ldi	r24, 0xF6	; 246
     d50:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	82 2f       	mov	r24, r18
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	44 27       	eor	r20, r20
     d60:	58 2f       	mov	r21, r24
     d62:	69 2f       	mov	r22, r25
     d64:	7a 2f       	mov	r23, r26
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	48 2b       	or	r20, r24
     d6a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <bmp085_regac6>
     d6e:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <bmp085_regac6+0x1>
     d72:	9a 01       	movw	r18, r20
     d74:	ab 01       	movw	r20, r22
     d76:	28 1b       	sub	r18, r24
     d78:	39 0b       	sbc	r19, r25
     d7a:	41 09       	sbc	r20, r1
     d7c:	51 09       	sbc	r21, r1
     d7e:	a0 91 e4 02 	lds	r26, 0x02E4	; 0x8002e4 <bmp085_regac5>
     d82:	b0 91 e5 02 	lds	r27, 0x02E5	; 0x8002e5 <bmp085_regac5+0x1>
     d86:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
     d8a:	6b 01       	movw	r12, r22
     d8c:	7c 01       	movw	r14, r24
     d8e:	0b 2e       	mov	r0, r27
     d90:	bf e0       	ldi	r27, 0x0F	; 15
     d92:	f5 94       	asr	r15
     d94:	e7 94       	ror	r14
     d96:	d7 94       	ror	r13
     d98:	c7 94       	ror	r12
     d9a:	ba 95       	dec	r27
     d9c:	d1 f7       	brne	.-12     	; 0xd92 <bmp085_getrawtemperature+0x7a>
     d9e:	b0 2d       	mov	r27, r0
     da0:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <bmp085_regmc>
     da4:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <bmp085_regmc+0x1>
     da8:	cb 01       	movw	r24, r22
     daa:	77 0f       	add	r23, r23
     dac:	aa 0b       	sbc	r26, r26
     dae:	bb 0b       	sbc	r27, r27
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	05 2e       	mov	r0, r21
     db6:	5b e0       	ldi	r21, 0x0B	; 11
     db8:	66 0f       	add	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	5a 95       	dec	r21
     dc2:	d1 f7       	brne	.-12     	; 0xdb8 <bmp085_getrawtemperature+0xa0>
     dc4:	50 2d       	mov	r21, r0
     dc6:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <bmp085_regmd>
     dca:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <bmp085_regmd+0x1>
     dce:	89 01       	movw	r16, r18
     dd0:	33 0f       	add	r19, r19
     dd2:	22 0b       	sbc	r18, r18
     dd4:	33 0b       	sbc	r19, r19
     dd6:	a9 01       	movw	r20, r18
     dd8:	98 01       	movw	r18, r16
     dda:	2c 0d       	add	r18, r12
     ddc:	3d 1d       	adc	r19, r13
     dde:	4e 1d       	adc	r20, r14
     de0:	5f 1d       	adc	r21, r15
     de2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__divmodsi4>
     de6:	c2 0e       	add	r12, r18
     de8:	d3 1e       	adc	r13, r19
     dea:	e4 1e       	adc	r14, r20
     dec:	f5 1e       	adc	r15, r21
     dee:	c0 92 d6 02 	sts	0x02D6, r12	; 0x8002d6 <bmp085_rawtemperature>
     df2:	d0 92 d7 02 	sts	0x02D7, r13	; 0x8002d7 <bmp085_rawtemperature+0x1>
     df6:	e0 92 d8 02 	sts	0x02D8, r14	; 0x8002d8 <bmp085_rawtemperature+0x2>
     dfa:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <bmp085_rawtemperature+0x3>
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	08 95       	ret

00000e14 <bmp085_getrawpressure>:
     e14:	4f 92       	push	r4
     e16:	5f 92       	push	r5
     e18:	6f 92       	push	r6
     e1a:	7f 92       	push	r7
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	27 97       	sbiw	r28, 0x07	; 7
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	8e 01       	movw	r16, r28
     e46:	0f 5f       	subi	r16, 0xFF	; 255
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	f8 01       	movw	r30, r16
     e4e:	11 92       	st	Z+, r1
     e50:	8a 95       	dec	r24
     e52:	e9 f7       	brne	.-6      	; 0xe4e <bmp085_getrawpressure+0x3a>
     e54:	0e 94 8c 06 	call	0xd18	; 0xd18 <bmp085_getrawtemperature>
     e58:	64 ef       	ldi	r22, 0xF4	; 244
     e5a:	84 ef       	ldi	r24, 0xF4	; 244
     e5c:	0e 94 37 05 	call	0xa6e	; 0xa6e <bmp085_writemem>
     e60:	8f e1       	ldi	r24, 0x1F	; 31
     e62:	9b ec       	ldi	r25, 0xCB	; 203
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <bmp085_getrawpressure+0x50>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <bmp085_getrawpressure+0x56>
     e6a:	00 00       	nop
     e6c:	43 e0       	ldi	r20, 0x03	; 3
     e6e:	b8 01       	movw	r22, r16
     e70:	86 ef       	ldi	r24, 0xF6	; 246
     e72:	0e 94 49 05 	call	0xa92	; 0xa92 <bmp085_readmem>
     e76:	80 90 d6 02 	lds	r8, 0x02D6	; 0x8002d6 <bmp085_rawtemperature>
     e7a:	90 90 d7 02 	lds	r9, 0x02D7	; 0x8002d7 <bmp085_rawtemperature+0x1>
     e7e:	a0 90 d8 02 	lds	r10, 0x02D8	; 0x8002d8 <bmp085_rawtemperature+0x2>
     e82:	b0 90 d9 02 	lds	r11, 0x02D9	; 0x8002d9 <bmp085_rawtemperature+0x3>
     e86:	90 ea       	ldi	r25, 0xA0	; 160
     e88:	89 1a       	sub	r8, r25
     e8a:	9f e0       	ldi	r25, 0x0F	; 15
     e8c:	99 0a       	sbc	r9, r25
     e8e:	a1 08       	sbc	r10, r1
     e90:	b1 08       	sbc	r11, r1
     e92:	a5 01       	movw	r20, r10
     e94:	94 01       	movw	r18, r8
     e96:	c5 01       	movw	r24, r10
     e98:	b4 01       	movw	r22, r8
     e9a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__mulsi3>
     e9e:	2b 01       	movw	r4, r22
     ea0:	3c 01       	movw	r6, r24
     ea2:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <bmp085_regb1>
     ea6:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <bmp085_regb1+0x1>
     eaa:	9b 01       	movw	r18, r22
     eac:	ac 01       	movw	r20, r24
     eae:	01 2e       	mov	r0, r17
     eb0:	1c e0       	ldi	r17, 0x0C	; 12
     eb2:	55 95       	asr	r21
     eb4:	47 95       	ror	r20
     eb6:	37 95       	ror	r19
     eb8:	27 95       	ror	r18
     eba:	1a 95       	dec	r17
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <bmp085_getrawpressure+0x9e>
     ebe:	10 2d       	mov	r17, r0
     ec0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulshisi3>
     ec4:	6c 01       	movw	r12, r24
     ec6:	ff 24       	eor	r15, r15
     ec8:	d7 fc       	sbrc	r13, 7
     eca:	f0 94       	com	r15
     ecc:	ef 2c       	mov	r14, r15
     ece:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <bmp085_regac3>
     ed2:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <bmp085_regac3+0x1>
     ed6:	a5 01       	movw	r20, r10
     ed8:	94 01       	movw	r18, r8
     eda:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulshisi3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	07 2e       	mov	r0, r23
     ee4:	7d e0       	ldi	r23, 0x0D	; 13
     ee6:	b5 95       	asr	r27
     ee8:	a7 95       	ror	r26
     eea:	97 95       	ror	r25
     eec:	87 95       	ror	r24
     eee:	7a 95       	dec	r23
     ef0:	d1 f7       	brne	.-12     	; 0xee6 <bmp085_getrawpressure+0xd2>
     ef2:	70 2d       	mov	r23, r0
     ef4:	8c 0d       	add	r24, r12
     ef6:	9d 1d       	adc	r25, r13
     ef8:	ae 1d       	adc	r26, r14
     efa:	bf 1d       	adc	r27, r15
     efc:	02 96       	adiw	r24, 0x02	; 2
     efe:	a1 1d       	adc	r26, r1
     f00:	b1 1d       	adc	r27, r1
     f02:	b5 95       	asr	r27
     f04:	a7 95       	ror	r26
     f06:	97 95       	ror	r25
     f08:	87 95       	ror	r24
     f0a:	b5 95       	asr	r27
     f0c:	a7 95       	ror	r26
     f0e:	97 95       	ror	r25
     f10:	87 95       	ror	r24
     f12:	9c 01       	movw	r18, r24
     f14:	ad 01       	movw	r20, r26
     f16:	30 58       	subi	r19, 0x80	; 128
     f18:	4f 4f       	sbci	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <bmp085_regac4>
     f20:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <bmp085_regac4+0x1>
     f24:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
     f28:	9b 01       	movw	r18, r22
     f2a:	ac 01       	movw	r20, r24
     f2c:	01 2e       	mov	r0, r17
     f2e:	1f e0       	ldi	r17, 0x0F	; 15
     f30:	56 95       	lsr	r21
     f32:	47 95       	ror	r20
     f34:	37 95       	ror	r19
     f36:	27 95       	ror	r18
     f38:	1a 95       	dec	r17
     f3a:	d1 f7       	brne	.-12     	; 0xf30 <bmp085_getrawpressure+0x11c>
     f3c:	10 2d       	mov	r17, r0
     f3e:	2c 83       	std	Y+4, r18	; 0x04
     f40:	3d 83       	std	Y+5, r19	; 0x05
     f42:	4e 83       	std	Y+6, r20	; 0x06
     f44:	5f 83       	std	Y+7, r21	; 0x07
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	ca 80       	ldd	r12, Y+2	; 0x02
     f4a:	d1 2c       	mov	r13, r1
     f4c:	e1 2c       	mov	r14, r1
     f4e:	f1 2c       	mov	r15, r1
     f50:	fe 2c       	mov	r15, r14
     f52:	ed 2c       	mov	r14, r13
     f54:	dc 2c       	mov	r13, r12
     f56:	cc 24       	eor	r12, r12
     f58:	e8 2a       	or	r14, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	c8 2a       	or	r12, r24
     f5e:	68 94       	set
     f60:	14 f8       	bld	r1, 4
     f62:	f5 94       	asr	r15
     f64:	e7 94       	ror	r14
     f66:	d7 94       	ror	r13
     f68:	c7 94       	ror	r12
     f6a:	16 94       	lsr	r1
     f6c:	d1 f7       	brne	.-12     	; 0xf62 <bmp085_getrawpressure+0x14e>
     f6e:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <bmp085_regb2>
     f72:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <bmp085_regb2+0x1>
     f76:	a3 01       	movw	r20, r6
     f78:	92 01       	movw	r18, r4
     f7a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulshisi3>
     f7e:	2b 01       	movw	r4, r22
     f80:	3c 01       	movw	r6, r24
     f82:	03 2e       	mov	r0, r19
     f84:	37 e1       	ldi	r19, 0x17	; 23
     f86:	75 94       	asr	r7
     f88:	67 94       	ror	r6
     f8a:	57 94       	ror	r5
     f8c:	47 94       	ror	r4
     f8e:	3a 95       	dec	r19
     f90:	d1 f7       	brne	.-12     	; 0xf86 <bmp085_getrawpressure+0x172>
     f92:	30 2d       	mov	r19, r0
     f94:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <bmp085_regac2>
     f98:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <bmp085_regac2+0x1>
     f9c:	a5 01       	movw	r20, r10
     f9e:	94 01       	movw	r18, r8
     fa0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulshisi3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	07 2e       	mov	r0, r23
     faa:	7b e0       	ldi	r23, 0x0B	; 11
     fac:	b5 95       	asr	r27
     fae:	a7 95       	ror	r26
     fb0:	97 95       	ror	r25
     fb2:	87 95       	ror	r24
     fb4:	7a 95       	dec	r23
     fb6:	d1 f7       	brne	.-12     	; 0xfac <bmp085_getrawpressure+0x198>
     fb8:	70 2d       	mov	r23, r0
     fba:	84 0d       	add	r24, r4
     fbc:	95 1d       	adc	r25, r5
     fbe:	a6 1d       	adc	r26, r6
     fc0:	b7 1d       	adc	r27, r7
     fc2:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <bmp085_regac1>
     fc6:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <bmp085_regac1+0x1>
     fca:	05 2e       	mov	r0, r21
     fcc:	00 0c       	add	r0, r0
     fce:	66 0b       	sbc	r22, r22
     fd0:	77 0b       	sbc	r23, r23
     fd2:	44 0f       	add	r20, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	44 0f       	add	r20, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	66 1f       	adc	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	84 0f       	add	r24, r20
     fe4:	95 1f       	adc	r25, r21
     fe6:	a6 1f       	adc	r26, r22
     fe8:	b7 1f       	adc	r27, r23
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	aa 1f       	adc	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	a7 01       	movw	r20, r14
     ff4:	96 01       	movw	r18, r12
     ff6:	28 1b       	sub	r18, r24
     ff8:	39 0b       	sbc	r19, r25
     ffa:	4a 0b       	sbc	r20, r26
     ffc:	5b 0b       	sbc	r21, r27
     ffe:	aa e6       	ldi	r26, 0x6A	; 106
    1000:	b8 e1       	ldi	r27, 0x18	; 24
    1002:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
    1006:	99 23       	and	r25, r25
    1008:	6c f0       	brlt	.+26     	; 0x1024 <bmp085_getrawpressure+0x210>
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	4e 81       	ldd	r20, Y+6	; 0x06
    1018:	5f 81       	ldd	r21, Y+7	; 0x07
    101a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__udivmodsi4>
    101e:	49 01       	movw	r8, r18
    1020:	5a 01       	movw	r10, r20
    1022:	0c c0       	rjmp	.+24     	; 0x103c <bmp085_getrawpressure+0x228>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	4e 81       	ldd	r20, Y+6	; 0x06
    102a:	5f 81       	ldd	r21, Y+7	; 0x07
    102c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__udivmodsi4>
    1030:	49 01       	movw	r8, r18
    1032:	5a 01       	movw	r10, r20
    1034:	88 0c       	add	r8, r8
    1036:	99 1c       	adc	r9, r9
    1038:	aa 1c       	adc	r10, r10
    103a:	bb 1c       	adc	r11, r11
    103c:	99 27       	eor	r25, r25
    103e:	b7 fc       	sbrc	r11, 7
    1040:	9a 95       	dec	r25
    1042:	8b 2d       	mov	r24, r11
    1044:	7a 2d       	mov	r23, r10
    1046:	69 2d       	mov	r22, r9
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__mulsi3>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	ae ed       	ldi	r26, 0xDE	; 222
    1056:	bb e0       	ldi	r27, 0x0B	; 11
    1058:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
    105c:	6b 01       	movw	r12, r22
    105e:	7c 01       	movw	r14, r24
    1060:	a3 e4       	ldi	r26, 0x43	; 67
    1062:	b3 ee       	ldi	r27, 0xE3	; 227
    1064:	a5 01       	movw	r20, r10
    1066:	94 01       	movw	r18, r8
    1068:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__mulohisi3>
    106c:	bb 27       	eor	r27, r27
    106e:	97 fd       	sbrc	r25, 7
    1070:	b0 95       	com	r27
    1072:	ab 2f       	mov	r26, r27
    1074:	67 01       	movw	r12, r14
    1076:	ff 24       	eor	r15, r15
    1078:	d7 fc       	sbrc	r13, 7
    107a:	f0 94       	com	r15
    107c:	ef 2c       	mov	r14, r15
    107e:	8c 0d       	add	r24, r12
    1080:	9d 1d       	adc	r25, r13
    1082:	ae 1d       	adc	r26, r14
    1084:	bf 1d       	adc	r27, r15
    1086:	81 53       	subi	r24, 0x31	; 49
    1088:	91 4f       	sbci	r25, 0xF1	; 241
    108a:	af 4f       	sbci	r26, 0xFF	; 255
    108c:	bf 4f       	sbci	r27, 0xFF	; 255
    108e:	68 94       	set
    1090:	13 f8       	bld	r1, 3
    1092:	b5 95       	asr	r27
    1094:	a7 95       	ror	r26
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	16 94       	lsr	r1
    109c:	d1 f7       	brne	.-12     	; 0x1092 <bmp085_getrawpressure+0x27e>
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	68 0d       	add	r22, r8
    10a4:	79 1d       	adc	r23, r9
    10a6:	8a 1d       	adc	r24, r10
    10a8:	9b 1d       	adc	r25, r11
    10aa:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <bmp085_rawpressure>
    10ae:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <bmp085_rawpressure+0x1>
    10b2:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <bmp085_rawpressure+0x2>
    10b6:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <bmp085_rawpressure+0x3>
    10ba:	0e 94 8c 05 	call	0xb18	; 0xb18 <bmp085_avaragefilter>
    10be:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <bmp085_rawpressure>
    10c2:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <bmp085_rawpressure+0x1>
    10c6:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <bmp085_rawpressure+0x2>
    10ca:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <bmp085_rawpressure+0x3>
    10ce:	27 96       	adiw	r28, 0x07	; 7
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	7f 90       	pop	r7
    10f4:	6f 90       	pop	r6
    10f6:	5f 90       	pop	r5
    10f8:	4f 90       	pop	r4
    10fa:	08 95       	ret

000010fc <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
    10fc:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
    10fe:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1102:	8a e1       	ldi	r24, 0x1A	; 26
    1104:	8a 95       	dec	r24
    1106:	f1 f7       	brne	.-4      	; 0x1104 <bmp085_init+0x8>
    1108:	00 c0       	rjmp	.+0      	; 0x110a <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
    110a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
    110e:	0e 94 8c 06 	call	0xd18	; 0xd18 <bmp085_getrawtemperature>
    1112:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
    1114:	0e 94 0a 07 	call	0xe14	; 0xe14 <bmp085_getrawpressure>
    1118:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    111a:	e1 f7       	brne	.-8      	; 0x1114 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <dht_getdata>:
#elif DHT_FLOAT == 0
int8_t dht_gethumidity(int8_t *humidity) {
	int8_t temperature = 0;
#endif
	return dht_getdata(&temperature, humidity);
}
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <dht_getdata+0xe>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <dht_getdata+0x10>
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8c 01       	movw	r16, r24
    1138:	fe 01       	movw	r30, r28
    113a:	31 96       	adiw	r30, 0x01	; 1
    113c:	95 e0       	ldi	r25, 0x05	; 5
    113e:	df 01       	movw	r26, r30
    1140:	1d 92       	st	X+, r1
    1142:	9a 95       	dec	r25
    1144:	e9 f7       	brne	.-6      	; 0x1140 <dht_getdata+0x20>
    1146:	57 9a       	sbi	0x0a, 7	; 10
    1148:	5f 9a       	sbi	0x0b, 7	; 11
    114a:	bf ef       	ldi	r27, 0xFF	; 255
    114c:	e0 e7       	ldi	r30, 0x70	; 112
    114e:	f2 e0       	ldi	r31, 0x02	; 2
    1150:	b1 50       	subi	r27, 0x01	; 1
    1152:	e0 40       	sbci	r30, 0x00	; 0
    1154:	f0 40       	sbci	r31, 0x00	; 0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <dht_getdata+0x30>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <dht_getdata+0x3a>
    115a:	00 00       	nop
    115c:	5f 98       	cbi	0x0b, 7	; 11
    115e:	8f e9       	ldi	r24, 0x9F	; 159
    1160:	9c e8       	ldi	r25, 0x8C	; 140
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <dht_getdata+0x42>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <dht_getdata+0x48>
    1168:	00 00       	nop
    116a:	5f 9a       	sbi	0x0b, 7	; 11
    116c:	57 98       	cbi	0x0a, 7	; 10
    116e:	9a e6       	ldi	r25, 0x6A	; 106
    1170:	9a 95       	dec	r25
    1172:	f1 f7       	brne	.-4      	; 0x1170 <dht_getdata+0x50>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <dht_getdata+0x56>
    1176:	4f 99       	sbic	0x09, 7	; 9
    1178:	56 c0       	rjmp	.+172    	; 0x1226 <dht_getdata+0x106>
    117a:	a5 ed       	ldi	r26, 0xD5	; 213
    117c:	aa 95       	dec	r26
    117e:	f1 f7       	brne	.-4      	; 0x117c <dht_getdata+0x5c>
    1180:	00 00       	nop
    1182:	4f 9b       	sbis	0x09, 7	; 9
    1184:	52 c0       	rjmp	.+164    	; 0x122a <dht_getdata+0x10a>
    1186:	b5 ed       	ldi	r27, 0xD5	; 213
    1188:	ba 95       	dec	r27
    118a:	f1 f7       	brne	.-4      	; 0x1188 <dht_getdata+0x68>
    118c:	00 00       	nop
    118e:	fe 01       	movw	r30, r28
    1190:	31 96       	adiw	r30, 0x01	; 1
    1192:	7e 01       	movw	r14, r28
    1194:	26 e0       	ldi	r18, 0x06	; 6
    1196:	e2 0e       	add	r14, r18
    1198:	f1 1c       	adc	r15, r1
    119a:	a1 e0       	ldi	r26, 0x01	; 1
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	24 c0       	rjmp	.+72     	; 0x11e8 <dht_getdata+0xc8>
    11a0:	21 50       	subi	r18, 0x01	; 1
    11a2:	31 09       	sbc	r19, r1
    11a4:	19 f4       	brne	.+6      	; 0x11ac <dht_getdata+0x8c>
    11a6:	43 c0       	rjmp	.+134    	; 0x122e <dht_getdata+0x10e>
    11a8:	29 ec       	ldi	r18, 0xC9	; 201
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	4f 9b       	sbis	0x09, 7	; 9
    11ae:	f8 cf       	rjmp	.-16     	; 0x11a0 <dht_getdata+0x80>
    11b0:	80 e5       	ldi	r24, 0x50	; 80
    11b2:	8a 95       	dec	r24
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <dht_getdata+0x92>
    11b6:	4f 9b       	sbis	0x09, 7	; 9
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <dht_getdata+0xaa>
    11ba:	9d 01       	movw	r18, r26
    11bc:	04 2e       	mov	r0, r20
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <dht_getdata+0xa4>
    11c0:	22 0f       	add	r18, r18
    11c2:	33 1f       	adc	r19, r19
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <dht_getdata+0xa0>
    11c8:	92 2b       	or	r25, r18
    11ca:	29 ec       	ldi	r18, 0xC9	; 201
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <dht_getdata+0xb6>
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	31 09       	sbc	r19, r1
    11d4:	71 f1       	breq	.+92     	; 0x1232 <dht_getdata+0x112>
    11d6:	4f 99       	sbic	0x09, 7	; 9
    11d8:	fb cf       	rjmp	.-10     	; 0x11d0 <dht_getdata+0xb0>
    11da:	41 50       	subi	r20, 0x01	; 1
    11dc:	51 09       	sbc	r21, r1
    11de:	20 f7       	brcc	.-56     	; 0x11a8 <dht_getdata+0x88>
    11e0:	91 93       	st	Z+, r25
    11e2:	ee 16       	cp	r14, r30
    11e4:	ff 06       	cpc	r15, r31
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <dht_getdata+0xd0>
    11e8:	47 e0       	ldi	r20, 0x07	; 7
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	dc cf       	rjmp	.-72     	; 0x11a8 <dht_getdata+0x88>
    11f0:	57 9a       	sbi	0x0a, 7	; 10
    11f2:	5f 9a       	sbi	0x0b, 7	; 11
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	90 e7       	ldi	r25, 0x70	; 112
    11f8:	a2 e0       	ldi	r26, 0x02	; 2
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	90 40       	sbci	r25, 0x00	; 0
    11fe:	a0 40       	sbci	r26, 0x00	; 0
    1200:	e1 f7       	brne	.-8      	; 0x11fa <dht_getdata+0xda>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <dht_getdata+0xe4>
    1204:	00 00       	nop
    1206:	29 81       	ldd	r18, Y+1	; 0x01
    1208:	3b 81       	ldd	r19, Y+3	; 0x03
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	82 0f       	add	r24, r18
    120e:	83 0f       	add	r24, r19
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	89 0f       	add	r24, r25
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	89 13       	cpse	r24, r25
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <dht_getdata+0x116>
    121a:	f8 01       	movw	r30, r16
    121c:	30 83       	st	Z, r19
    121e:	db 01       	movw	r26, r22
    1220:	2c 93       	st	X, r18
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <dht_getdata+0x118>
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <dht_getdata+0x118>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <dht_getdata+0x118>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <dht_getdata+0x118>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <dht_getdata+0x118>
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <dht_gettemperaturehumidity>:
#if DHT_FLOAT == 1
int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
#endif
	return dht_getdata(temperature, humidity);
    1250:	0e 94 90 08 	call	0x1120	; 0x1120 <dht_getdata>
}
    1254:	08 95       	ret

00001256 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
                           /* no prescaler */
  TWBR = 32;  /* must be > 10 for stable operation */
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    125c:	08 95       	ret

0000125e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    125e:	94 ea       	ldi	r25, 0xA4	; 164
    1260:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1264:	ec eb       	ldi	r30, 0xBC	; 188
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	90 81       	ld	r25, Z
    126a:	99 23       	and	r25, r25
    126c:	ec f7       	brge	.-6      	; 0x1268 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    126e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1272:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1274:	98 30       	cpi	r25, 0x08	; 8
    1276:	11 f0       	breq	.+4      	; 0x127c <i2c_start+0x1e>
    1278:	90 31       	cpi	r25, 0x10	; 16
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <i2c_start+0x46>

	// send device address
	TWDR = address;
    127c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1280:	84 e8       	ldi	r24, 0x84	; 132
    1282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1286:	ec eb       	ldi	r30, 0xBC	; 188
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	88 23       	and	r24, r24
    128e:	ec f7       	brge	.-6      	; 0x128a <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1290:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1294:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1296:	98 31       	cpi	r25, 0x18	; 24
    1298:	39 f0       	breq	.+14     	; 0x12a8 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 34       	cpi	r25, 0x40	; 64
    129e:	29 f4       	brne	.+10     	; 0x12aa <i2c_start+0x4c>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    12a8:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    12aa:	08 95       	ret

000012ac <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    12b0:	ec eb       	ldi	r30, 0xBC	; 188
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    12b6:	a9 eb       	ldi	r26, 0xB9	; 185
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    12ba:	cb eb       	ldi	r28, 0xBB	; 187
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
    12be:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    12c0:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    12c2:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    12c4:	90 81       	ld	r25, Z
    12c6:	99 23       	and	r25, r25
    12c8:	ec f7       	brge	.-6      	; 0x12c4 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    12ca:	9c 91       	ld	r25, X
    12cc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    12ce:	98 30       	cpi	r25, 0x08	; 8
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <i2c_start_wait+0x2a>
    12d2:	90 31       	cpi	r25, 0x10	; 16
    12d4:	b1 f7       	brne	.-20     	; 0x12c2 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
    12d6:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    12d8:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    12da:	90 81       	ld	r25, Z
    12dc:	99 23       	and	r25, r25
    12de:	ec f7       	brge	.-6      	; 0x12da <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    12e0:	9c 91       	ld	r25, X
    12e2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    12e4:	90 32       	cpi	r25, 0x20	; 32
    12e6:	11 f0       	breq	.+4      	; 0x12ec <i2c_start_wait+0x40>
    12e8:	98 35       	cpi	r25, 0x58	; 88
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    12ec:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    12ee:	90 81       	ld	r25, Z
    12f0:	94 fd       	sbrc	r25, 4
    12f2:	fd cf       	rjmp	.-6      	; 0x12ee <i2c_start_wait+0x42>
    12f4:	e6 cf       	rjmp	.-52     	; 0x12c2 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    12fc:	0e 94 2f 09 	call	0x125e	; 0x125e <i2c_start>

}/* i2c_rep_start */
    1300:	08 95       	ret

00001302 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1302:	84 e9       	ldi	r24, 0x94	; 148
    1304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1308:	ec eb       	ldi	r30, 0xBC	; 188
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	84 fd       	sbrc	r24, 4
    1310:	fd cf       	rjmp	.-6      	; 0x130c <i2c_stop+0xa>

}/* i2c_stop */
    1312:	08 95       	ret

00001314 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1314:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1318:	84 e8       	ldi	r24, 0x84	; 132
    131a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    131e:	ec eb       	ldi	r30, 0xBC	; 188
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	88 23       	and	r24, r24
    1326:	ec f7       	brge	.-6      	; 0x1322 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1328:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    132c:	98 7f       	andi	r25, 0xF8	; 248
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	98 32       	cpi	r25, 0x28	; 40
    1332:	09 f4       	brne	.+2      	; 0x1336 <i2c_write+0x22>
    1334:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1336:	08 95       	ret

00001338 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1338:	84 ec       	ldi	r24, 0xC4	; 196
    133a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    133e:	ec eb       	ldi	r30, 0xBC	; 188
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 23       	and	r24, r24
    1346:	ec f7       	brge	.-6      	; 0x1342 <i2c_readAck+0xa>

    return TWDR;
    1348:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    134c:	08 95       	ret

0000134e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    134e:	84 e8       	ldi	r24, 0x84	; 132
    1350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    1354:	ec eb       	ldi	r30, 0xBC	; 188
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	88 23       	and	r24, r24
    135c:	ec f7       	brge	.-6      	; 0x1358 <i2c_readNak+0xa>
	
    return TWDR;
    135e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    1362:	08 95       	ret

00001364 <readLight>:
#include "../header.h"
#include <avr/io.h>

int readLight(void)
{
	enableChannel(CH2);
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 1b 05 	call	0xa36	; 0xa36 <enableChannel>
	int light = ReadADC(0);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0e 94 ba 09 	call	0x1374	; 0x1374 <ReadADC>
	return (light);
    1372:	08 95       	ret

00001374 <ReadADC>:


uint16_t ReadADC(uint8_t adcx)
{
	// Select ADC Channel
	ADMUX	&=	0xf0;
    1374:	ec e7       	ldi	r30, 0x7C	; 124
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	90 81       	ld	r25, Z
    137a:	90 7f       	andi	r25, 0xF0	; 240
    137c:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
    137e:	90 81       	ld	r25, Z
    1380:	89 2b       	or	r24, r25
    1382:	80 83       	st	Z, r24

	
	// Start Single conversion
	ADCSRA|=(1<<ADSC);
    1384:	ea e7       	ldi	r30, 0x7A	; 122
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 64       	ori	r24, 0x40	; 64
    138c:	80 83       	st	Z, r24

	// Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
    138e:	80 81       	ld	r24, Z
    1390:	84 ff       	sbrs	r24, 4
    1392:	fd cf       	rjmp	.-6      	; 0x138e <ReadADC+0x1a>

	//Clear ADIF by writing 1 to it
	ADCSRA|=(1<<ADIF);
    1394:	ea e7       	ldi	r30, 0x7A	; 122
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 61       	ori	r24, 0x10	; 16
    139c:	80 83       	st	Z, r24

	return(ADC);
    139e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    13a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13a6:	08 95       	ret

000013a8 <readCapacitance>:

#include <avr/io.h>
#include "../header.h"

float readCapacitance(void)
{
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
	float capacitance;
	int adc_result;
	float IC = 24.48;			// Internal capacitance (error)
	
	DDRC &= ~(A0);				// A0 as INPUT
    13b4:	39 98       	cbi	0x07, 1	; 7
	PORTC |= A1;				// A1 HIGH (charge)
    13b6:	42 9a       	sbi	0x08, 2	; 8
	adc_result = ReadADC(1);	// Read ADC from A0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 ba 09 	call	0x1374	; 0x1374 <ReadADC>
    13be:	ec 01       	movw	r28, r24
	PORTC &= ~(A1);				// A1 LOW (discharge)
    13c0:	42 98       	cbi	0x08, 2	; 8
	DDRC |= A0;					// A0 as OUTPUT (to make sure it discharges)
    13c2:	39 9a       	sbi	0x07, 1	; 7
	
	capacitance = (adc_result*IC)/(1023-adc_result);
	
	return(capacitance);
    13c4:	bc 01       	movw	r22, r24
    13c6:	99 0f       	add	r25, r25
    13c8:	88 0b       	sbc	r24, r24
    13ca:	99 0b       	sbc	r25, r25
    13cc:	0e 94 ad 0c 	call	0x195a	; 0x195a <__floatsisf>
    13d0:	2a e0       	ldi	r18, 0x0A	; 10
    13d2:	37 ed       	ldi	r19, 0xD7	; 215
    13d4:	43 ec       	ldi	r20, 0xC3	; 195
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3>
    13dc:	6b 01       	movw	r12, r22
    13de:	7c 01       	movw	r14, r24
    13e0:	6f ef       	ldi	r22, 0xFF	; 255
    13e2:	73 e0       	ldi	r23, 0x03	; 3
    13e4:	6c 1b       	sub	r22, r28
    13e6:	7d 0b       	sbc	r23, r29
    13e8:	07 2e       	mov	r0, r23
    13ea:	00 0c       	add	r0, r0
    13ec:	88 0b       	sbc	r24, r24
    13ee:	99 0b       	sbc	r25, r25
    13f0:	0e 94 ad 0c 	call	0x195a	; 0x195a <__floatsisf>
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	c7 01       	movw	r24, r14
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 03 0c 	call	0x1806	; 0x1806 <__divsf3>
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	08 95       	ret

0000140e <readGas>:
#include "../header.h"
#include <avr/io.h>

int readGas(void)
{
	int gasADC = ReadADC(3);
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	0e 94 ba 09 	call	0x1374	; 0x1374 <ReadADC>
	return (gasADC);
    1414:	08 95       	ret

00001416 <setup_rf>:
	{
		// Do something
	}
}

nRF24L01 *setup_rf(void) {
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
    141a:	0e 94 37 03 	call	0x66e	; 0x66e <nRF24L01_init>
    141e:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
    1420:	85 e2       	ldi	r24, 0x25	; 37
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	99 83       	std	Y+1, r25	; 0x01
    1426:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
    1428:	22 e0       	ldi	r18, 0x02	; 2
    142a:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
    1434:	9f 83       	std	Y+7, r25	; 0x07
    1436:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
    1438:	25 e0       	ldi	r18, 0x05	; 5
    143a:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
    143c:	9a 87       	std	Y+10, r25	; 0x0a
    143e:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
    1440:	23 e0       	ldi	r18, 0x03	; 3
    1442:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
    1444:	9d 87       	std	Y+13, r25	; 0x0d
    1446:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	8e 87       	std	Y+14, r24	; 0x0e
	nRF24L01_begin(rf);
    144c:	ce 01       	movw	r24, r28
    144e:	0e 94 9e 03 	call	0x73c	; 0x73c <nRF24L01_begin>
	return rf;
    1452:	ce 01       	movw	r24, r28
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <transmit>:
#include <string.h>
#include <stdio.h>


void transmit(char *message)
{
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	c5 54       	subi	r28, 0x45	; 69
    1474:	d1 09       	sbc	r29, r1
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
	char text[29];									// Placeholder
	strcpy(text, message);							// Copy string from *message to placeholder
    1480:	bc 01       	movw	r22, r24
    1482:	8e 01       	movw	r16, r28
    1484:	0f 5f       	subi	r16, 0xFF	; 255
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	c8 01       	movw	r24, r16
    148a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <strcpy>
	int messageLength = strlen(text);				// Get the length
    148e:	f8 01       	movw	r30, r16
    1490:	01 90       	ld	r0, Z+
    1492:	00 20       	and	r0, r0
    1494:	e9 f7       	brne	.-6      	; 0x1490 <transmit+0x36>
    1496:	31 97       	sbiw	r30, 0x01	; 1
    1498:	cf 01       	movw	r24, r30
    149a:	80 1b       	sub	r24, r16
    149c:	91 0b       	sbc	r25, r17
    149e:	8c 01       	movw	r16, r24

	if (messageLength>29)							// If string exceeds length (nRF24L01 max packet size = 32 bytes)
    14a0:	8e 31       	cpi	r24, 0x1E	; 30
    14a2:	91 05       	cpc	r25, r1
    14a4:	14 f1       	brlt	.+68     	; 0x14ea <transmit+0x90>
	{
		memset(text, 0, sizeof(text));				// Clear string
    14a6:	8e 01       	movw	r16, r28
    14a8:	0f 5f       	subi	r16, 0xFF	; 255
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	8d e1       	ldi	r24, 0x1D	; 29
    14ae:	f8 01       	movw	r30, r16
    14b0:	11 92       	st	Z+, r1
    14b2:	8a 95       	dec	r24
    14b4:	e9 f7       	brne	.-6      	; 0x14b0 <transmit+0x56>
		strcpy(text, "Error: string too long");
    14b6:	87 e1       	ldi	r24, 0x17	; 23
    14b8:	ea ed       	ldi	r30, 0xDA	; 218
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	d8 01       	movw	r26, r16
    14be:	01 90       	ld	r0, Z+
    14c0:	0d 92       	st	X+, r0
    14c2:	8a 95       	dec	r24
    14c4:	e1 f7       	brne	.-8      	; 0x14be <transmit+0x64>
		printf("Error: string too long\r");
    14c6:	81 ef       	ldi	r24, 0xF1	; 241
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
		messageLength = strlen(text);
    14d2:	f8 01       	movw	r30, r16
    14d4:	01 90       	ld	r0, Z+
    14d6:	00 20       	and	r0, r0
    14d8:	e9 f7       	brne	.-6      	; 0x14d4 <transmit+0x7a>
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	cf 01       	movw	r24, r30
    14de:	80 1b       	sub	r24, r16
    14e0:	91 0b       	sbc	r25, r17
    14e2:	8c 01       	movw	r16, r24
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	23 c0       	rjmp	.+70     	; 0x1530 <transmit+0xd6>
	}
	else if (messageLength<27)
    14ea:	4b 97       	sbiw	r24, 0x1b	; 27
    14ec:	0c f5       	brge	.+66     	; 0x1530 <transmit+0xd6>
	{
		memset(text, 0, sizeof(text));				// Clear string
    14ee:	8e 01       	movw	r16, r28
    14f0:	0f 5f       	subi	r16, 0xFF	; 255
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	8d e1       	ldi	r24, 0x1D	; 29
    14f6:	f8 01       	movw	r30, r16
    14f8:	11 92       	st	Z+, r1
    14fa:	8a 95       	dec	r24
    14fc:	e9 f7       	brne	.-6      	; 0x14f8 <transmit+0x9e>
		strcpy(text, "Error: missing data");
    14fe:	84 e1       	ldi	r24, 0x14	; 20
    1500:	e9 e0       	ldi	r30, 0x09	; 9
    1502:	f2 e0       	ldi	r31, 0x02	; 2
    1504:	d8 01       	movw	r26, r16
    1506:	01 90       	ld	r0, Z+
    1508:	0d 92       	st	X+, r0
    150a:	8a 95       	dec	r24
    150c:	e1 f7       	brne	.-8      	; 0x1506 <transmit+0xac>
		printf("Error: missing data\r");
    150e:	8d e1       	ldi	r24, 0x1D	; 29
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	9f 93       	push	r25
    1514:	8f 93       	push	r24
    1516:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
		messageLength = strlen(text);
    151a:	f8 01       	movw	r30, r16
    151c:	01 90       	ld	r0, Z+
    151e:	00 20       	and	r0, r0
    1520:	e9 f7       	brne	.-6      	; 0x151c <transmit+0xc2>
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	cf 01       	movw	r24, r30
    1526:	80 1b       	sub	r24, r16
    1528:	91 0b       	sbc	r25, r17
    152a:	8c 01       	movw	r16, r24
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
		
	}
	printf("Transmitting %s\r",text);
    1530:	fe 01       	movw	r30, r28
    1532:	31 96       	adiw	r30, 0x01	; 1
    1534:	5f 01       	movw	r10, r30
    1536:	ff 93       	push	r31
    1538:	ef 93       	push	r30
    153a:	82 e3       	ldi	r24, 0x32	; 50
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	9f 93       	push	r25
    1540:	8f 93       	push	r24
    1542:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
	uint8_t to_address[5] = { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7 };
    1546:	85 e0       	ldi	r24, 0x05	; 5
    1548:	e4 e2       	ldi	r30, 0x24	; 36
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	de 01       	movw	r26, r28
    154e:	5e 96       	adiw	r26, 0x1e	; 30
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	8a 95       	dec	r24
    1556:	e1 f7       	brne	.-8      	; 0x1550 <transmit+0xf6>
	nRF24L01 *rf = setup_rf();
    1558:	0e 94 0b 0a 	call	0x1416	; 0x1416 <setup_rf>
    155c:	6c 01       	movw	r12, r24
	nRF24L01Message msg;
	nRF24L01_flush_transmit_message(rf);
    155e:	0e 94 83 03 	call	0x706	; 0x706 <nRF24L01_flush_transmit_message>
	memcpy(msg.data, text, messageLength);
    1562:	7e 01       	movw	r14, r28
    1564:	f5 e2       	ldi	r31, 0x25	; 37
    1566:	ef 0e       	add	r14, r31
    1568:	f1 1c       	adc	r15, r1
    156a:	a8 01       	movw	r20, r16
    156c:	b5 01       	movw	r22, r10
    156e:	c7 01       	movw	r24, r14
    1570:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <memcpy>
	msg.length = strlen((char *)msg.data) + 1;
    1574:	f7 01       	movw	r30, r14
    1576:	01 90       	ld	r0, Z+
    1578:	00 20       	and	r0, r0
    157a:	e9 f7       	brne	.-6      	; 0x1576 <transmit+0x11c>
    157c:	ee 19       	sub	r30, r14
    157e:	26 96       	adiw	r28, 0x06	; 6
    1580:	ef af       	std	Y+63, r30	; 0x3f
    1582:	26 97       	sbiw	r28, 0x06	; 6
	nRF24L01_transmit(rf, to_address, &msg);
    1584:	ae 01       	movw	r20, r28
    1586:	4d 5d       	subi	r20, 0xDD	; 221
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	be 01       	movw	r22, r28
    158c:	62 5e       	subi	r22, 0xE2	; 226
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	c6 01       	movw	r24, r12
    1592:	0e 94 ab 04 	call	0x956	; 0x956 <nRF24L01_transmit>
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cb 5b       	subi	r28, 0xBB	; 187
    15a0:	df 4f       	sbci	r29, 0xFF	; 255
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	df 90       	pop	r13
    15ba:	cf 90       	pop	r12
    15bc:	bf 90       	pop	r11
    15be:	af 90       	pop	r10
    15c0:	08 95       	ret

000015c2 <intToHex>:
#include "../header.h"
#include <string.h>

void intToHex(int var)
{
	memset(hex, 0, 5);
    15c2:	25 e0       	ldi	r18, 0x05	; 5
    15c4:	e8 ee       	ldi	r30, 0xE8	; 232
    15c6:	f2 e0       	ldi	r31, 0x02	; 2
    15c8:	df 01       	movw	r26, r30
    15ca:	1d 92       	st	X+, r1
    15cc:	2a 95       	dec	r18
    15ce:	e9 f7       	brne	.-6      	; 0x15ca <intToHex+0x8>
	int i;
	
	if (var<=15)
    15d0:	80 31       	cpi	r24, 0x10	; 16
    15d2:	91 05       	cpc	r25, r1
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <intToHex+0x16>
    15d6:	43 c0       	rjmp	.+134    	; 0x165e <intToHex+0x9c>
	{
		if (var<=9)
    15d8:	8a 30       	cpi	r24, 0x0A	; 10
    15da:	91 05       	cpc	r25, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <intToHex+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    15de:	4a e0       	ldi	r20, 0x0A	; 10
    15e0:	bf 01       	movw	r22, r30
    15e2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__itoa_ncheck>
    15e6:	08 95       	ret
		{
			itoa(var,hex,10);		// Int to string
		}
		else
		{
			switch(var)
    15e8:	8c 30       	cpi	r24, 0x0C	; 12
    15ea:	91 05       	cpc	r25, r1
    15ec:	e1 f0       	breq	.+56     	; 0x1626 <intToHex+0x64>
    15ee:	34 f4       	brge	.+12     	; 0x15fc <intToHex+0x3a>
    15f0:	8a 30       	cpi	r24, 0x0A	; 10
    15f2:	91 05       	cpc	r25, r1
    15f4:	51 f0       	breq	.+20     	; 0x160a <intToHex+0x48>
    15f6:	0b 97       	sbiw	r24, 0x0b	; 11
    15f8:	79 f0       	breq	.+30     	; 0x1618 <intToHex+0x56>
    15fa:	08 95       	ret
    15fc:	8e 30       	cpi	r24, 0x0E	; 14
    15fe:	91 05       	cpc	r25, r1
    1600:	01 f1       	breq	.+64     	; 0x1642 <intToHex+0x80>
    1602:	c4 f0       	brlt	.+48     	; 0x1634 <intToHex+0x72>
    1604:	0f 97       	sbiw	r24, 0x0f	; 15
    1606:	21 f1       	breq	.+72     	; 0x1650 <intToHex+0x8e>
    1608:	08 95       	ret
			{
				case 10:
				strcpy(hex,"A");
    160a:	81 e4       	ldi	r24, 0x41	; 65
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    1612:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
				break;
    1616:	08 95       	ret
				case 11:
				strcpy(hex,"B");
    1618:	82 e4       	ldi	r24, 0x42	; 66
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    1620:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
				break;
    1624:	08 95       	ret
				case 12:
				strcpy(hex,"C");
    1626:	83 e4       	ldi	r24, 0x43	; 67
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    162e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
				break;
    1632:	08 95       	ret
				case 13:
				strcpy(hex,"D");
    1634:	84 e4       	ldi	r24, 0x44	; 68
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    163c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
				break;
    1640:	08 95       	ret
				case 14:
				strcpy(hex,"E");
    1642:	85 e4       	ldi	r24, 0x45	; 69
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    164a:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
				break;
    164e:	08 95       	ret
				case 15:
				strcpy(hex,"F");
    1650:	86 e4       	ldi	r24, 0x46	; 70
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <hex+0x1>
    1658:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <hex>
    165c:	08 95       	ret
	else
	{
		long int quotient;
		int temp;
		i = 0;
		quotient = var;
    165e:	09 2e       	mov	r0, r25
    1660:	00 0c       	add	r0, r0
    1662:	aa 0b       	sbc	r26, r26
    1664:	bb 0b       	sbc	r27, r27
		while(quotient!=0)
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	a1 05       	cpc	r26, r1
    166a:	b1 05       	cpc	r27, r1
    166c:	a9 f1       	breq	.+106    	; 0x16d8 <intToHex+0x116>
    166e:	e8 ee       	ldi	r30, 0xE8	; 232
    1670:	f2 e0       	ldi	r31, 0x02	; 2
		{
			temp = quotient % 16;
    1672:	ac 01       	movw	r20, r24
    1674:	bd 01       	movw	r22, r26
    1676:	4f 70       	andi	r20, 0x0F	; 15
    1678:	55 27       	eor	r21, r21
    167a:	66 27       	eor	r22, r22
    167c:	70 78       	andi	r23, 0x80	; 128
    167e:	77 23       	and	r23, r23
    1680:	64 f4       	brge	.+24     	; 0x169a <intToHex+0xd8>
    1682:	41 50       	subi	r20, 0x01	; 1
    1684:	51 09       	sbc	r21, r1
    1686:	61 09       	sbc	r22, r1
    1688:	71 09       	sbc	r23, r1
    168a:	40 6f       	ori	r20, 0xF0	; 240
    168c:	5f 6f       	ori	r21, 0xFF	; 255
    168e:	6f 6f       	ori	r22, 0xFF	; 255
    1690:	7f 6f       	ori	r23, 0xFF	; 255
    1692:	4f 5f       	subi	r20, 0xFF	; 255
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	6f 4f       	sbci	r22, 0xFF	; 255
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
			//To convert integer into character
			if( temp < 10)
    169a:	4a 30       	cpi	r20, 0x0A	; 10
    169c:	51 05       	cpc	r21, r1
    169e:	1c f4       	brge	.+6      	; 0x16a6 <intToHex+0xe4>
			{
				temp =temp + 48;
    16a0:	40 5d       	subi	r20, 0xD0	; 208
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <intToHex+0xe8>
			}
			else
			{
				temp = temp + 55;
    16a6:	49 5c       	subi	r20, 0xC9	; 201
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			hex[i++]= temp;
    16aa:	41 93       	st	Z+, r20
			quotient = quotient / 16;
    16ac:	ac 01       	movw	r20, r24
    16ae:	bd 01       	movw	r22, r26
    16b0:	bb 23       	and	r27, r27
    16b2:	24 f4       	brge	.+8      	; 0x16bc <intToHex+0xfa>
    16b4:	41 5f       	subi	r20, 0xF1	; 241
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	6f 4f       	sbci	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	db 01       	movw	r26, r22
    16be:	ca 01       	movw	r24, r20
    16c0:	68 94       	set
    16c2:	13 f8       	bld	r1, 3
    16c4:	b5 95       	asr	r27
    16c6:	a7 95       	ror	r26
    16c8:	97 95       	ror	r25
    16ca:	87 95       	ror	r24
    16cc:	16 94       	lsr	r1
    16ce:	d1 f7       	brne	.-12     	; 0x16c4 <intToHex+0x102>
	{
		long int quotient;
		int temp;
		i = 0;
		quotient = var;
		while(quotient!=0)
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	a1 05       	cpc	r26, r1
    16d4:	b1 05       	cpc	r27, r1
    16d6:	69 f6       	brne	.-102    	; 0x1672 <intToHex+0xb0>
    16d8:	08 95       	ret

000016da <windDirection>:
int wDir = 11;

void windDirection(void)
{
	
	enableChannel(CH1);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 1b 05 	call	0xa36	; 0xa36 <enableChannel>
	
	int i = ReadADC(0);
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 ba 09 	call	0x1374	; 0x1374 <ReadADC>
	if (i<10)
    16e8:	8a 30       	cpi	r24, 0x0A	; 10
    16ea:	91 05       	cpc	r25, r1
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <windDirection+0x1e>
	{
		i = wDir;
    16ee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wDir>
    16f2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <wDir+0x1>
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <windDirection+0x26>
	}
	else
	{
		wDir = i;
    16f8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <wDir+0x1>
    16fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wDir>
	}
	
	if (i > 230 && i < 250)
    1700:	9c 01       	movw	r18, r24
    1702:	87 5e       	subi	r24, 0xE7	; 231
    1704:	91 09       	sbc	r25, r1
    1706:	43 97       	sbiw	r24, 0x13	; 19
    1708:	28 f4       	brcc	.+10     	; 0x1714 <windDirection+0x3a>
	{
		dataStream[27] = 78;
    170a:	e0 eb       	ldi	r30, 0xB0	; 176
    170c:	f2 e0       	ldi	r31, 0x02	; 2
    170e:	8e e4       	ldi	r24, 0x4E	; 78
    1710:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 0;
    1712:	14 8e       	std	Z+28, r1	; 0x1c
	}
	if (i > 110 && i < 150)
    1714:	c9 01       	movw	r24, r18
    1716:	8f 56       	subi	r24, 0x6F	; 111
    1718:	91 09       	sbc	r25, r1
    171a:	87 97       	sbiw	r24, 0x27	; 39
    171c:	30 f4       	brcc	.+12     	; 0x172a <windDirection+0x50>
	{
		dataStream[27] = 78;
    171e:	e0 eb       	ldi	r30, 0xB0	; 176
    1720:	f2 e0       	ldi	r31, 0x02	; 2
    1722:	8e e4       	ldi	r24, 0x4E	; 78
    1724:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 69;
    1726:	85 e4       	ldi	r24, 0x45	; 69
    1728:	84 8f       	std	Z+28, r24	; 0x1c
	}
	if (i > 10 && i < 140)
    172a:	c9 01       	movw	r24, r18
    172c:	0b 97       	sbiw	r24, 0x0b	; 11
    172e:	81 38       	cpi	r24, 0x81	; 129
    1730:	91 05       	cpc	r25, r1
    1732:	28 f4       	brcc	.+10     	; 0x173e <windDirection+0x64>
	{
		dataStream[27] = 69;
    1734:	e0 eb       	ldi	r30, 0xB0	; 176
    1736:	f2 e0       	ldi	r31, 0x02	; 2
    1738:	85 e4       	ldi	r24, 0x45	; 69
    173a:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 0;
    173c:	14 8e       	std	Z+28, r1	; 0x1c
	}
	if (i > 840 && i < 880)
    173e:	c9 01       	movw	r24, r18
    1740:	89 54       	subi	r24, 0x49	; 73
    1742:	93 40       	sbci	r25, 0x03	; 3
    1744:	87 97       	sbiw	r24, 0x27	; 39
    1746:	30 f4       	brcc	.+12     	; 0x1754 <windDirection+0x7a>
	{
		dataStream[27] = 83;
    1748:	e0 eb       	ldi	r30, 0xB0	; 176
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	83 e5       	ldi	r24, 0x53	; 83
    174e:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 69;
    1750:	85 e4       	ldi	r24, 0x45	; 69
    1752:	84 8f       	std	Z+28, r24	; 0x1c
	}
	if (i > 710 && i < 750)
    1754:	c9 01       	movw	r24, r18
    1756:	87 5c       	subi	r24, 0xC7	; 199
    1758:	92 40       	sbci	r25, 0x02	; 2
    175a:	87 97       	sbiw	r24, 0x27	; 39
    175c:	28 f4       	brcc	.+10     	; 0x1768 <windDirection+0x8e>
	{
		dataStream[27] = 83;
    175e:	e0 eb       	ldi	r30, 0xB0	; 176
    1760:	f2 e0       	ldi	r31, 0x02	; 2
    1762:	83 e5       	ldi	r24, 0x53	; 83
    1764:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 0;
    1766:	14 8e       	std	Z+28, r1	; 0x1c
	}
	if (i > 590 && i < 630)
    1768:	c9 01       	movw	r24, r18
    176a:	8f 54       	subi	r24, 0x4F	; 79
    176c:	92 40       	sbci	r25, 0x02	; 2
    176e:	87 97       	sbiw	r24, 0x27	; 39
    1770:	30 f4       	brcc	.+12     	; 0x177e <windDirection+0xa4>
	{
		dataStream[27] = 83;
    1772:	e0 eb       	ldi	r30, 0xB0	; 176
    1774:	f2 e0       	ldi	r31, 0x02	; 2
    1776:	83 e5       	ldi	r24, 0x53	; 83
    1778:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 87;
    177a:	87 e5       	ldi	r24, 0x57	; 87
    177c:	84 8f       	std	Z+28, r24	; 0x1c
	}
	if (i > 490 && i < 530)
    177e:	c9 01       	movw	r24, r18
    1780:	8b 5e       	subi	r24, 0xEB	; 235
    1782:	91 40       	sbci	r25, 0x01	; 1
    1784:	87 97       	sbiw	r24, 0x27	; 39
    1786:	28 f4       	brcc	.+10     	; 0x1792 <windDirection+0xb8>
	{
		dataStream[27] = 87;
    1788:	e0 eb       	ldi	r30, 0xB0	; 176
    178a:	f2 e0       	ldi	r31, 0x02	; 2
    178c:	87 e5       	ldi	r24, 0x57	; 87
    178e:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 0;
    1790:	14 8e       	std	Z+28, r1	; 0x1c
	}
	if (i > 340 && i < 380)
    1792:	25 55       	subi	r18, 0x55	; 85
    1794:	31 40       	sbci	r19, 0x01	; 1
    1796:	27 32       	cpi	r18, 0x27	; 39
    1798:	31 05       	cpc	r19, r1
    179a:	30 f4       	brcc	.+12     	; 0x17a8 <windDirection+0xce>
	{
		dataStream[27] = 78;
    179c:	e0 eb       	ldi	r30, 0xB0	; 176
    179e:	f2 e0       	ldi	r31, 0x02	; 2
    17a0:	8e e4       	ldi	r24, 0x4E	; 78
    17a2:	83 8f       	std	Z+27, r24	; 0x1b
		dataStream[28] = 87;
    17a4:	87 e5       	ldi	r24, 0x57	; 87
    17a6:	84 8f       	std	Z+28, r24	; 0x1c
    17a8:	08 95       	ret

000017aa <uart_putchar>:
    stdout = &mystdout; //required by printf
    stdin  = &mystdin; //required by scanf
}

//redirect stdout to UART
int uart_putchar(char c, FILE *stream) {
    17aa:	cf 93       	push	r28
    17ac:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    17ae:	8a 30       	cpi	r24, 0x0A	; 10
    17b0:	19 f4       	brne	.+6      	; 0x17b8 <uart_putchar+0xe>
		uart_putchar('\r', stream);
    17b2:	8d e0       	ldi	r24, 0x0D	; 13
    17b4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    17b8:	e0 ec       	ldi	r30, 0xC0	; 192
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	85 ff       	sbrs	r24, 5
    17c0:	fd cf       	rjmp	.-6      	; 0x17bc <uart_putchar+0x12>
	UDR0 = c;
    17c2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <uart_getchar>:

//redirect stdin to UART
int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    17ce:	e0 ec       	ldi	r30, 0xC0	; 192
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	ec f7       	brge	.-6      	; 0x17d2 <uart_getchar+0x4>
	return UDR0;
    17d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	08 95       	ret

000017e0 <ioinit>:
static FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ); //redirect uart_getchar() to stdio

void ioinit (void)
{
    //USART Baud rate: 9600, 8data, 1stop
    UBRR0H = MYUBRR >> 8;
    17e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = MYUBRR;
    17e4:	83 e3       	ldi	r24, 0x33	; 51
    17e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    stdout = &mystdout; //required by printf
    17f0:	e3 ef       	ldi	r30, 0xF3	; 243
    17f2:	f2 e0       	ldi	r31, 0x02	; 2
    17f4:	86 e1       	ldi	r24, 0x16	; 22
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	93 83       	std	Z+3, r25	; 0x03
    17fa:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &mystdin; //required by scanf
    17fc:	88 e0       	ldi	r24, 0x08	; 8
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	08 95       	ret

00001806 <__divsf3>:
    1806:	0e 94 17 0c 	call	0x182e	; 0x182e <__divsf3x>
    180a:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_round>
    180e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__fp_pscB>
    1812:	58 f0       	brcs	.+22     	; 0x182a <__divsf3+0x24>
    1814:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_pscA>
    1818:	40 f0       	brcs	.+16     	; 0x182a <__divsf3+0x24>
    181a:	29 f4       	brne	.+10     	; 0x1826 <__divsf3+0x20>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	29 f0       	breq	.+10     	; 0x182a <__divsf3+0x24>
    1820:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1824:	51 11       	cpse	r21, r1
    1826:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_szero>
    182a:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>

0000182e <__divsf3x>:
    182e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fp_split3>
    1832:	68 f3       	brcs	.-38     	; 0x180e <__divsf3+0x8>

00001834 <__divsf3_pse>:
    1834:	99 23       	and	r25, r25
    1836:	b1 f3       	breq	.-20     	; 0x1824 <__divsf3+0x1e>
    1838:	55 23       	and	r21, r21
    183a:	91 f3       	breq	.-28     	; 0x1820 <__divsf3+0x1a>
    183c:	95 1b       	sub	r25, r21
    183e:	55 0b       	sbc	r21, r21
    1840:	bb 27       	eor	r27, r27
    1842:	aa 27       	eor	r26, r26
    1844:	62 17       	cp	r22, r18
    1846:	73 07       	cpc	r23, r19
    1848:	84 07       	cpc	r24, r20
    184a:	38 f0       	brcs	.+14     	; 0x185a <__divsf3_pse+0x26>
    184c:	9f 5f       	subi	r25, 0xFF	; 255
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	22 0f       	add	r18, r18
    1852:	33 1f       	adc	r19, r19
    1854:	44 1f       	adc	r20, r20
    1856:	aa 1f       	adc	r26, r26
    1858:	a9 f3       	breq	.-22     	; 0x1844 <__divsf3_pse+0x10>
    185a:	35 d0       	rcall	.+106    	; 0x18c6 <__divsf3_pse+0x92>
    185c:	0e 2e       	mov	r0, r30
    185e:	3a f0       	brmi	.+14     	; 0x186e <__divsf3_pse+0x3a>
    1860:	e0 e8       	ldi	r30, 0x80	; 128
    1862:	32 d0       	rcall	.+100    	; 0x18c8 <__divsf3_pse+0x94>
    1864:	91 50       	subi	r25, 0x01	; 1
    1866:	50 40       	sbci	r21, 0x00	; 0
    1868:	e6 95       	lsr	r30
    186a:	00 1c       	adc	r0, r0
    186c:	ca f7       	brpl	.-14     	; 0x1860 <__divsf3_pse+0x2c>
    186e:	2b d0       	rcall	.+86     	; 0x18c6 <__divsf3_pse+0x92>
    1870:	fe 2f       	mov	r31, r30
    1872:	29 d0       	rcall	.+82     	; 0x18c6 <__divsf3_pse+0x92>
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	bb 1f       	adc	r27, r27
    187c:	26 17       	cp	r18, r22
    187e:	37 07       	cpc	r19, r23
    1880:	48 07       	cpc	r20, r24
    1882:	ab 07       	cpc	r26, r27
    1884:	b0 e8       	ldi	r27, 0x80	; 128
    1886:	09 f0       	breq	.+2      	; 0x188a <__divsf3_pse+0x56>
    1888:	bb 0b       	sbc	r27, r27
    188a:	80 2d       	mov	r24, r0
    188c:	bf 01       	movw	r22, r30
    188e:	ff 27       	eor	r31, r31
    1890:	93 58       	subi	r25, 0x83	; 131
    1892:	5f 4f       	sbci	r21, 0xFF	; 255
    1894:	3a f0       	brmi	.+14     	; 0x18a4 <__divsf3_pse+0x70>
    1896:	9e 3f       	cpi	r25, 0xFE	; 254
    1898:	51 05       	cpc	r21, r1
    189a:	78 f0       	brcs	.+30     	; 0x18ba <__divsf3_pse+0x86>
    189c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    18a0:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_szero>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	e4 f3       	brlt	.-8      	; 0x18a0 <__divsf3_pse+0x6c>
    18a8:	98 3e       	cpi	r25, 0xE8	; 232
    18aa:	d4 f3       	brlt	.-12     	; 0x18a0 <__divsf3_pse+0x6c>
    18ac:	86 95       	lsr	r24
    18ae:	77 95       	ror	r23
    18b0:	67 95       	ror	r22
    18b2:	b7 95       	ror	r27
    18b4:	f7 95       	ror	r31
    18b6:	9f 5f       	subi	r25, 0xFF	; 255
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__divsf3_pse+0x78>
    18ba:	88 0f       	add	r24, r24
    18bc:	91 1d       	adc	r25, r1
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	97 f9       	bld	r25, 7
    18c4:	08 95       	ret
    18c6:	e1 e0       	ldi	r30, 0x01	; 1
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	bb 1f       	adc	r27, r27
    18d0:	62 17       	cp	r22, r18
    18d2:	73 07       	cpc	r23, r19
    18d4:	84 07       	cpc	r24, r20
    18d6:	ba 07       	cpc	r27, r26
    18d8:	20 f0       	brcs	.+8      	; 0x18e2 <__divsf3_pse+0xae>
    18da:	62 1b       	sub	r22, r18
    18dc:	73 0b       	sbc	r23, r19
    18de:	84 0b       	sbc	r24, r20
    18e0:	ba 0b       	sbc	r27, r26
    18e2:	ee 1f       	adc	r30, r30
    18e4:	88 f7       	brcc	.-30     	; 0x18c8 <__divsf3_pse+0x94>
    18e6:	e0 95       	com	r30
    18e8:	08 95       	ret

000018ea <__fixsfsi>:
    18ea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__fixunssfsi>
    18ee:	68 94       	set
    18f0:	b1 11       	cpse	r27, r1
    18f2:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_szero>
    18f6:	08 95       	ret

000018f8 <__fixunssfsi>:
    18f8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_splitA>
    18fc:	88 f0       	brcs	.+34     	; 0x1920 <__fixunssfsi+0x28>
    18fe:	9f 57       	subi	r25, 0x7F	; 127
    1900:	98 f0       	brcs	.+38     	; 0x1928 <__fixunssfsi+0x30>
    1902:	b9 2f       	mov	r27, r25
    1904:	99 27       	eor	r25, r25
    1906:	b7 51       	subi	r27, 0x17	; 23
    1908:	b0 f0       	brcs	.+44     	; 0x1936 <__fixunssfsi+0x3e>
    190a:	e1 f0       	breq	.+56     	; 0x1944 <__fixunssfsi+0x4c>
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	1a f0       	brmi	.+6      	; 0x191c <__fixunssfsi+0x24>
    1916:	ba 95       	dec	r27
    1918:	c9 f7       	brne	.-14     	; 0x190c <__fixunssfsi+0x14>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <__fixunssfsi+0x4c>
    191c:	b1 30       	cpi	r27, 0x01	; 1
    191e:	91 f0       	breq	.+36     	; 0x1944 <__fixunssfsi+0x4c>
    1920:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fp_zero>
    1924:	b1 e0       	ldi	r27, 0x01	; 1
    1926:	08 95       	ret
    1928:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_zero>
    192c:	67 2f       	mov	r22, r23
    192e:	78 2f       	mov	r23, r24
    1930:	88 27       	eor	r24, r24
    1932:	b8 5f       	subi	r27, 0xF8	; 248
    1934:	39 f0       	breq	.+14     	; 0x1944 <__fixunssfsi+0x4c>
    1936:	b9 3f       	cpi	r27, 0xF9	; 249
    1938:	cc f3       	brlt	.-14     	; 0x192c <__fixunssfsi+0x34>
    193a:	86 95       	lsr	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b3 95       	inc	r27
    1942:	d9 f7       	brne	.-10     	; 0x193a <__fixunssfsi+0x42>
    1944:	3e f4       	brtc	.+14     	; 0x1954 <__fixunssfsi+0x5c>
    1946:	90 95       	com	r25
    1948:	80 95       	com	r24
    194a:	70 95       	com	r23
    194c:	61 95       	neg	r22
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	8f 4f       	sbci	r24, 0xFF	; 255
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	08 95       	ret

00001956 <__floatunsisf>:
    1956:	e8 94       	clt
    1958:	09 c0       	rjmp	.+18     	; 0x196c <__floatsisf+0x12>

0000195a <__floatsisf>:
    195a:	97 fb       	bst	r25, 7
    195c:	3e f4       	brtc	.+14     	; 0x196c <__floatsisf+0x12>
    195e:	90 95       	com	r25
    1960:	80 95       	com	r24
    1962:	70 95       	com	r23
    1964:	61 95       	neg	r22
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	8f 4f       	sbci	r24, 0xFF	; 255
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	99 23       	and	r25, r25
    196e:	a9 f0       	breq	.+42     	; 0x199a <__floatsisf+0x40>
    1970:	f9 2f       	mov	r31, r25
    1972:	96 e9       	ldi	r25, 0x96	; 150
    1974:	bb 27       	eor	r27, r27
    1976:	93 95       	inc	r25
    1978:	f6 95       	lsr	r31
    197a:	87 95       	ror	r24
    197c:	77 95       	ror	r23
    197e:	67 95       	ror	r22
    1980:	b7 95       	ror	r27
    1982:	f1 11       	cpse	r31, r1
    1984:	f8 cf       	rjmp	.-16     	; 0x1976 <__floatsisf+0x1c>
    1986:	fa f4       	brpl	.+62     	; 0x19c6 <__floatsisf+0x6c>
    1988:	bb 0f       	add	r27, r27
    198a:	11 f4       	brne	.+4      	; 0x1990 <__floatsisf+0x36>
    198c:	60 ff       	sbrs	r22, 0
    198e:	1b c0       	rjmp	.+54     	; 0x19c6 <__floatsisf+0x6c>
    1990:	6f 5f       	subi	r22, 0xFF	; 255
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8f 4f       	sbci	r24, 0xFF	; 255
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	16 c0       	rjmp	.+44     	; 0x19c6 <__floatsisf+0x6c>
    199a:	88 23       	and	r24, r24
    199c:	11 f0       	breq	.+4      	; 0x19a2 <__floatsisf+0x48>
    199e:	96 e9       	ldi	r25, 0x96	; 150
    19a0:	11 c0       	rjmp	.+34     	; 0x19c4 <__floatsisf+0x6a>
    19a2:	77 23       	and	r23, r23
    19a4:	21 f0       	breq	.+8      	; 0x19ae <__floatsisf+0x54>
    19a6:	9e e8       	ldi	r25, 0x8E	; 142
    19a8:	87 2f       	mov	r24, r23
    19aa:	76 2f       	mov	r23, r22
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <__floatsisf+0x5e>
    19ae:	66 23       	and	r22, r22
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__floatsisf+0x74>
    19b2:	96 e8       	ldi	r25, 0x86	; 134
    19b4:	86 2f       	mov	r24, r22
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	2a f0       	brmi	.+10     	; 0x19c6 <__floatsisf+0x6c>
    19bc:	9a 95       	dec	r25
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	da f7       	brpl	.-10     	; 0x19bc <__floatsisf+0x62>
    19c6:	88 0f       	add	r24, r24
    19c8:	96 95       	lsr	r25
    19ca:	87 95       	ror	r24
    19cc:	97 f9       	bld	r25, 7
    19ce:	08 95       	ret

000019d0 <__fp_inf>:
    19d0:	97 f9       	bld	r25, 7
    19d2:	9f 67       	ori	r25, 0x7F	; 127
    19d4:	80 e8       	ldi	r24, 0x80	; 128
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	08 95       	ret

000019dc <__fp_nan>:
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	80 ec       	ldi	r24, 0xC0	; 192
    19e0:	08 95       	ret

000019e2 <__fp_pscA>:
    19e2:	00 24       	eor	r0, r0
    19e4:	0a 94       	dec	r0
    19e6:	16 16       	cp	r1, r22
    19e8:	17 06       	cpc	r1, r23
    19ea:	18 06       	cpc	r1, r24
    19ec:	09 06       	cpc	r0, r25
    19ee:	08 95       	ret

000019f0 <__fp_pscB>:
    19f0:	00 24       	eor	r0, r0
    19f2:	0a 94       	dec	r0
    19f4:	12 16       	cp	r1, r18
    19f6:	13 06       	cpc	r1, r19
    19f8:	14 06       	cpc	r1, r20
    19fa:	05 06       	cpc	r0, r21
    19fc:	08 95       	ret

000019fe <__fp_round>:
    19fe:	09 2e       	mov	r0, r25
    1a00:	03 94       	inc	r0
    1a02:	00 0c       	add	r0, r0
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <__fp_round+0xc>
    1a06:	88 23       	and	r24, r24
    1a08:	52 f0       	brmi	.+20     	; 0x1a1e <__fp_round+0x20>
    1a0a:	bb 0f       	add	r27, r27
    1a0c:	40 f4       	brcc	.+16     	; 0x1a1e <__fp_round+0x20>
    1a0e:	bf 2b       	or	r27, r31
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <__fp_round+0x18>
    1a12:	60 ff       	sbrs	r22, 0
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__fp_round+0x20>
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	08 95       	ret

00001a20 <__fp_split3>:
    1a20:	57 fd       	sbrc	r21, 7
    1a22:	90 58       	subi	r25, 0x80	; 128
    1a24:	44 0f       	add	r20, r20
    1a26:	55 1f       	adc	r21, r21
    1a28:	59 f0       	breq	.+22     	; 0x1a40 <__fp_splitA+0x10>
    1a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2c:	71 f0       	breq	.+28     	; 0x1a4a <__fp_splitA+0x1a>
    1a2e:	47 95       	ror	r20

00001a30 <__fp_splitA>:
    1a30:	88 0f       	add	r24, r24
    1a32:	97 fb       	bst	r25, 7
    1a34:	99 1f       	adc	r25, r25
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <__fp_splitA+0x20>
    1a38:	9f 3f       	cpi	r25, 0xFF	; 255
    1a3a:	79 f0       	breq	.+30     	; 0x1a5a <__fp_splitA+0x2a>
    1a3c:	87 95       	ror	r24
    1a3e:	08 95       	ret
    1a40:	12 16       	cp	r1, r18
    1a42:	13 06       	cpc	r1, r19
    1a44:	14 06       	cpc	r1, r20
    1a46:	55 1f       	adc	r21, r21
    1a48:	f2 cf       	rjmp	.-28     	; 0x1a2e <__fp_split3+0xe>
    1a4a:	46 95       	lsr	r20
    1a4c:	f1 df       	rcall	.-30     	; 0x1a30 <__fp_splitA>
    1a4e:	08 c0       	rjmp	.+16     	; 0x1a60 <__fp_splitA+0x30>
    1a50:	16 16       	cp	r1, r22
    1a52:	17 06       	cpc	r1, r23
    1a54:	18 06       	cpc	r1, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	f1 cf       	rjmp	.-30     	; 0x1a3c <__fp_splitA+0xc>
    1a5a:	86 95       	lsr	r24
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	61 05       	cpc	r22, r1
    1a60:	08 94       	sec
    1a62:	08 95       	ret

00001a64 <__fp_zero>:
    1a64:	e8 94       	clt

00001a66 <__fp_szero>:
    1a66:	bb 27       	eor	r27, r27
    1a68:	66 27       	eor	r22, r22
    1a6a:	77 27       	eor	r23, r23
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	97 f9       	bld	r25, 7
    1a70:	08 95       	ret

00001a72 <__mulsf3>:
    1a72:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3x>
    1a76:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_round>
    1a7a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_pscA>
    1a7e:	38 f0       	brcs	.+14     	; 0x1a8e <__mulsf3+0x1c>
    1a80:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__fp_pscB>
    1a84:	20 f0       	brcs	.+8      	; 0x1a8e <__mulsf3+0x1c>
    1a86:	95 23       	and	r25, r21
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <__mulsf3+0x1c>
    1a8a:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1a8e:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>
    1a92:	11 24       	eor	r1, r1
    1a94:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_szero>

00001a98 <__mulsf3x>:
    1a98:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fp_split3>
    1a9c:	70 f3       	brcs	.-36     	; 0x1a7a <__mulsf3+0x8>

00001a9e <__mulsf3_pse>:
    1a9e:	95 9f       	mul	r25, r21
    1aa0:	c1 f3       	breq	.-16     	; 0x1a92 <__mulsf3+0x20>
    1aa2:	95 0f       	add	r25, r21
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	62 9f       	mul	r22, r18
    1aaa:	f0 01       	movw	r30, r0
    1aac:	72 9f       	mul	r23, r18
    1aae:	bb 27       	eor	r27, r27
    1ab0:	f0 0d       	add	r31, r0
    1ab2:	b1 1d       	adc	r27, r1
    1ab4:	63 9f       	mul	r22, r19
    1ab6:	aa 27       	eor	r26, r26
    1ab8:	f0 0d       	add	r31, r0
    1aba:	b1 1d       	adc	r27, r1
    1abc:	aa 1f       	adc	r26, r26
    1abe:	64 9f       	mul	r22, r20
    1ac0:	66 27       	eor	r22, r22
    1ac2:	b0 0d       	add	r27, r0
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	66 1f       	adc	r22, r22
    1ac8:	82 9f       	mul	r24, r18
    1aca:	22 27       	eor	r18, r18
    1acc:	b0 0d       	add	r27, r0
    1ace:	a1 1d       	adc	r26, r1
    1ad0:	62 1f       	adc	r22, r18
    1ad2:	73 9f       	mul	r23, r19
    1ad4:	b0 0d       	add	r27, r0
    1ad6:	a1 1d       	adc	r26, r1
    1ad8:	62 1f       	adc	r22, r18
    1ada:	83 9f       	mul	r24, r19
    1adc:	a0 0d       	add	r26, r0
    1ade:	61 1d       	adc	r22, r1
    1ae0:	22 1f       	adc	r18, r18
    1ae2:	74 9f       	mul	r23, r20
    1ae4:	33 27       	eor	r19, r19
    1ae6:	a0 0d       	add	r26, r0
    1ae8:	61 1d       	adc	r22, r1
    1aea:	23 1f       	adc	r18, r19
    1aec:	84 9f       	mul	r24, r20
    1aee:	60 0d       	add	r22, r0
    1af0:	21 1d       	adc	r18, r1
    1af2:	82 2f       	mov	r24, r18
    1af4:	76 2f       	mov	r23, r22
    1af6:	6a 2f       	mov	r22, r26
    1af8:	11 24       	eor	r1, r1
    1afa:	9f 57       	subi	r25, 0x7F	; 127
    1afc:	50 40       	sbci	r21, 0x00	; 0
    1afe:	9a f0       	brmi	.+38     	; 0x1b26 <__mulsf3_pse+0x88>
    1b00:	f1 f0       	breq	.+60     	; 0x1b3e <__mulsf3_pse+0xa0>
    1b02:	88 23       	and	r24, r24
    1b04:	4a f0       	brmi	.+18     	; 0x1b18 <__mulsf3_pse+0x7a>
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	66 1f       	adc	r22, r22
    1b0e:	77 1f       	adc	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	50 40       	sbci	r21, 0x00	; 0
    1b16:	a9 f7       	brne	.-22     	; 0x1b02 <__mulsf3_pse+0x64>
    1b18:	9e 3f       	cpi	r25, 0xFE	; 254
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	80 f0       	brcs	.+32     	; 0x1b3e <__mulsf3_pse+0xa0>
    1b1e:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1b22:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_szero>
    1b26:	5f 3f       	cpi	r21, 0xFF	; 255
    1b28:	e4 f3       	brlt	.-8      	; 0x1b22 <__mulsf3_pse+0x84>
    1b2a:	98 3e       	cpi	r25, 0xE8	; 232
    1b2c:	d4 f3       	brlt	.-12     	; 0x1b22 <__mulsf3_pse+0x84>
    1b2e:	86 95       	lsr	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f7 95       	ror	r31
    1b38:	e7 95       	ror	r30
    1b3a:	9f 5f       	subi	r25, 0xFF	; 255
    1b3c:	c1 f7       	brne	.-16     	; 0x1b2e <__mulsf3_pse+0x90>
    1b3e:	fe 2b       	or	r31, r30
    1b40:	88 0f       	add	r24, r24
    1b42:	91 1d       	adc	r25, r1
    1b44:	96 95       	lsr	r25
    1b46:	87 95       	ror	r24
    1b48:	97 f9       	bld	r25, 7
    1b4a:	08 95       	ret

00001b4c <__mulsi3>:
    1b4c:	db 01       	movw	r26, r22
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
    1b56:	bf 91       	pop	r27
    1b58:	af 91       	pop	r26
    1b5a:	a2 9f       	mul	r26, r18
    1b5c:	80 0d       	add	r24, r0
    1b5e:	91 1d       	adc	r25, r1
    1b60:	a3 9f       	mul	r26, r19
    1b62:	90 0d       	add	r25, r0
    1b64:	b2 9f       	mul	r27, r18
    1b66:	90 0d       	add	r25, r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	08 95       	ret

00001b6c <__udivmodsi4>:
    1b6c:	a1 e2       	ldi	r26, 0x21	; 33
    1b6e:	1a 2e       	mov	r1, r26
    1b70:	aa 1b       	sub	r26, r26
    1b72:	bb 1b       	sub	r27, r27
    1b74:	fd 01       	movw	r30, r26
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <__udivmodsi4_ep>

00001b78 <__udivmodsi4_loop>:
    1b78:	aa 1f       	adc	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	ee 1f       	adc	r30, r30
    1b7e:	ff 1f       	adc	r31, r31
    1b80:	a2 17       	cp	r26, r18
    1b82:	b3 07       	cpc	r27, r19
    1b84:	e4 07       	cpc	r30, r20
    1b86:	f5 07       	cpc	r31, r21
    1b88:	20 f0       	brcs	.+8      	; 0x1b92 <__udivmodsi4_ep>
    1b8a:	a2 1b       	sub	r26, r18
    1b8c:	b3 0b       	sbc	r27, r19
    1b8e:	e4 0b       	sbc	r30, r20
    1b90:	f5 0b       	sbc	r31, r21

00001b92 <__udivmodsi4_ep>:
    1b92:	66 1f       	adc	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	88 1f       	adc	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	1a 94       	dec	r1
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <__udivmodsi4_loop>
    1b9e:	60 95       	com	r22
    1ba0:	70 95       	com	r23
    1ba2:	80 95       	com	r24
    1ba4:	90 95       	com	r25
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	bd 01       	movw	r22, r26
    1bac:	cf 01       	movw	r24, r30
    1bae:	08 95       	ret

00001bb0 <__divmodsi4>:
    1bb0:	05 2e       	mov	r0, r21
    1bb2:	97 fb       	bst	r25, 7
    1bb4:	1e f4       	brtc	.+6      	; 0x1bbc <__divmodsi4+0xc>
    1bb6:	00 94       	com	r0
    1bb8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__negsi2>
    1bbc:	57 fd       	sbrc	r21, 7
    1bbe:	07 d0       	rcall	.+14     	; 0x1bce <__divmodsi4_neg2>
    1bc0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__udivmodsi4>
    1bc4:	07 fc       	sbrc	r0, 7
    1bc6:	03 d0       	rcall	.+6      	; 0x1bce <__divmodsi4_neg2>
    1bc8:	4e f4       	brtc	.+18     	; 0x1bdc <__divmodsi4_exit>
    1bca:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__negsi2>

00001bce <__divmodsi4_neg2>:
    1bce:	50 95       	com	r21
    1bd0:	40 95       	com	r20
    1bd2:	30 95       	com	r19
    1bd4:	21 95       	neg	r18
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255

00001bdc <__divmodsi4_exit>:
    1bdc:	08 95       	ret

00001bde <__negsi2>:
    1bde:	90 95       	com	r25
    1be0:	80 95       	com	r24
    1be2:	70 95       	com	r23
    1be4:	61 95       	neg	r22
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	08 95       	ret

00001bee <__tablejump2__>:
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	05 90       	lpm	r0, Z+
    1bf4:	f4 91       	lpm	r31, Z
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	09 94       	ijmp

00001bfa <__muluhisi3>:
    1bfa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__umulhisi3>
    1bfe:	a5 9f       	mul	r26, r21
    1c00:	90 0d       	add	r25, r0
    1c02:	b4 9f       	mul	r27, r20
    1c04:	90 0d       	add	r25, r0
    1c06:	a4 9f       	mul	r26, r20
    1c08:	80 0d       	add	r24, r0
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	11 24       	eor	r1, r1
    1c0e:	08 95       	ret

00001c10 <__mulshisi3>:
    1c10:	b7 ff       	sbrs	r27, 7
    1c12:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__muluhisi3>

00001c16 <__mulohisi3>:
    1c16:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
    1c1a:	82 1b       	sub	r24, r18
    1c1c:	93 0b       	sbc	r25, r19
    1c1e:	08 95       	ret

00001c20 <__umulhisi3>:
    1c20:	a2 9f       	mul	r26, r18
    1c22:	b0 01       	movw	r22, r0
    1c24:	b3 9f       	mul	r27, r19
    1c26:	c0 01       	movw	r24, r0
    1c28:	a3 9f       	mul	r26, r19
    1c2a:	70 0d       	add	r23, r0
    1c2c:	81 1d       	adc	r24, r1
    1c2e:	11 24       	eor	r1, r1
    1c30:	91 1d       	adc	r25, r1
    1c32:	b2 9f       	mul	r27, r18
    1c34:	70 0d       	add	r23, r0
    1c36:	81 1d       	adc	r24, r1
    1c38:	11 24       	eor	r1, r1
    1c3a:	91 1d       	adc	r25, r1
    1c3c:	08 95       	ret

00001c3e <malloc>:
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	10 f4       	brcc	.+4      	; 0x1c50 <malloc+0x12>
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <__flp>
    1c54:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <__flp+0x1>
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	30 97       	sbiw	r30, 0x00	; 0
    1c62:	19 f1       	breq	.+70     	; 0x1caa <malloc+0x6c>
    1c64:	40 81       	ld	r20, Z
    1c66:	51 81       	ldd	r21, Z+1	; 0x01
    1c68:	02 81       	ldd	r16, Z+2	; 0x02
    1c6a:	13 81       	ldd	r17, Z+3	; 0x03
    1c6c:	48 17       	cp	r20, r24
    1c6e:	59 07       	cpc	r21, r25
    1c70:	c8 f0       	brcs	.+50     	; 0x1ca4 <malloc+0x66>
    1c72:	84 17       	cp	r24, r20
    1c74:	95 07       	cpc	r25, r21
    1c76:	69 f4       	brne	.+26     	; 0x1c92 <malloc+0x54>
    1c78:	10 97       	sbiw	r26, 0x00	; 0
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <malloc+0x4a>
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	0c 93       	st	X, r16
    1c80:	12 97       	sbiw	r26, 0x02	; 2
    1c82:	13 96       	adiw	r26, 0x03	; 3
    1c84:	1c 93       	st	X, r17
    1c86:	27 c0       	rjmp	.+78     	; 0x1cd6 <malloc+0x98>
    1c88:	00 93 f1 02 	sts	0x02F1, r16	; 0x8002f1 <__flp>
    1c8c:	10 93 f2 02 	sts	0x02F2, r17	; 0x8002f2 <__flp+0x1>
    1c90:	22 c0       	rjmp	.+68     	; 0x1cd6 <malloc+0x98>
    1c92:	21 15       	cp	r18, r1
    1c94:	31 05       	cpc	r19, r1
    1c96:	19 f0       	breq	.+6      	; 0x1c9e <malloc+0x60>
    1c98:	42 17       	cp	r20, r18
    1c9a:	53 07       	cpc	r21, r19
    1c9c:	18 f4       	brcc	.+6      	; 0x1ca4 <malloc+0x66>
    1c9e:	9a 01       	movw	r18, r20
    1ca0:	bd 01       	movw	r22, r26
    1ca2:	ef 01       	movw	r28, r30
    1ca4:	df 01       	movw	r26, r30
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	db cf       	rjmp	.-74     	; 0x1c60 <malloc+0x22>
    1caa:	21 15       	cp	r18, r1
    1cac:	31 05       	cpc	r19, r1
    1cae:	f9 f0       	breq	.+62     	; 0x1cee <malloc+0xb0>
    1cb0:	28 1b       	sub	r18, r24
    1cb2:	39 0b       	sbc	r19, r25
    1cb4:	24 30       	cpi	r18, 0x04	; 4
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	80 f4       	brcc	.+32     	; 0x1cda <malloc+0x9c>
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	61 15       	cp	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <malloc+0x8e>
    1cc4:	fb 01       	movw	r30, r22
    1cc6:	93 83       	std	Z+3, r25	; 0x03
    1cc8:	82 83       	std	Z+2, r24	; 0x02
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <malloc+0x96>
    1ccc:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <__flp+0x1>
    1cd0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <__flp>
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	32 96       	adiw	r30, 0x02	; 2
    1cd8:	44 c0       	rjmp	.+136    	; 0x1d62 <malloc+0x124>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	81 93       	st	Z+, r24
    1ce2:	91 93       	st	Z+, r25
    1ce4:	22 50       	subi	r18, 0x02	; 2
    1ce6:	31 09       	sbc	r19, r1
    1ce8:	39 83       	std	Y+1, r19	; 0x01
    1cea:	28 83       	st	Y, r18
    1cec:	3a c0       	rjmp	.+116    	; 0x1d62 <malloc+0x124>
    1cee:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1cf2:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1cf6:	23 2b       	or	r18, r19
    1cf8:	41 f4       	brne	.+16     	; 0x1d0a <malloc+0xcc>
    1cfa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cfe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d02:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <__brkval+0x1>
    1d06:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <__brkval>
    1d0a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d0e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d12:	21 15       	cp	r18, r1
    1d14:	31 05       	cpc	r19, r1
    1d16:	41 f4       	brne	.+16     	; 0x1d28 <malloc+0xea>
    1d18:	2d b7       	in	r18, 0x3d	; 61
    1d1a:	3e b7       	in	r19, 0x3e	; 62
    1d1c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d20:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d24:	24 1b       	sub	r18, r20
    1d26:	35 0b       	sbc	r19, r21
    1d28:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <__brkval>
    1d2c:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1d30:	e2 17       	cp	r30, r18
    1d32:	f3 07       	cpc	r31, r19
    1d34:	a0 f4       	brcc	.+40     	; 0x1d5e <malloc+0x120>
    1d36:	2e 1b       	sub	r18, r30
    1d38:	3f 0b       	sbc	r19, r31
    1d3a:	28 17       	cp	r18, r24
    1d3c:	39 07       	cpc	r19, r25
    1d3e:	78 f0       	brcs	.+30     	; 0x1d5e <malloc+0x120>
    1d40:	ac 01       	movw	r20, r24
    1d42:	4e 5f       	subi	r20, 0xFE	; 254
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	24 17       	cp	r18, r20
    1d48:	35 07       	cpc	r19, r21
    1d4a:	48 f0       	brcs	.+18     	; 0x1d5e <malloc+0x120>
    1d4c:	4e 0f       	add	r20, r30
    1d4e:	5f 1f       	adc	r21, r31
    1d50:	50 93 f0 02 	sts	0x02F0, r21	; 0x8002f0 <__brkval+0x1>
    1d54:	40 93 ef 02 	sts	0x02EF, r20	; 0x8002ef <__brkval>
    1d58:	81 93       	st	Z+, r24
    1d5a:	91 93       	st	Z+, r25
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <malloc+0x124>
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	cf 01       	movw	r24, r30
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <free>:
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <free+0xa>
    1d76:	81 c0       	rjmp	.+258    	; 0x1e7a <free+0x10c>
    1d78:	fc 01       	movw	r30, r24
    1d7a:	32 97       	sbiw	r30, 0x02	; 2
    1d7c:	13 82       	std	Z+3, r1	; 0x03
    1d7e:	12 82       	std	Z+2, r1	; 0x02
    1d80:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <__flp>
    1d84:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <__flp+0x1>
    1d88:	10 97       	sbiw	r26, 0x00	; 0
    1d8a:	81 f4       	brne	.+32     	; 0x1dac <free+0x3e>
    1d8c:	20 81       	ld	r18, Z
    1d8e:	31 81       	ldd	r19, Z+1	; 0x01
    1d90:	82 0f       	add	r24, r18
    1d92:	93 1f       	adc	r25, r19
    1d94:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1d98:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1d9c:	28 17       	cp	r18, r24
    1d9e:	39 07       	cpc	r19, r25
    1da0:	51 f5       	brne	.+84     	; 0x1df6 <free+0x88>
    1da2:	f0 93 f0 02 	sts	0x02F0, r31	; 0x8002f0 <__brkval+0x1>
    1da6:	e0 93 ef 02 	sts	0x02EF, r30	; 0x8002ef <__brkval>
    1daa:	67 c0       	rjmp	.+206    	; 0x1e7a <free+0x10c>
    1dac:	ed 01       	movw	r28, r26
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	ce 17       	cp	r28, r30
    1db4:	df 07       	cpc	r29, r31
    1db6:	40 f4       	brcc	.+16     	; 0x1dc8 <free+0x5a>
    1db8:	4a 81       	ldd	r20, Y+2	; 0x02
    1dba:	5b 81       	ldd	r21, Y+3	; 0x03
    1dbc:	9e 01       	movw	r18, r28
    1dbe:	41 15       	cp	r20, r1
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	f1 f0       	breq	.+60     	; 0x1e00 <free+0x92>
    1dc4:	ea 01       	movw	r28, r20
    1dc6:	f5 cf       	rjmp	.-22     	; 0x1db2 <free+0x44>
    1dc8:	d3 83       	std	Z+3, r29	; 0x03
    1dca:	c2 83       	std	Z+2, r28	; 0x02
    1dcc:	40 81       	ld	r20, Z
    1dce:	51 81       	ldd	r21, Z+1	; 0x01
    1dd0:	84 0f       	add	r24, r20
    1dd2:	95 1f       	adc	r25, r21
    1dd4:	c8 17       	cp	r28, r24
    1dd6:	d9 07       	cpc	r29, r25
    1dd8:	59 f4       	brne	.+22     	; 0x1df0 <free+0x82>
    1dda:	88 81       	ld	r24, Y
    1ddc:	99 81       	ldd	r25, Y+1	; 0x01
    1dde:	84 0f       	add	r24, r20
    1de0:	95 1f       	adc	r25, r21
    1de2:	02 96       	adiw	r24, 0x02	; 2
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	93 83       	std	Z+3, r25	; 0x03
    1dee:	82 83       	std	Z+2, r24	; 0x02
    1df0:	21 15       	cp	r18, r1
    1df2:	31 05       	cpc	r19, r1
    1df4:	29 f4       	brne	.+10     	; 0x1e00 <free+0x92>
    1df6:	f0 93 f2 02 	sts	0x02F2, r31	; 0x8002f2 <__flp+0x1>
    1dfa:	e0 93 f1 02 	sts	0x02F1, r30	; 0x8002f1 <__flp>
    1dfe:	3d c0       	rjmp	.+122    	; 0x1e7a <free+0x10c>
    1e00:	e9 01       	movw	r28, r18
    1e02:	fb 83       	std	Y+3, r31	; 0x03
    1e04:	ea 83       	std	Y+2, r30	; 0x02
    1e06:	49 91       	ld	r20, Y+
    1e08:	59 91       	ld	r21, Y+
    1e0a:	c4 0f       	add	r28, r20
    1e0c:	d5 1f       	adc	r29, r21
    1e0e:	ec 17       	cp	r30, r28
    1e10:	fd 07       	cpc	r31, r29
    1e12:	61 f4       	brne	.+24     	; 0x1e2c <free+0xbe>
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	84 0f       	add	r24, r20
    1e1a:	95 1f       	adc	r25, r21
    1e1c:	02 96       	adiw	r24, 0x02	; 2
    1e1e:	e9 01       	movw	r28, r18
    1e20:	99 83       	std	Y+1, r25	; 0x01
    1e22:	88 83       	st	Y, r24
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	9b 83       	std	Y+3, r25	; 0x03
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	e0 e0       	ldi	r30, 0x00	; 0
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	12 96       	adiw	r26, 0x02	; 2
    1e32:	8d 91       	ld	r24, X+
    1e34:	9c 91       	ld	r25, X
    1e36:	13 97       	sbiw	r26, 0x03	; 3
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	19 f0       	breq	.+6      	; 0x1e42 <free+0xd4>
    1e3c:	fd 01       	movw	r30, r26
    1e3e:	dc 01       	movw	r26, r24
    1e40:	f7 cf       	rjmp	.-18     	; 0x1e30 <free+0xc2>
    1e42:	8d 91       	ld	r24, X+
    1e44:	9c 91       	ld	r25, X
    1e46:	11 97       	sbiw	r26, 0x01	; 1
    1e48:	9d 01       	movw	r18, r26
    1e4a:	2e 5f       	subi	r18, 0xFE	; 254
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	82 0f       	add	r24, r18
    1e50:	93 1f       	adc	r25, r19
    1e52:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1e56:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1e5a:	28 17       	cp	r18, r24
    1e5c:	39 07       	cpc	r19, r25
    1e5e:	69 f4       	brne	.+26     	; 0x1e7a <free+0x10c>
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	29 f4       	brne	.+10     	; 0x1e6e <free+0x100>
    1e64:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <__flp+0x1>
    1e68:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <__flp>
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <free+0x104>
    1e6e:	13 82       	std	Z+3, r1	; 0x03
    1e70:	12 82       	std	Z+2, r1	; 0x02
    1e72:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <__brkval+0x1>
    1e76:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <__brkval>
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <memcpy>:
    1e80:	fb 01       	movw	r30, r22
    1e82:	dc 01       	movw	r26, r24
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <memcpy+0xa>
    1e86:	01 90       	ld	r0, Z+
    1e88:	0d 92       	st	X+, r0
    1e8a:	41 50       	subi	r20, 0x01	; 1
    1e8c:	50 40       	sbci	r21, 0x00	; 0
    1e8e:	d8 f7       	brcc	.-10     	; 0x1e86 <memcpy+0x6>
    1e90:	08 95       	ret

00001e92 <strcpy>:
    1e92:	fb 01       	movw	r30, r22
    1e94:	dc 01       	movw	r26, r24
    1e96:	01 90       	ld	r0, Z+
    1e98:	0d 92       	st	X+, r0
    1e9a:	00 20       	and	r0, r0
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <strcpy+0x4>
    1e9e:	08 95       	ret

00001ea0 <__itoa_ncheck>:
    1ea0:	bb 27       	eor	r27, r27
    1ea2:	4a 30       	cpi	r20, 0x0A	; 10
    1ea4:	31 f4       	brne	.+12     	; 0x1eb2 <__itoa_ncheck+0x12>
    1ea6:	99 23       	and	r25, r25
    1ea8:	22 f4       	brpl	.+8      	; 0x1eb2 <__itoa_ncheck+0x12>
    1eaa:	bd e2       	ldi	r27, 0x2D	; 45
    1eac:	90 95       	com	r25
    1eae:	81 95       	neg	r24
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__utoa_common>

00001eb6 <__utoa_ncheck>:
    1eb6:	bb 27       	eor	r27, r27

00001eb8 <__utoa_common>:
    1eb8:	fb 01       	movw	r30, r22
    1eba:	55 27       	eor	r21, r21
    1ebc:	aa 27       	eor	r26, r26
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	aa 1f       	adc	r26, r26
    1ec4:	a4 17       	cp	r26, r20
    1ec6:	10 f0       	brcs	.+4      	; 0x1ecc <__utoa_common+0x14>
    1ec8:	a4 1b       	sub	r26, r20
    1eca:	83 95       	inc	r24
    1ecc:	50 51       	subi	r21, 0x10	; 16
    1ece:	b9 f7       	brne	.-18     	; 0x1ebe <__utoa_common+0x6>
    1ed0:	a0 5d       	subi	r26, 0xD0	; 208
    1ed2:	aa 33       	cpi	r26, 0x3A	; 58
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <__utoa_common+0x20>
    1ed6:	a9 5d       	subi	r26, 0xD9	; 217
    1ed8:	a1 93       	st	Z+, r26
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	79 f7       	brne	.-34     	; 0x1ebc <__utoa_common+0x4>
    1ede:	b1 11       	cpse	r27, r1
    1ee0:	b1 93       	st	Z+, r27
    1ee2:	11 92       	st	Z+, r1
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <strrev>

00001eea <printf>:
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 86 12 	jmp	0x250c	; 0x250c <__prologue_saves__+0x20>
    1ef6:	ae 01       	movw	r20, r28
    1ef8:	4b 5f       	subi	r20, 0xFB	; 251
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255
    1efc:	fa 01       	movw	r30, r20
    1efe:	61 91       	ld	r22, Z+
    1f00:	71 91       	ld	r23, Z+
    1f02:	af 01       	movw	r20, r30
    1f04:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <__iob+0x2>
    1f08:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <__iob+0x3>
    1f0c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vfprintf>
    1f10:	e2 e0       	ldi	r30, 0x02	; 2
    1f12:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__epilogue_restores__+0x20>

00001f16 <puts>:
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <__iob+0x2>
    1f22:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <__iob+0x3>
    1f26:	23 81       	ldd	r18, Z+3	; 0x03
    1f28:	21 ff       	sbrs	r18, 1
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <puts+0x4c>
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	d0 e0       	ldi	r29, 0x00	; 0
    1f30:	c0 e0       	ldi	r28, 0x00	; 0
    1f32:	f8 01       	movw	r30, r16
    1f34:	81 91       	ld	r24, Z+
    1f36:	8f 01       	movw	r16, r30
    1f38:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <__iob+0x2>
    1f3c:	70 91 f6 02 	lds	r23, 0x02F6	; 0x8002f6 <__iob+0x3>
    1f40:	db 01       	movw	r26, r22
    1f42:	18 96       	adiw	r26, 0x08	; 8
    1f44:	ed 91       	ld	r30, X+
    1f46:	fc 91       	ld	r31, X
    1f48:	19 97       	sbiw	r26, 0x09	; 9
    1f4a:	88 23       	and	r24, r24
    1f4c:	31 f0       	breq	.+12     	; 0x1f5a <puts+0x44>
    1f4e:	09 95       	icall
    1f50:	89 2b       	or	r24, r25
    1f52:	79 f3       	breq	.-34     	; 0x1f32 <puts+0x1c>
    1f54:	df ef       	ldi	r29, 0xFF	; 255
    1f56:	cf ef       	ldi	r28, 0xFF	; 255
    1f58:	ec cf       	rjmp	.-40     	; 0x1f32 <puts+0x1c>
    1f5a:	8a e0       	ldi	r24, 0x0A	; 10
    1f5c:	09 95       	icall
    1f5e:	89 2b       	or	r24, r25
    1f60:	19 f0       	breq	.+6      	; 0x1f68 <puts+0x52>
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <puts+0x56>
    1f68:	8d 2f       	mov	r24, r29
    1f6a:	9c 2f       	mov	r25, r28
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <vfprintf>:
    1f76:	ab e0       	ldi	r26, 0x0B	; 11
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1f7c:	ff e0       	ldi	r31, 0x0F	; 15
    1f7e:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__>
    1f82:	6c 01       	movw	r12, r24
    1f84:	7b 01       	movw	r14, r22
    1f86:	8a 01       	movw	r16, r20
    1f88:	fc 01       	movw	r30, r24
    1f8a:	17 82       	std	Z+7, r1	; 0x07
    1f8c:	16 82       	std	Z+6, r1	; 0x06
    1f8e:	83 81       	ldd	r24, Z+3	; 0x03
    1f90:	81 ff       	sbrs	r24, 1
    1f92:	cc c1       	rjmp	.+920    	; 0x232c <vfprintf+0x3b6>
    1f94:	ce 01       	movw	r24, r28
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	3c 01       	movw	r6, r24
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	93 fd       	sbrc	r25, 3
    1fa2:	85 91       	lpm	r24, Z+
    1fa4:	93 ff       	sbrs	r25, 3
    1fa6:	81 91       	ld	r24, Z+
    1fa8:	7f 01       	movw	r14, r30
    1faa:	88 23       	and	r24, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <vfprintf+0x3a>
    1fae:	ba c1       	rjmp	.+884    	; 0x2324 <vfprintf+0x3ae>
    1fb0:	85 32       	cpi	r24, 0x25	; 37
    1fb2:	39 f4       	brne	.+14     	; 0x1fc2 <vfprintf+0x4c>
    1fb4:	93 fd       	sbrc	r25, 3
    1fb6:	85 91       	lpm	r24, Z+
    1fb8:	93 ff       	sbrs	r25, 3
    1fba:	81 91       	ld	r24, Z+
    1fbc:	7f 01       	movw	r14, r30
    1fbe:	85 32       	cpi	r24, 0x25	; 37
    1fc0:	29 f4       	brne	.+10     	; 0x1fcc <vfprintf+0x56>
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    1fca:	e7 cf       	rjmp	.-50     	; 0x1f9a <vfprintf+0x24>
    1fcc:	91 2c       	mov	r9, r1
    1fce:	21 2c       	mov	r2, r1
    1fd0:	31 2c       	mov	r3, r1
    1fd2:	ff e1       	ldi	r31, 0x1F	; 31
    1fd4:	f3 15       	cp	r31, r3
    1fd6:	d8 f0       	brcs	.+54     	; 0x200e <vfprintf+0x98>
    1fd8:	8b 32       	cpi	r24, 0x2B	; 43
    1fda:	79 f0       	breq	.+30     	; 0x1ffa <vfprintf+0x84>
    1fdc:	38 f4       	brcc	.+14     	; 0x1fec <vfprintf+0x76>
    1fde:	80 32       	cpi	r24, 0x20	; 32
    1fe0:	79 f0       	breq	.+30     	; 0x2000 <vfprintf+0x8a>
    1fe2:	83 32       	cpi	r24, 0x23	; 35
    1fe4:	a1 f4       	brne	.+40     	; 0x200e <vfprintf+0x98>
    1fe6:	23 2d       	mov	r18, r3
    1fe8:	20 61       	ori	r18, 0x10	; 16
    1fea:	1d c0       	rjmp	.+58     	; 0x2026 <vfprintf+0xb0>
    1fec:	8d 32       	cpi	r24, 0x2D	; 45
    1fee:	61 f0       	breq	.+24     	; 0x2008 <vfprintf+0x92>
    1ff0:	80 33       	cpi	r24, 0x30	; 48
    1ff2:	69 f4       	brne	.+26     	; 0x200e <vfprintf+0x98>
    1ff4:	23 2d       	mov	r18, r3
    1ff6:	21 60       	ori	r18, 0x01	; 1
    1ff8:	16 c0       	rjmp	.+44     	; 0x2026 <vfprintf+0xb0>
    1ffa:	83 2d       	mov	r24, r3
    1ffc:	82 60       	ori	r24, 0x02	; 2
    1ffe:	38 2e       	mov	r3, r24
    2000:	e3 2d       	mov	r30, r3
    2002:	e4 60       	ori	r30, 0x04	; 4
    2004:	3e 2e       	mov	r3, r30
    2006:	2a c0       	rjmp	.+84     	; 0x205c <vfprintf+0xe6>
    2008:	f3 2d       	mov	r31, r3
    200a:	f8 60       	ori	r31, 0x08	; 8
    200c:	1d c0       	rjmp	.+58     	; 0x2048 <vfprintf+0xd2>
    200e:	37 fc       	sbrc	r3, 7
    2010:	2d c0       	rjmp	.+90     	; 0x206c <vfprintf+0xf6>
    2012:	20 ed       	ldi	r18, 0xD0	; 208
    2014:	28 0f       	add	r18, r24
    2016:	2a 30       	cpi	r18, 0x0A	; 10
    2018:	40 f0       	brcs	.+16     	; 0x202a <vfprintf+0xb4>
    201a:	8e 32       	cpi	r24, 0x2E	; 46
    201c:	b9 f4       	brne	.+46     	; 0x204c <vfprintf+0xd6>
    201e:	36 fc       	sbrc	r3, 6
    2020:	81 c1       	rjmp	.+770    	; 0x2324 <vfprintf+0x3ae>
    2022:	23 2d       	mov	r18, r3
    2024:	20 64       	ori	r18, 0x40	; 64
    2026:	32 2e       	mov	r3, r18
    2028:	19 c0       	rjmp	.+50     	; 0x205c <vfprintf+0xe6>
    202a:	36 fe       	sbrs	r3, 6
    202c:	06 c0       	rjmp	.+12     	; 0x203a <vfprintf+0xc4>
    202e:	8a e0       	ldi	r24, 0x0A	; 10
    2030:	98 9e       	mul	r9, r24
    2032:	20 0d       	add	r18, r0
    2034:	11 24       	eor	r1, r1
    2036:	92 2e       	mov	r9, r18
    2038:	11 c0       	rjmp	.+34     	; 0x205c <vfprintf+0xe6>
    203a:	ea e0       	ldi	r30, 0x0A	; 10
    203c:	2e 9e       	mul	r2, r30
    203e:	20 0d       	add	r18, r0
    2040:	11 24       	eor	r1, r1
    2042:	22 2e       	mov	r2, r18
    2044:	f3 2d       	mov	r31, r3
    2046:	f0 62       	ori	r31, 0x20	; 32
    2048:	3f 2e       	mov	r3, r31
    204a:	08 c0       	rjmp	.+16     	; 0x205c <vfprintf+0xe6>
    204c:	8c 36       	cpi	r24, 0x6C	; 108
    204e:	21 f4       	brne	.+8      	; 0x2058 <vfprintf+0xe2>
    2050:	83 2d       	mov	r24, r3
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	38 2e       	mov	r3, r24
    2056:	02 c0       	rjmp	.+4      	; 0x205c <vfprintf+0xe6>
    2058:	88 36       	cpi	r24, 0x68	; 104
    205a:	41 f4       	brne	.+16     	; 0x206c <vfprintf+0xf6>
    205c:	f7 01       	movw	r30, r14
    205e:	93 fd       	sbrc	r25, 3
    2060:	85 91       	lpm	r24, Z+
    2062:	93 ff       	sbrs	r25, 3
    2064:	81 91       	ld	r24, Z+
    2066:	7f 01       	movw	r14, r30
    2068:	81 11       	cpse	r24, r1
    206a:	b3 cf       	rjmp	.-154    	; 0x1fd2 <vfprintf+0x5c>
    206c:	98 2f       	mov	r25, r24
    206e:	9f 7d       	andi	r25, 0xDF	; 223
    2070:	95 54       	subi	r25, 0x45	; 69
    2072:	93 30       	cpi	r25, 0x03	; 3
    2074:	28 f4       	brcc	.+10     	; 0x2080 <vfprintf+0x10a>
    2076:	0c 5f       	subi	r16, 0xFC	; 252
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	9f e3       	ldi	r25, 0x3F	; 63
    207c:	99 83       	std	Y+1, r25	; 0x01
    207e:	0d c0       	rjmp	.+26     	; 0x209a <vfprintf+0x124>
    2080:	83 36       	cpi	r24, 0x63	; 99
    2082:	31 f0       	breq	.+12     	; 0x2090 <vfprintf+0x11a>
    2084:	83 37       	cpi	r24, 0x73	; 115
    2086:	71 f0       	breq	.+28     	; 0x20a4 <vfprintf+0x12e>
    2088:	83 35       	cpi	r24, 0x53	; 83
    208a:	09 f0       	breq	.+2      	; 0x208e <vfprintf+0x118>
    208c:	59 c0       	rjmp	.+178    	; 0x2140 <vfprintf+0x1ca>
    208e:	21 c0       	rjmp	.+66     	; 0x20d2 <vfprintf+0x15c>
    2090:	f8 01       	movw	r30, r16
    2092:	80 81       	ld	r24, Z
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	0e 5f       	subi	r16, 0xFE	; 254
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	88 24       	eor	r8, r8
    209c:	83 94       	inc	r8
    209e:	91 2c       	mov	r9, r1
    20a0:	53 01       	movw	r10, r6
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <vfprintf+0x154>
    20a4:	28 01       	movw	r4, r16
    20a6:	f2 e0       	ldi	r31, 0x02	; 2
    20a8:	4f 0e       	add	r4, r31
    20aa:	51 1c       	adc	r5, r1
    20ac:	f8 01       	movw	r30, r16
    20ae:	a0 80       	ld	r10, Z
    20b0:	b1 80       	ldd	r11, Z+1	; 0x01
    20b2:	36 fe       	sbrs	r3, 6
    20b4:	03 c0       	rjmp	.+6      	; 0x20bc <vfprintf+0x146>
    20b6:	69 2d       	mov	r22, r9
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <vfprintf+0x14a>
    20bc:	6f ef       	ldi	r22, 0xFF	; 255
    20be:	7f ef       	ldi	r23, 0xFF	; 255
    20c0:	c5 01       	movw	r24, r10
    20c2:	0e 94 a7 11 	call	0x234e	; 0x234e <strnlen>
    20c6:	4c 01       	movw	r8, r24
    20c8:	82 01       	movw	r16, r4
    20ca:	f3 2d       	mov	r31, r3
    20cc:	ff 77       	andi	r31, 0x7F	; 127
    20ce:	3f 2e       	mov	r3, r31
    20d0:	16 c0       	rjmp	.+44     	; 0x20fe <vfprintf+0x188>
    20d2:	28 01       	movw	r4, r16
    20d4:	22 e0       	ldi	r18, 0x02	; 2
    20d6:	42 0e       	add	r4, r18
    20d8:	51 1c       	adc	r5, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	a0 80       	ld	r10, Z
    20de:	b1 80       	ldd	r11, Z+1	; 0x01
    20e0:	36 fe       	sbrs	r3, 6
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <vfprintf+0x174>
    20e4:	69 2d       	mov	r22, r9
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <vfprintf+0x178>
    20ea:	6f ef       	ldi	r22, 0xFF	; 255
    20ec:	7f ef       	ldi	r23, 0xFF	; 255
    20ee:	c5 01       	movw	r24, r10
    20f0:	0e 94 9c 11 	call	0x2338	; 0x2338 <strnlen_P>
    20f4:	4c 01       	movw	r8, r24
    20f6:	f3 2d       	mov	r31, r3
    20f8:	f0 68       	ori	r31, 0x80	; 128
    20fa:	3f 2e       	mov	r3, r31
    20fc:	82 01       	movw	r16, r4
    20fe:	33 fc       	sbrc	r3, 3
    2100:	1b c0       	rjmp	.+54     	; 0x2138 <vfprintf+0x1c2>
    2102:	82 2d       	mov	r24, r2
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	88 16       	cp	r8, r24
    2108:	99 06       	cpc	r9, r25
    210a:	b0 f4       	brcc	.+44     	; 0x2138 <vfprintf+0x1c2>
    210c:	b6 01       	movw	r22, r12
    210e:	80 e2       	ldi	r24, 0x20	; 32
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    2116:	2a 94       	dec	r2
    2118:	f4 cf       	rjmp	.-24     	; 0x2102 <vfprintf+0x18c>
    211a:	f5 01       	movw	r30, r10
    211c:	37 fc       	sbrc	r3, 7
    211e:	85 91       	lpm	r24, Z+
    2120:	37 fe       	sbrs	r3, 7
    2122:	81 91       	ld	r24, Z+
    2124:	5f 01       	movw	r10, r30
    2126:	b6 01       	movw	r22, r12
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    212e:	21 10       	cpse	r2, r1
    2130:	2a 94       	dec	r2
    2132:	21 e0       	ldi	r18, 0x01	; 1
    2134:	82 1a       	sub	r8, r18
    2136:	91 08       	sbc	r9, r1
    2138:	81 14       	cp	r8, r1
    213a:	91 04       	cpc	r9, r1
    213c:	71 f7       	brne	.-36     	; 0x211a <vfprintf+0x1a4>
    213e:	e8 c0       	rjmp	.+464    	; 0x2310 <vfprintf+0x39a>
    2140:	84 36       	cpi	r24, 0x64	; 100
    2142:	11 f0       	breq	.+4      	; 0x2148 <vfprintf+0x1d2>
    2144:	89 36       	cpi	r24, 0x69	; 105
    2146:	41 f5       	brne	.+80     	; 0x2198 <vfprintf+0x222>
    2148:	f8 01       	movw	r30, r16
    214a:	37 fe       	sbrs	r3, 7
    214c:	07 c0       	rjmp	.+14     	; 0x215c <vfprintf+0x1e6>
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	0c 5f       	subi	r16, 0xFC	; 252
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	08 c0       	rjmp	.+16     	; 0x216c <vfprintf+0x1f6>
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	07 2e       	mov	r0, r23
    2162:	00 0c       	add	r0, r0
    2164:	88 0b       	sbc	r24, r24
    2166:	99 0b       	sbc	r25, r25
    2168:	0e 5f       	subi	r16, 0xFE	; 254
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	f3 2d       	mov	r31, r3
    216e:	ff 76       	andi	r31, 0x6F	; 111
    2170:	3f 2e       	mov	r3, r31
    2172:	97 ff       	sbrs	r25, 7
    2174:	09 c0       	rjmp	.+18     	; 0x2188 <vfprintf+0x212>
    2176:	90 95       	com	r25
    2178:	80 95       	com	r24
    217a:	70 95       	com	r23
    217c:	61 95       	neg	r22
    217e:	7f 4f       	sbci	r23, 0xFF	; 255
    2180:	8f 4f       	sbci	r24, 0xFF	; 255
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	f0 68       	ori	r31, 0x80	; 128
    2186:	3f 2e       	mov	r3, r31
    2188:	2a e0       	ldi	r18, 0x0A	; 10
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	a3 01       	movw	r20, r6
    218e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__ultoa_invert>
    2192:	88 2e       	mov	r8, r24
    2194:	86 18       	sub	r8, r6
    2196:	45 c0       	rjmp	.+138    	; 0x2222 <vfprintf+0x2ac>
    2198:	85 37       	cpi	r24, 0x75	; 117
    219a:	31 f4       	brne	.+12     	; 0x21a8 <vfprintf+0x232>
    219c:	23 2d       	mov	r18, r3
    219e:	2f 7e       	andi	r18, 0xEF	; 239
    21a0:	b2 2e       	mov	r11, r18
    21a2:	2a e0       	ldi	r18, 0x0A	; 10
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	25 c0       	rjmp	.+74     	; 0x21f2 <vfprintf+0x27c>
    21a8:	93 2d       	mov	r25, r3
    21aa:	99 7f       	andi	r25, 0xF9	; 249
    21ac:	b9 2e       	mov	r11, r25
    21ae:	8f 36       	cpi	r24, 0x6F	; 111
    21b0:	c1 f0       	breq	.+48     	; 0x21e2 <vfprintf+0x26c>
    21b2:	18 f4       	brcc	.+6      	; 0x21ba <vfprintf+0x244>
    21b4:	88 35       	cpi	r24, 0x58	; 88
    21b6:	79 f0       	breq	.+30     	; 0x21d6 <vfprintf+0x260>
    21b8:	b5 c0       	rjmp	.+362    	; 0x2324 <vfprintf+0x3ae>
    21ba:	80 37       	cpi	r24, 0x70	; 112
    21bc:	19 f0       	breq	.+6      	; 0x21c4 <vfprintf+0x24e>
    21be:	88 37       	cpi	r24, 0x78	; 120
    21c0:	21 f0       	breq	.+8      	; 0x21ca <vfprintf+0x254>
    21c2:	b0 c0       	rjmp	.+352    	; 0x2324 <vfprintf+0x3ae>
    21c4:	e9 2f       	mov	r30, r25
    21c6:	e0 61       	ori	r30, 0x10	; 16
    21c8:	be 2e       	mov	r11, r30
    21ca:	b4 fe       	sbrs	r11, 4
    21cc:	0d c0       	rjmp	.+26     	; 0x21e8 <vfprintf+0x272>
    21ce:	fb 2d       	mov	r31, r11
    21d0:	f4 60       	ori	r31, 0x04	; 4
    21d2:	bf 2e       	mov	r11, r31
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <vfprintf+0x272>
    21d6:	34 fe       	sbrs	r3, 4
    21d8:	0a c0       	rjmp	.+20     	; 0x21ee <vfprintf+0x278>
    21da:	29 2f       	mov	r18, r25
    21dc:	26 60       	ori	r18, 0x06	; 6
    21de:	b2 2e       	mov	r11, r18
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <vfprintf+0x278>
    21e2:	28 e0       	ldi	r18, 0x08	; 8
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <vfprintf+0x27c>
    21e8:	20 e1       	ldi	r18, 0x10	; 16
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x27c>
    21ee:	20 e1       	ldi	r18, 0x10	; 16
    21f0:	32 e0       	ldi	r19, 0x02	; 2
    21f2:	f8 01       	movw	r30, r16
    21f4:	b7 fe       	sbrs	r11, 7
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <vfprintf+0x290>
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0c 5f       	subi	r16, 0xFC	; 252
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <vfprintf+0x29c>
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 5f       	subi	r16, 0xFE	; 254
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	a3 01       	movw	r20, r6
    2214:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__ultoa_invert>
    2218:	88 2e       	mov	r8, r24
    221a:	86 18       	sub	r8, r6
    221c:	fb 2d       	mov	r31, r11
    221e:	ff 77       	andi	r31, 0x7F	; 127
    2220:	3f 2e       	mov	r3, r31
    2222:	36 fe       	sbrs	r3, 6
    2224:	0d c0       	rjmp	.+26     	; 0x2240 <vfprintf+0x2ca>
    2226:	23 2d       	mov	r18, r3
    2228:	2e 7f       	andi	r18, 0xFE	; 254
    222a:	a2 2e       	mov	r10, r18
    222c:	89 14       	cp	r8, r9
    222e:	58 f4       	brcc	.+22     	; 0x2246 <vfprintf+0x2d0>
    2230:	34 fe       	sbrs	r3, 4
    2232:	0b c0       	rjmp	.+22     	; 0x224a <vfprintf+0x2d4>
    2234:	32 fc       	sbrc	r3, 2
    2236:	09 c0       	rjmp	.+18     	; 0x224a <vfprintf+0x2d4>
    2238:	83 2d       	mov	r24, r3
    223a:	8e 7e       	andi	r24, 0xEE	; 238
    223c:	a8 2e       	mov	r10, r24
    223e:	05 c0       	rjmp	.+10     	; 0x224a <vfprintf+0x2d4>
    2240:	b8 2c       	mov	r11, r8
    2242:	a3 2c       	mov	r10, r3
    2244:	03 c0       	rjmp	.+6      	; 0x224c <vfprintf+0x2d6>
    2246:	b8 2c       	mov	r11, r8
    2248:	01 c0       	rjmp	.+2      	; 0x224c <vfprintf+0x2d6>
    224a:	b9 2c       	mov	r11, r9
    224c:	a4 fe       	sbrs	r10, 4
    224e:	0f c0       	rjmp	.+30     	; 0x226e <vfprintf+0x2f8>
    2250:	fe 01       	movw	r30, r28
    2252:	e8 0d       	add	r30, r8
    2254:	f1 1d       	adc	r31, r1
    2256:	80 81       	ld	r24, Z
    2258:	80 33       	cpi	r24, 0x30	; 48
    225a:	21 f4       	brne	.+8      	; 0x2264 <vfprintf+0x2ee>
    225c:	9a 2d       	mov	r25, r10
    225e:	99 7e       	andi	r25, 0xE9	; 233
    2260:	a9 2e       	mov	r10, r25
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <vfprintf+0x300>
    2264:	a2 fe       	sbrs	r10, 2
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <vfprintf+0x2fe>
    2268:	b3 94       	inc	r11
    226a:	b3 94       	inc	r11
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <vfprintf+0x300>
    226e:	8a 2d       	mov	r24, r10
    2270:	86 78       	andi	r24, 0x86	; 134
    2272:	09 f0       	breq	.+2      	; 0x2276 <vfprintf+0x300>
    2274:	b3 94       	inc	r11
    2276:	a3 fc       	sbrc	r10, 3
    2278:	11 c0       	rjmp	.+34     	; 0x229c <vfprintf+0x326>
    227a:	a0 fe       	sbrs	r10, 0
    227c:	06 c0       	rjmp	.+12     	; 0x228a <vfprintf+0x314>
    227e:	b2 14       	cp	r11, r2
    2280:	88 f4       	brcc	.+34     	; 0x22a4 <vfprintf+0x32e>
    2282:	28 0c       	add	r2, r8
    2284:	92 2c       	mov	r9, r2
    2286:	9b 18       	sub	r9, r11
    2288:	0e c0       	rjmp	.+28     	; 0x22a6 <vfprintf+0x330>
    228a:	b2 14       	cp	r11, r2
    228c:	60 f4       	brcc	.+24     	; 0x22a6 <vfprintf+0x330>
    228e:	b6 01       	movw	r22, r12
    2290:	80 e2       	ldi	r24, 0x20	; 32
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    2298:	b3 94       	inc	r11
    229a:	f7 cf       	rjmp	.-18     	; 0x228a <vfprintf+0x314>
    229c:	b2 14       	cp	r11, r2
    229e:	18 f4       	brcc	.+6      	; 0x22a6 <vfprintf+0x330>
    22a0:	2b 18       	sub	r2, r11
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <vfprintf+0x332>
    22a4:	98 2c       	mov	r9, r8
    22a6:	21 2c       	mov	r2, r1
    22a8:	a4 fe       	sbrs	r10, 4
    22aa:	10 c0       	rjmp	.+32     	; 0x22cc <vfprintf+0x356>
    22ac:	b6 01       	movw	r22, r12
    22ae:	80 e3       	ldi	r24, 0x30	; 48
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    22b6:	a2 fe       	sbrs	r10, 2
    22b8:	17 c0       	rjmp	.+46     	; 0x22e8 <vfprintf+0x372>
    22ba:	a1 fc       	sbrc	r10, 1
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <vfprintf+0x34e>
    22be:	88 e7       	ldi	r24, 0x78	; 120
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <vfprintf+0x352>
    22c4:	88 e5       	ldi	r24, 0x58	; 88
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	b6 01       	movw	r22, r12
    22ca:	0c c0       	rjmp	.+24     	; 0x22e4 <vfprintf+0x36e>
    22cc:	8a 2d       	mov	r24, r10
    22ce:	86 78       	andi	r24, 0x86	; 134
    22d0:	59 f0       	breq	.+22     	; 0x22e8 <vfprintf+0x372>
    22d2:	a1 fe       	sbrs	r10, 1
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <vfprintf+0x364>
    22d6:	8b e2       	ldi	r24, 0x2B	; 43
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <vfprintf+0x366>
    22da:	80 e2       	ldi	r24, 0x20	; 32
    22dc:	a7 fc       	sbrc	r10, 7
    22de:	8d e2       	ldi	r24, 0x2D	; 45
    22e0:	b6 01       	movw	r22, r12
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    22e8:	89 14       	cp	r8, r9
    22ea:	38 f4       	brcc	.+14     	; 0x22fa <vfprintf+0x384>
    22ec:	b6 01       	movw	r22, r12
    22ee:	80 e3       	ldi	r24, 0x30	; 48
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    22f6:	9a 94       	dec	r9
    22f8:	f7 cf       	rjmp	.-18     	; 0x22e8 <vfprintf+0x372>
    22fa:	8a 94       	dec	r8
    22fc:	f3 01       	movw	r30, r6
    22fe:	e8 0d       	add	r30, r8
    2300:	f1 1d       	adc	r31, r1
    2302:	80 81       	ld	r24, Z
    2304:	b6 01       	movw	r22, r12
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    230c:	81 10       	cpse	r8, r1
    230e:	f5 cf       	rjmp	.-22     	; 0x22fa <vfprintf+0x384>
    2310:	22 20       	and	r2, r2
    2312:	09 f4       	brne	.+2      	; 0x2316 <vfprintf+0x3a0>
    2314:	42 ce       	rjmp	.-892    	; 0x1f9a <vfprintf+0x24>
    2316:	b6 01       	movw	r22, r12
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 c2 11 	call	0x2384	; 0x2384 <fputc>
    2320:	2a 94       	dec	r2
    2322:	f6 cf       	rjmp	.-20     	; 0x2310 <vfprintf+0x39a>
    2324:	f6 01       	movw	r30, r12
    2326:	86 81       	ldd	r24, Z+6	; 0x06
    2328:	97 81       	ldd	r25, Z+7	; 0x07
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <vfprintf+0x3ba>
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	9f ef       	ldi	r25, 0xFF	; 255
    2330:	2b 96       	adiw	r28, 0x0b	; 11
    2332:	e2 e1       	ldi	r30, 0x12	; 18
    2334:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__>

00002338 <strnlen_P>:
    2338:	fc 01       	movw	r30, r24
    233a:	05 90       	lpm	r0, Z+
    233c:	61 50       	subi	r22, 0x01	; 1
    233e:	70 40       	sbci	r23, 0x00	; 0
    2340:	01 10       	cpse	r0, r1
    2342:	d8 f7       	brcc	.-10     	; 0x233a <strnlen_P+0x2>
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	8e 0f       	add	r24, r30
    234a:	9f 1f       	adc	r25, r31
    234c:	08 95       	ret

0000234e <strnlen>:
    234e:	fc 01       	movw	r30, r24
    2350:	61 50       	subi	r22, 0x01	; 1
    2352:	70 40       	sbci	r23, 0x00	; 0
    2354:	01 90       	ld	r0, Z+
    2356:	01 10       	cpse	r0, r1
    2358:	d8 f7       	brcc	.-10     	; 0x2350 <strnlen+0x2>
    235a:	80 95       	com	r24
    235c:	90 95       	com	r25
    235e:	8e 0f       	add	r24, r30
    2360:	9f 1f       	adc	r25, r31
    2362:	08 95       	ret

00002364 <strrev>:
    2364:	dc 01       	movw	r26, r24
    2366:	fc 01       	movw	r30, r24
    2368:	67 2f       	mov	r22, r23
    236a:	71 91       	ld	r23, Z+
    236c:	77 23       	and	r23, r23
    236e:	e1 f7       	brne	.-8      	; 0x2368 <strrev+0x4>
    2370:	32 97       	sbiw	r30, 0x02	; 2
    2372:	04 c0       	rjmp	.+8      	; 0x237c <strrev+0x18>
    2374:	7c 91       	ld	r23, X
    2376:	6d 93       	st	X+, r22
    2378:	70 83       	st	Z, r23
    237a:	62 91       	ld	r22, -Z
    237c:	ae 17       	cp	r26, r30
    237e:	bf 07       	cpc	r27, r31
    2380:	c8 f3       	brcs	.-14     	; 0x2374 <strrev+0x10>
    2382:	08 95       	ret

00002384 <fputc>:
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	fb 01       	movw	r30, r22
    238e:	23 81       	ldd	r18, Z+3	; 0x03
    2390:	21 fd       	sbrc	r18, 1
    2392:	03 c0       	rjmp	.+6      	; 0x239a <fputc+0x16>
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	2c c0       	rjmp	.+88     	; 0x23f2 <fputc+0x6e>
    239a:	22 ff       	sbrs	r18, 2
    239c:	16 c0       	rjmp	.+44     	; 0x23ca <fputc+0x46>
    239e:	46 81       	ldd	r20, Z+6	; 0x06
    23a0:	57 81       	ldd	r21, Z+7	; 0x07
    23a2:	24 81       	ldd	r18, Z+4	; 0x04
    23a4:	35 81       	ldd	r19, Z+5	; 0x05
    23a6:	42 17       	cp	r20, r18
    23a8:	53 07       	cpc	r21, r19
    23aa:	44 f4       	brge	.+16     	; 0x23bc <fputc+0x38>
    23ac:	a0 81       	ld	r26, Z
    23ae:	b1 81       	ldd	r27, Z+1	; 0x01
    23b0:	9d 01       	movw	r18, r26
    23b2:	2f 5f       	subi	r18, 0xFF	; 255
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	31 83       	std	Z+1, r19	; 0x01
    23b8:	20 83       	st	Z, r18
    23ba:	8c 93       	st	X, r24
    23bc:	26 81       	ldd	r18, Z+6	; 0x06
    23be:	37 81       	ldd	r19, Z+7	; 0x07
    23c0:	2f 5f       	subi	r18, 0xFF	; 255
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	37 83       	std	Z+7, r19	; 0x07
    23c6:	26 83       	std	Z+6, r18	; 0x06
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <fputc+0x6e>
    23ca:	8b 01       	movw	r16, r22
    23cc:	ec 01       	movw	r28, r24
    23ce:	fb 01       	movw	r30, r22
    23d0:	00 84       	ldd	r0, Z+8	; 0x08
    23d2:	f1 85       	ldd	r31, Z+9	; 0x09
    23d4:	e0 2d       	mov	r30, r0
    23d6:	09 95       	icall
    23d8:	89 2b       	or	r24, r25
    23da:	e1 f6       	brne	.-72     	; 0x2394 <fputc+0x10>
    23dc:	d8 01       	movw	r26, r16
    23de:	16 96       	adiw	r26, 0x06	; 6
    23e0:	8d 91       	ld	r24, X+
    23e2:	9c 91       	ld	r25, X
    23e4:	17 97       	sbiw	r26, 0x07	; 7
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	17 96       	adiw	r26, 0x07	; 7
    23ea:	9c 93       	st	X, r25
    23ec:	8e 93       	st	-X, r24
    23ee:	16 97       	sbiw	r26, 0x06	; 6
    23f0:	ce 01       	movw	r24, r28
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <__ultoa_invert>:
    23fc:	fa 01       	movw	r30, r20
    23fe:	aa 27       	eor	r26, r26
    2400:	28 30       	cpi	r18, 0x08	; 8
    2402:	51 f1       	breq	.+84     	; 0x2458 <__ultoa_invert+0x5c>
    2404:	20 31       	cpi	r18, 0x10	; 16
    2406:	81 f1       	breq	.+96     	; 0x2468 <__ultoa_invert+0x6c>
    2408:	e8 94       	clt
    240a:	6f 93       	push	r22
    240c:	6e 7f       	andi	r22, 0xFE	; 254
    240e:	6e 5f       	subi	r22, 0xFE	; 254
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	8f 4f       	sbci	r24, 0xFF	; 255
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	af 4f       	sbci	r26, 0xFF	; 255
    2418:	b1 e0       	ldi	r27, 0x01	; 1
    241a:	3e d0       	rcall	.+124    	; 0x2498 <__ultoa_invert+0x9c>
    241c:	b4 e0       	ldi	r27, 0x04	; 4
    241e:	3c d0       	rcall	.+120    	; 0x2498 <__ultoa_invert+0x9c>
    2420:	67 0f       	add	r22, r23
    2422:	78 1f       	adc	r23, r24
    2424:	89 1f       	adc	r24, r25
    2426:	9a 1f       	adc	r25, r26
    2428:	a1 1d       	adc	r26, r1
    242a:	68 0f       	add	r22, r24
    242c:	79 1f       	adc	r23, r25
    242e:	8a 1f       	adc	r24, r26
    2430:	91 1d       	adc	r25, r1
    2432:	a1 1d       	adc	r26, r1
    2434:	6a 0f       	add	r22, r26
    2436:	71 1d       	adc	r23, r1
    2438:	81 1d       	adc	r24, r1
    243a:	91 1d       	adc	r25, r1
    243c:	a1 1d       	adc	r26, r1
    243e:	20 d0       	rcall	.+64     	; 0x2480 <__ultoa_invert+0x84>
    2440:	09 f4       	brne	.+2      	; 0x2444 <__ultoa_invert+0x48>
    2442:	68 94       	set
    2444:	3f 91       	pop	r19
    2446:	2a e0       	ldi	r18, 0x0A	; 10
    2448:	26 9f       	mul	r18, r22
    244a:	11 24       	eor	r1, r1
    244c:	30 19       	sub	r19, r0
    244e:	30 5d       	subi	r19, 0xD0	; 208
    2450:	31 93       	st	Z+, r19
    2452:	de f6       	brtc	.-74     	; 0x240a <__ultoa_invert+0xe>
    2454:	cf 01       	movw	r24, r30
    2456:	08 95       	ret
    2458:	46 2f       	mov	r20, r22
    245a:	47 70       	andi	r20, 0x07	; 7
    245c:	40 5d       	subi	r20, 0xD0	; 208
    245e:	41 93       	st	Z+, r20
    2460:	b3 e0       	ldi	r27, 0x03	; 3
    2462:	0f d0       	rcall	.+30     	; 0x2482 <__ultoa_invert+0x86>
    2464:	c9 f7       	brne	.-14     	; 0x2458 <__ultoa_invert+0x5c>
    2466:	f6 cf       	rjmp	.-20     	; 0x2454 <__ultoa_invert+0x58>
    2468:	46 2f       	mov	r20, r22
    246a:	4f 70       	andi	r20, 0x0F	; 15
    246c:	40 5d       	subi	r20, 0xD0	; 208
    246e:	4a 33       	cpi	r20, 0x3A	; 58
    2470:	18 f0       	brcs	.+6      	; 0x2478 <__ultoa_invert+0x7c>
    2472:	49 5d       	subi	r20, 0xD9	; 217
    2474:	31 fd       	sbrc	r19, 1
    2476:	40 52       	subi	r20, 0x20	; 32
    2478:	41 93       	st	Z+, r20
    247a:	02 d0       	rcall	.+4      	; 0x2480 <__ultoa_invert+0x84>
    247c:	a9 f7       	brne	.-22     	; 0x2468 <__ultoa_invert+0x6c>
    247e:	ea cf       	rjmp	.-44     	; 0x2454 <__ultoa_invert+0x58>
    2480:	b4 e0       	ldi	r27, 0x04	; 4
    2482:	a6 95       	lsr	r26
    2484:	97 95       	ror	r25
    2486:	87 95       	ror	r24
    2488:	77 95       	ror	r23
    248a:	67 95       	ror	r22
    248c:	ba 95       	dec	r27
    248e:	c9 f7       	brne	.-14     	; 0x2482 <__ultoa_invert+0x86>
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	61 05       	cpc	r22, r1
    2494:	71 05       	cpc	r23, r1
    2496:	08 95       	ret
    2498:	9b 01       	movw	r18, r22
    249a:	ac 01       	movw	r20, r24
    249c:	0a 2e       	mov	r0, r26
    249e:	06 94       	lsr	r0
    24a0:	57 95       	ror	r21
    24a2:	47 95       	ror	r20
    24a4:	37 95       	ror	r19
    24a6:	27 95       	ror	r18
    24a8:	ba 95       	dec	r27
    24aa:	c9 f7       	brne	.-14     	; 0x249e <__ultoa_invert+0xa2>
    24ac:	62 0f       	add	r22, r18
    24ae:	73 1f       	adc	r23, r19
    24b0:	84 1f       	adc	r24, r20
    24b2:	95 1f       	adc	r25, r21
    24b4:	a0 1d       	adc	r26, r0
    24b6:	08 95       	ret

000024b8 <eeprom_read_byte>:
    24b8:	f9 99       	sbic	0x1f, 1	; 31
    24ba:	fe cf       	rjmp	.-4      	; 0x24b8 <eeprom_read_byte>
    24bc:	92 bd       	out	0x22, r25	; 34
    24be:	81 bd       	out	0x21, r24	; 33
    24c0:	f8 9a       	sbi	0x1f, 0	; 31
    24c2:	99 27       	eor	r25, r25
    24c4:	80 b5       	in	r24, 0x20	; 32
    24c6:	08 95       	ret

000024c8 <eeprom_update_byte>:
    24c8:	26 2f       	mov	r18, r22

000024ca <eeprom_update_r18>:
    24ca:	f9 99       	sbic	0x1f, 1	; 31
    24cc:	fe cf       	rjmp	.-4      	; 0x24ca <eeprom_update_r18>
    24ce:	92 bd       	out	0x22, r25	; 34
    24d0:	81 bd       	out	0x21, r24	; 33
    24d2:	f8 9a       	sbi	0x1f, 0	; 31
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	00 b4       	in	r0, 0x20	; 32
    24d8:	02 16       	cp	r0, r18
    24da:	39 f0       	breq	.+14     	; 0x24ea <eeprom_update_r18+0x20>
    24dc:	1f ba       	out	0x1f, r1	; 31
    24de:	20 bd       	out	0x20, r18	; 32
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	fa 9a       	sbi	0x1f, 2	; 31
    24e6:	f9 9a       	sbi	0x1f, 1	; 31
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	08 95       	ret

000024ec <__prologue_saves__>:
    24ec:	2f 92       	push	r2
    24ee:	3f 92       	push	r3
    24f0:	4f 92       	push	r4
    24f2:	5f 92       	push	r5
    24f4:	6f 92       	push	r6
    24f6:	7f 92       	push	r7
    24f8:	8f 92       	push	r8
    24fa:	9f 92       	push	r9
    24fc:	af 92       	push	r10
    24fe:	bf 92       	push	r11
    2500:	cf 92       	push	r12
    2502:	df 92       	push	r13
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	ca 1b       	sub	r28, r26
    2516:	db 0b       	sbc	r29, r27
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	09 94       	ijmp

00002524 <__epilogue_restores__>:
    2524:	2a 88       	ldd	r2, Y+18	; 0x12
    2526:	39 88       	ldd	r3, Y+17	; 0x11
    2528:	48 88       	ldd	r4, Y+16	; 0x10
    252a:	5f 84       	ldd	r5, Y+15	; 0x0f
    252c:	6e 84       	ldd	r6, Y+14	; 0x0e
    252e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2530:	8c 84       	ldd	r8, Y+12	; 0x0c
    2532:	9b 84       	ldd	r9, Y+11	; 0x0b
    2534:	aa 84       	ldd	r10, Y+10	; 0x0a
    2536:	b9 84       	ldd	r11, Y+9	; 0x09
    2538:	c8 84       	ldd	r12, Y+8	; 0x08
    253a:	df 80       	ldd	r13, Y+7	; 0x07
    253c:	ee 80       	ldd	r14, Y+6	; 0x06
    253e:	fd 80       	ldd	r15, Y+5	; 0x05
    2540:	0c 81       	ldd	r16, Y+4	; 0x04
    2542:	1b 81       	ldd	r17, Y+3	; 0x03
    2544:	aa 81       	ldd	r26, Y+2	; 0x02
    2546:	b9 81       	ldd	r27, Y+1	; 0x01
    2548:	ce 0f       	add	r28, r30
    254a:	d1 1d       	adc	r29, r1
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	ed 01       	movw	r28, r26
    2558:	08 95       	ret

0000255a <_exit>:
    255a:	f8 94       	cli

0000255c <__stop_program>:
    255c:	ff cf       	rjmp	.-2      	; 0x255c <__stop_program>
