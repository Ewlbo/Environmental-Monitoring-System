
EMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800100  00800100  0000021a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca5  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043f  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3a       	cpi	r26, 0xA3	; 163
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	
	if(UCSR0A & (1 << UDRE0))
	{
		UDR0 = 0;
	}
}
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 9a       	sbi	0x07, 1	; 7
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  b0:	2c e9       	ldi	r18, 0x9C	; 156
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  b8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  dc:	88 e4       	ldi	r24, 0x48	; 72
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <main>:
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <__vector_20>:

ISR(USART_TX_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
 108:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <serialReadPos>
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 110:	e8 17       	cp	r30, r24
 112:	89 f0       	breq	.+34     	; 0x136 <__vector_20+0x40>
	{
		UDR0 = serialBuffer[serialReadPos];
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ed 5d       	subi	r30, 0xDD	; 221
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	80 81       	ld	r24, Z
 11c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		serialReadPos++;
 120:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <serialReadPos>
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	98 0f       	add	r25, r24
		
		if(serialReadPos >= TX_BUFFER_SIZE)
 128:	1a f0       	brmi	.+6      	; 0x130 <__vector_20+0x3a>
ISR(USART_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serialBuffer[serialReadPos];
		serialReadPos++;
 12a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <serialReadPos>
 12e:	03 c0       	rjmp	.+6      	; 0x136 <__vector_20+0x40>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos++;
 130:	8e 5f       	subi	r24, 0xFE	; 254
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <serialReadPos>
		}
	}
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
	++timer;
 15a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer>
 15e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer+0x1>
 162:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer+0x2>
 166:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer+0x3>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer>
 174:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer+0x1>
 178:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timer+0x2>
 17c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timer+0x3>
	
	if(timer > 15600)	// Approx. every second
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer>
 184:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer+0x1>
 188:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer+0x2>
 18c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer+0x3>
	{
		// check gas approx. every 1.5s
	}
}
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
