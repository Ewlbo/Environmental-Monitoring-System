
AnalogMultiplexer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <enableChannel>:
}


void enableChannel(int ch)
{
	switch(ch)
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	91 05       	cpc	r25, r1
  84:	a9 f0       	breq	.+42     	; 0xb0 <enableChannel+0x30>
  86:	2c f4       	brge	.+10     	; 0x92 <enableChannel+0x12>
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	49 f0       	breq	.+18     	; 0x9e <enableChannel+0x1e>
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	59 f0       	breq	.+22     	; 0xa6 <enableChannel+0x26>
  90:	08 95       	ret
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	91 05       	cpc	r25, r1
  96:	89 f0       	breq	.+34     	; 0xba <enableChannel+0x3a>
  98:	04 97       	sbiw	r24, 0x04	; 4
  9a:	a1 f0       	breq	.+40     	; 0xc4 <enableChannel+0x44>
  9c:	08 95       	ret
	{
		case 0:
		PORTD &= ~(S0 | S1 | S2);	// All LOW (check flowchart for select pin states)
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	87 7c       	andi	r24, 0xC7	; 199
  a2:	8b b9       	out	0x0b, r24	; 11
		break;
  a4:	08 95       	ret
		case 1:
		PORTD |= S0;
  a6:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(S1 | S2);
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	8f 7c       	andi	r24, 0xCF	; 207
  ac:	8b b9       	out	0x0b, r24	; 11
		break;
  ae:	08 95       	ret
		case 2:
		PORTD |= S1;
  b0:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= ~(S0 | S2);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	87 7d       	andi	r24, 0xD7	; 215
  b6:	8b b9       	out	0x0b, r24	; 11
		break;
  b8:	08 95       	ret
		case 3:
		PORTD |= (S0 | S1);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	88 61       	ori	r24, 0x18	; 24
  be:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(S2);
  c0:	5d 98       	cbi	0x0b, 5	; 11
		break;
  c2:	08 95       	ret
		case 4:
		PORTD |= S2;
  c4:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &= ~(S0 | S1);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	87 7e       	andi	r24, 0xE7	; 231
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <main>:
#define	WIND_DIR 3
#define WIND_SPD 4

int main(void)
{
	DDRD |= (S0 | S1 | S2);			// PD3, PD4, PD5 as OUTPUT
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	88 63       	ori	r24, 0x38	; 56
  d2:	8a b9       	out	0x0a, r24	; 10
	
	enableChannel(LIGHT_S);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 40 00 	call	0x80	; 0x80 <enableChannel>
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
